[
    {
        "command": "mes(\"<string>\")",
        "line": 1209,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*mes(\"<string>\")\n\nThis command will displays a box on the screen for the invoking character,\nif no such box is displayed already, and will print the string specified\ninto that box. There is normally no 'close' or 'next' button on this box,\nunless you create one with 'close' or 'next', and while it's open the\nplayer can't do much else, so it's important to create a button later. If\nthe string is empty, it will show up as an empty line.\n\n    mes(\"Text that will appear in the box\");\n\nInside the string you may put color codes, which will alter the color of\nthe text printed after them. The color codes are all '^<R><G><B>' and\ncontain three hexadecimal numbers representing colors as if they were\nHTML colors - ^FF0000 is bright red, ^00FF00 is bright green, ^0000FF is\nbright blue, ^000000 is black. ^FF00FF is a pure magenta, but it's also\na color that is considered transparent whenever the client is drawing\nwindows on screen, so printing text in that color will have kind of a\nweird effect.  You may also use C_ constants accompany with \"F_MesColor\"\nfunction for the color effect, see the full list of the available ones\nin 'db\/constants.conf' under 'C_'. Once you've set a text's color to something,\nyou have to set it back to black unless you want all the rest of the text be in\nthat color:\n\n    mes(\"This is ^FF0000 red ^000000 and this is ^00FF00 green, ^000000 so.\");\n    mesf(\"%sThis message is now in BLUE.\", F_MesColor(C_BLUE));\n\nNotice that the text coloring is handled purely by the client. If you use\nnon-English characters, the color codes might get screwed if they stick to\nletters with no intervening space. Separating them with spaces from the\nletters on either side solves the problem.\n\nIf you're using a client from 2011-10-10aRagexe.exe onwards, you can also\nuse automatic navigation and open URLs in browser by using some HTML-like\nlabels. For example:\n\n    mes(\"go to <NAVI>[Hat Maker]<INFO>izlude,131,148,<\/INFO><\/NAVI> to make hats\");\n\nWill make the [Hat Maker] text clickable in the client and start a navigation\nto that point.\n\n    mes(\"You can <URL>Google<INFO>http:\/\/www.google.com\/<\/INFO><\/URL> anything\");\n\nThis will allow you to visit 'Google' with the in-game browser using default dimensions.\n\n    mes(\"You can <URL>Bing!<INFO>http:\/\/www.bing.com\/,800,600<\/INFO><\/URL> anything\");\n\nClicking 'Bing!' will open the in-game browser using the specified dimensions. (800x600)\n\nIf you're using client from 2013-01-30 onwards, you can also use <ITEMLINK> to show\nthe item's description. Gravity changed this into <ITEM> since 2015-07-29 onwards.\n\n    mes(\"Bring me an <ITEM>Apple<INFO>512<\/INFO><\/ITEM>.\");\n    mesf(\"Bring me an %s.\", F_MesItemInfo(Apple));\n\nThis will show the item name and a clickable link for the item description."
    },
    {
        "command": "mesf(\"<format>\"{, <param>{, <param>{, ...}}})",
        "line": 1268,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*mesf(\"<format>\"{, <param>{, <param>{, ...}}})\n\nThis command will display a box on the screen for the invoking character,\nif no such box is displayed already, and will print the string specified\ninto that box, after applying the same format-string replacements as sprintf().\n\nExample:\n\n\tmesf(\"Hello, I'm %s, a level %d %s\", strcharinfo(PC_NAME), BaseLevel, jobname(Class));\n\t\/\/ is equivalent to:\n\tmes(sprintf(\"Hello, I'm %s, a level %d %s\", strcharinfo(PC_NAME), BaseLevel, jobname(Class)));\n\nThis command is a combination of mes() and sprintf(). See their documentation\nfor more details."
    },
    {
        "command": "next()",
        "line": 1285,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*next()\n\nThis command will display a 'next' button in the message window for the\ninvoking character. Clicking on it will cause the window to clear and\ndisplay a new one. Used to segment NPC-talking, next() is often used in\ncombination with mes() and close().\n\nIf no window is currently on screen, one will be created, but once the\ninvoking character clicks on it, a warning is thrown on the server console\nand the script will terminate.\n\n    mes(\"[Woman]\");\n    mes(\"This would appear on the page\");\n    next();\n    mes(\"[Woman]\"); \/\/ This is needed since it is a new page and the top will now be blank\n    mes(\"This would appear on the 2nd page\");"
    },
    {
        "command": "mesclear();",
        "line": 1304,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*mesclear();\n\nThis command will clear the dialog text and continue the script without player interaction.\n\nExample:\n\tmes(\"This is how the 'mesclear' script command works.\");\n\tsleep2 3000;\n\tmesclear(); \/\/ This will clear the dialog and continue to the next one.\n\tmes(\"I will show you again.\");\n\tsleep2 3000;\n\tmesclear(); \/\/ This will clear the dialog and continue to the next one.\n\tmes(\"Bye!\");"
    },
    {
        "command": "close()",
        "line": 1319,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*close()\n\nThis command will create a 'close' button in the message window for the\ninvoking character. If no window is currently on screen, the script\ncommand 'end;' must be used. This is one of the ways to end a speech from\nan NPC. Once the button is clicked, the NPC script execution will end, and\nthe message box will disappear.\n\n    mes(\"[Woman]\");\n    mes(\"I am finished talking to you, click the close button.\");\n    close();\n    mes(\"This command will not run at all, since the script has ended.\");"
    },
    {
        "command": "close2()",
        "line": 1334,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*close2()\n\nThis command will create a 'close' button in the message window for the\ninvoking character. WARNING: If no window is currently on screen, the\nscript execution will halt indefinitely! See 'close'. There is one\nimportant difference, though - even though the message box will have\nclosed, the script execution will not stop, and commands after 'close2'\nwill still run, meaning an 'end' has to be used to stop the script, unless\nyou make it stop in some other manner.\n\n    mes(\"[Woman]\");\n    mes(\"I will warp you now.\");\n    close2();\n    warp(\"place\", 50, 50);\n    end;\n\nDon't expect things to run smoothly if you don't make your scripts 'end'."
    },
    {
        "command": "end",
        "line": 1354,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*end\n\nThis instruction will stop the execution for this particular script.\nNote that this is to be considered a special instruction (not a regular\ncommand or function), and as such doesn't require parentheses.\n\n    if (BaseLevel <= 10) {\n        npctalk(\"Look at that you are still a n00b\");\n        end;\n    }\n    if (BaseLevel <= 20) {\n        npctalk(\"Look at that you are getting better, but still a n00b\");\n        end;\n    }\n    if (BaseLevel <= 30) {\n        npctalk(\"Look at that you are getting there, you are almost 2nd profession now right???\");\n        end;\n    }\n    if (BaseLevel <= 40) {\n        npctalk(\"Look at that you are almost 2nd profession\");\n        end;\n    }\n\nWithout the use of 'end' it would travel through the ifs until the end\nof the script. If you were lvl 10 or less, you would see all the speech\nlines, the use of 'end' stops this, and ends the script."
    },
    {
        "command": "set(<variable>, <expression>)",
        "line": 1383,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*set(<variable>, <expression>)\n\nThis command will set a variable to the value that the expression results\nin. This isn't the only way to set a variable directly: you can set them\nmuch like any other programming language as stated before (refer to the\n'Assigning variables' section).\n\nThis command is deprecated and it shouldn't be used in new scripts, except\nsome special cases (mostly, set(getvariableofnpc(), <value>)). Use direct value\nassignment instead."
    },
    {
        "command": "setd(\"<variable name>\", <value>)",
        "line": 1396,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*setd(\"<variable name>\", <value>)\n\nWorks almost identically as set(), except the variable name is\nidentified as a string and can thus be constructed dynamically.\n\nThis command is equivalent to:\n  set(getd(\"variable name\"), <value>);\n\nExamples:\n\n  setd(\".@var$\", \"Poporing\");\n  mes(.@var$); \/\/ Displays \"Poporing\".\n\n  setd(\".@\" + .@var$ + \"123$\", \"Poporing is cool\");\n  mes(.@Poporing123$); \/\/ Displays \"Poporing is cool\"."
    },
    {
        "command": "getd(\"<variable name>\")",
        "line": 1414,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*getd(\"<variable name>\")\n\nReturns a reference to a variable, the name can be constructed dynamically.\nRefer to setd() for usage.\n\nThis can also be used to set an array dynamically:\n  setarray(getd(\".array[0]\"), 1, 2, 3, 4, 5);\n\nExamples:\n\n  mes(\"The value of $varReference is: \" + getd(\"$varRefence\"));\n  set(.@i, getd(\"$\" + \"pikachu\"));"
    },
    {
        "command": "getvariableofnpc(<variable>, \"<npc name>\")",
        "line": 1429,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*getvariableofnpc(<variable>, \"<npc name>\")\n\nReturns a reference to a NPC variable (. prefix) from the target NPC.\nThis can only be used to get . variables.\n\nExamples:\n\n\/\/This will return the value of .var, note that this can't be used, since\n\/\/the value isn't caught.\n\tgetvariableofnpc(.var, \"TargetNPC\");\n\n\/\/This will set the .@v variable to the value of the TargetNPC's .var\n\/\/variable.\n\t.@v = getvariableofnpc(.var, \"TargetNPC\");\n\n\/\/This will set the .var variable of TargetNPC to 1.\n\tset(getvariableofnpc(.var, \"TargetNPC\"), 1);\n\nNote: even though function objects can have .variables,\ngetvariableofnpc() should not be used on them."
    },
    {
        "command": "getvariableofpc(<variable>, <account id>{, <default value>})",
        "line": 1452,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*getvariableofpc(<variable>, <account id>{, <default value>})\n\nReturns a reference to a PC variable from the target player.\nIf <default value> is passed, it will return this value if the player is\nnot found.\n\nExamples:\n\n\/\/This will return the value of @var, note that this can't be used, since\n\/\/the value isn't caught.\n\tgetvariableofpc(@var, getcharid(CHAR_ID_ACCOUNT, \"player\"));\n\n\/\/This will set the .@v variable to the value of the player's @var\n\/\/variable.\n\t.@v = getvariableofpc(@var, getcharid(CHAR_ID_ACCOUNT, \"player\"));\n\n\/\/This will set the @var variable of the player to 1.\n\tset(getvariableofpc(@var, getcharid(CHAR_ID_ACCOUNT, \"player\")), 1);"
    },
    {
        "command": "goto(<label>)",
        "line": 1473,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*goto(<label>)\n\nThis command will make the script jump to a label, usually used in\nconjunction with other instructions, such as \"if\", but often used on its own.\n\n\t...\n\tgoto(Label);\n\tmes(\"This will not be seen\");\nLabel:\n\tmes(\"This will be seen\");\n\nGotos are considered to be harmful and should be avoided whenever possible."
    },
    {
        "command": "menu(\"<option_text>\", <target_label>{, \"<option_text>\", <target_label>, ...})",
        "line": 1488,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*menu(\"<option_text>\", <target_label>{, \"<option_text>\", <target_label>, ...})\n\nThis command will create a selectable menu for the invoking character.\nOnly one menu can be on screen at the same time.\n\nDepending on what the player picks from the menu, the script execution\nwill continue from the corresponding label. It's string-label pairs, not\nlabel-string.\n\nThis command is deprecated and it should not be used in new scripts, as it\nis likely to be removed at a later time. Please consider using select() or\nprompt() instead.\n\nOptions can be grouped together, separated by the character ':'.\n\n\tmenu(\"A:B\", L_Wrong, \"C\", L_Right);\n\nIt also sets a special temporary character variable @menu, which contains\nthe number of option the player picked. Numbering of options starts at 1.\nThis number is consistent with empty options and grouped options.\n\n\tmenu(\"A::B\", L_Wrong, \"\", L_Impossible, \"C\", L_Right);\n\tL_Wrong:\n\t\/\/ If they click \"A\" or \"B\" they will end up here\n\t\/\/ @menu == 1 if \"A\"\n\t\/\/ @menu == 2 will never happen because the option is empty\n\t\/\/ @menu == 3 if \"B\"\n\tL_Impossible:\n\t\/\/ Empty options are not displayed and therefore can't be selected\n\t\/\/ this label will never be reached from the menu command\n\tL_Right:\n\t\/\/ If they click \"C\" they will end up here\n\t\/\/ @menu == 5\n\nIf a label is '-', the script execution will continue right after the menu\ncommand if that option is selected, this can be used to save you time, and\noptimize big scripts.\n\n\tmenu(\"A::B:\", -, \"C\", L_Right);\n\t\/\/ If they click \"A\" or \"B\" they will end up here\n\t\/\/ @menu == 1 if \"A\"\n\t\/\/ @menu == 3 if \"B\"\n\tL_Right:\n\t\/\/ If they click \"C\" they will end up here\n\t\/\/ @menu == 5\n\nBoth these examples will perform the exact same task.\n\nIf you give an empty string as a menu item, the item will not display.\nThis can effectively be used to script dynamic menus by using empty string\nfor entries that should be unavailable at that time.\n\nYou can do it by using arrays, but watch carefully - this trick isn't high\nwizardry, but minor magic at least. You can't expect to easily duplicate\nit until you understand how it works.\n\nCreate a temporary array of strings to contain your menu items, and\npopulate it with the strings that should go into the menu at this\nexecution, making sure not to leave any gaps. Normally, you do it with a\nloop and an extra counter, like this:\n\n\tsetarray(.@possiblemenuitems$[0], <list of potential menu items>);\n\t.@j = 0; \/\/ That's the menu lines counter.\n\n\t\/\/ We loop through the list of possible menu items.\n\t\/\/ .@i is our loop counter.\n\tfor (.@i = 0; .@i < getarraysize(.@possiblemenuitems$); ++.@i) {\n\t\t\/\/ That 'condition' is whatever condition that determines whether\n\t\t\/\/ a menu item number .@i actually goes into the menu or not.\n\n\t\tif (<condition>) {\n\t\t\t\/\/ We record the option into the list of options actually\n\t\t\t\/\/ available.\n\t\t\t.@menulist$[.@j] = .@possiblemenuitems$[.@i];\n\n\t\t\t\/\/ We just copied the string, we do need it's number for later\n\t\t\t\/\/ though, so we record it as well.\n\t\t\t.@menureference[.@j] = .@i;\n\n\t\t\t\/\/ Since we've just added a menu item into the list, we\n\t\t\t\/\/ increment the menu lines counter.\n\t\t\t++.@j;\n\t\t}\n\n\t\t\/\/ We go on to the next possible menu item.\n\t}\n\nThis will create you an array .@menulist$ which contains the text of all\nitems that should actually go into the menu based on your condition, and\nan array .@menureference, which contains their numbers in the list of\npossible menu items. Remember, arrays start with 0. There's less of them\nthan the possible menu items you've defined, but the menu() command can\nhandle the empty lines - only if they are last in the list, and if it's\nmade this way, they are. Now comes a dirty trick:\n\n\t\/\/ X is whatever the most menu items you expect to handle.\n\tmenu(.@menulist$[0], -, .@menulist$[1], -, ..., .@menulist$[<X>], -);\n\nThis calls up a menu of all your items. Since you didn't copy some of the\npossible menu items into the list, it's end is empty and so no menu items\nwill show up past the end. But this menu() call doesn't jump anywhere, it\njust continues execution right after the menu() command. (And it's a good\nthing it doesn't, cause you can only explicitly define labels to jump to,\nand how do you know which ones to define if you don't know beforehand\nwhich options will end up where in your menu?)\nBut how do you figure out which option the user picked? Enter the @menu.\n\n@menu contains the number of option that the user selected from the list,\nstarting with 1 for the first option. You know now which option the user\npicked and which number in your real list of possible menu items it\ntranslated to:\n\n    mes(\"You selected \"+.@possiblemenuitems$[.@menureference[@menu-1]]+\"!\");\n\n@menu is the number of option the user picked.\n@menu-1 is the array index for the list of actually used menu items that\nwe made.\n.@menureference[@menu-1] is the number of the item in the array of possible\nmenu items that we've saved just for this purpose.\n\nAnd .@possiblemenuitems$[.@menureference[@menu-1]] is the string that we\nused to display the menu line the user picked. (Yes, it's a handful, but\nit works.)\n\nYou can set up a bunch of 'if (.@menureference[@menu-1]==X) goto(Y)'\nstatements to route your execution based on the line selected and still\ngenerate a different menu every time, which is handy when you want to, for\nexample, make users select items in any specific order before proceeding,\nor make a randomly shuffled menu.\n\nKafra code bundled with the standard distribution uses a similar\narray-based menu technique for teleport lists, but it's much simpler and\ndoesn't use @menu, probably since that wasn't documented anywhere.\n\nSee also 'select', which is probably better in this particular case.\nInstead of menu(), you could use select() like this:\n\n    .@dummy = select(.@menulist$[0], .@menulist$[1], ..., .@menulist$[<X>]);\n\nFor the purposes of the technique described above these two statements are\nperfectly equivalent."
    },
    {
        "command": "select(\"<option>\"{, \"<option>\", ...})",
        "line": 1632,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*select(\"<option>\"{, \"<option>\", ...})\n\nThis function is a handy replacement for 'menu' that doesn't use a complex\nlabel structure. It will return the number of the menu option picked,\nstarting with 1. If the player presses cancel, the script is terminated.\n\n    if (select(\"Yes\", \"No\") == 1)\n        mes(\"You said yes, I know.\");\n\nAnd like 'menu', the selected option is consistent with grouped options\nand empty options."
    },
    {
        "command": "prompt(\"<option>\"{, \"<option>\", ...})",
        "line": 1646,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*prompt(\"<option>\"{, \"<option>\", ...})\n\nThis function behaves exactly like select(), but when a player presses cancel\nit returns MAX_MENU_OPTIONS and the script is not terminated. You almost always\nwant to use select() rather than prompt()."
    },
    {
        "command": "input(<variable>{, <min>{, <max>}})",
        "line": 1654,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*input(<variable>{, <min>{, <max>}})\n\nThis command will make an input box pop up on the client connected to the\ninvoking character, to allow entering of a number or a string. This has\nmany uses, one example would be a guessing game, also making use of the\n'rand' function:\n\n\tmes(\"[Woman]\");\n\tmes(\"Try and guess the number I am thinking of.\");\n\tmes(\"The number will be between 1 and 10.\");\n\tnext();\n\t.@number = rand(1, 10);\n\tinput(.@guess);\n\tif (.@guess == .@number) {\n\t\tmes(\"[Woman]\");\n\t\tmes(\"Well done that was the number I was thinking of\");\n\t\tclose();\n\t} else {\n\t\tmes(\"[Woman]\");\n\t\tmes(\"Sorry, that wasn't the number I was thinking of.\");\n\t\tclose();\n\t}\n\nIf you give the input() command a string variable to put the input in, it\nwill allow the player to enter text. Otherwise, only numbers will be\nallowed.\n\n\tmes(\"[Woman]\");\n\tmes(\"Please say HELLO\");\n\tnext();\n\tinput(.@var$);\n\tif (.@var$ == \"HELLO\") {\n\t\tmes(\"[Woman]\");\n\t\tmes(\"Well done you typed it correctly\");\n\t\tclose();\n\t} else {\n\t\tmes(\"[Woman]\");\n\t\tmes(\"Sorry you got it wrong\");\n\t\tclose();\n\t}\n\nNormally you may not input a negative number with this command.\nThis is done to prevent exploits in badly written scripts, which would let\npeople, for example, put negative amounts of Zeny into a bank script and\nreceive free Zeny as a result.\n\nThe command has two optional arguments and a return value.\nThe default value of 'min' and 'max' can be set with 'input_min_value' and\n'input_max_value' in conf\/map\/script.conf.\nFor numeric inputs the value is capped to the range [min, max]. Returns 1\nif the value was higher than 'max', -1 if lower than 'min' and 0 otherwise.\nFor string inputs it returns 1 if the string was longer than 'max', -1 is\nshorter than 'min' and 0 otherwise."
    },
    {
        "command": "callfunc(\"<function>\"{, <argument>, ...<argument>})",
        "line": 1710,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*callfunc(\"<function>\"{, <argument>, ...<argument>})\n\nThis command lets you call up a function NPC. A function NPC can be called\nfrom any script on any map server. Using the 'return' instruction it\nwill come back to the place that called it.\n\n\tplace,50,50,6%TAB%script%TAB%Woman%TAB%115,{\n\t\tmes(\"[Woman]\");\n\t\tmes(\"Lets see if you win\");\n\t\tcallfunc(\"funcNPC\");\n\t\tmes(\"Well done you have won\");\n\t\tclose();\n\t}\n\tfunction%TAB%script%TAB%funcNPC%TAB%{\n\t\t.@win = rand(2);\n\t\tif (.@win == 0)\n\t\t\treturn;\n\t\tmes(\"Sorry you lost\");\n\t\tend;\n\t}\n\nYou can pass arguments to your function - values telling it what exactly\nto do - which will be available there with getarg() (see 'getarg').\nNotice that returning is not mandatory, you can end execution right there.\n\nIf you want to return a real value from inside your function NPC, you\nmay do so:\n\n\tplace,50,50,6%TAB%script%TAB%Man%TAB%115,{\n\t\tmes(\"[Man]\");\n\t\tmes(\"Gimme a number!\");\n\t\tnext();\n\t\tinput(.@number);\n\t\tif (callfunc(\"OddFunc\", .@number))\n\t\t\tmes(\"It's Odd!\");\n\t\tclose();\n\t}\n\tfunction%TAB%script%TAB%OddFunc%TAB%{\n\t\tif (getarg(0)%2==0)\n\t\t\treturn 0;\/\/ it's even\n\t\treturn 1;\/\/ it's odd\n\t}\n\nAlternately, user-defined functions may be called directly without the use\nof the callfunc() script command.\n\n\tfunction<TAB>script<TAB>SayHello<TAB>{\n\t\tmes(\"Hello \" + getarg(0));\n\t\treturn 0;\n\t}\n\n\tplace,50,50,6<TAB>script<TAB>Man<TAB>115,{\n\t\tmes(\"[Man]\");\n\t\tSayHello(strcharinfo(PC_NAME));\n\t\tclose();\n\t}\n\nNote:\n\n !! A user-defined function must be declared \/before\/ a script attempts to\n !! call it. That is to say, any functions should be placed above scripts\n !! or NPCs (or loaded in a separate file first) before attempting to call\n !! them directly."
    },
    {
        "command": "callsub(<label>{, <argument>, ...<argument>})",
        "line": 1776,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*callsub(<label>{, <argument>, ...<argument>})\n\nThis command will go to a specified label within the current script (do\nNOT use quotes around it) coming in as if it were a 'callfunc' call, and\npass it arguments given, if any, which can be recovered there with\n'getarg'. When done there, you should use the 'return' command to go back\nto the point from where this label was called. This is used when there is\na specific thing the script will do over and over, this lets you use the\nsame bit of code as many times as you like, to save space and time,\nwithout creating extra NPC objects which are needed with 'callfunc'. A\nlabel is not callable in this manner from another script.\n\nExample 1: callsub for checking (if checks pass, return to script)\n\tcallsub(S_CheckFull, \"guild_vs2\", 50);\n\tswitch (rand(4)) {\n\tcase 0:\n\t\twarp(\"guild_vs2\", 9, 50);\n\t\tend;\n\tcase 1:\n\t\twarp(\"guild_vs2\", 49, 90);\n\t\tend;\n\tcase 2:\n\t\twarp(\"guild_vs2\", 90, 50);\n\t\tend;\n\tcase 3:\n\t\twarp(\"guild_vs2\", 49, 9);\n\t\tend;\n\t}\n\tend;\n\nS_CheckFull:\n\tif (getmapusers(getarg(0)) >= getarg(1)) {\n\t\tmes(\"I'm sorry, this arena is full.  Please try again later.\");\n\t\tclose();\n\t}\n\treturn;\n\nExample 2: callsub used repeatedly, with different arguments\n\/\/ notice how the Zeny check\/delete is reused, instead of copy-pasting for\n\/\/ every warp.\n\tswitch (select(\"Abyss Lake\", \"Amatsu Dungeon\", \"Anthell\", \"Ayothaya Dungeon\", \"Beacon Island, Pharos\")) {\n\t\tcase 1:\n\t\t\tcallsub(S_DunWarp, \"hu_fild05\", 192, 207);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tcallsub(S_DunWarp, \"ama_in02\", 119, 181);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tcallsub(S_DunWarp, \"moc_fild20\", 164, 145);\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tcallsub(S_DunWarp, \"ayo_fild02\", 279, 150);\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tcallsub(S_DunWarp, \"cmd_fild07\", 132, 125);\n\t\t\tbreak;\n\t\t\/\/ etc\n\t}\n\n\/\/ ...\n\nS_DunWarp:\n\/\/ getarg(0) = \"mapname\"\n\/\/ getarg(1) = x\n\/\/ getarg(2) = y\n\tif (Zeny >= 100) {\n\t\tZeny -= 100;\n\t\twarp(getarg(0), getarg(1), getarg(2));\n\t} else {\n\t\tmes(\"Dungeon warp costs 100 Zeny.\");\n\t}\n\tclose();"
    },
    {
        "command": "getarg(<index>{, <default_value>})",
        "line": 1851,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*getarg(<index>{, <default_value>})\n\nThis function is used when you use the 'callsub' or 'callfunc' commands.\nIn the call you can specify variables that will make that call different\nfrom another one. This function will return an argument the function or\nsubroutine was called with, and is the normal way to get them.\nThis is another thing that can let you use the same code more than once.\n\nArgument numbering starts with 0, i.e. the first argument you gave is\nnumber 0. If no such argument was given, a zero is returned.\n\n\tplace,50,50,6%TAB%script%TAB%Woman1%TAB%115,{\n\t\tmes(\"[Woman]\");\n\t\tmes(\"Lets see if you win\");\n\t\tcallfunc(\"funcNPC\", 2);\n\t\tmes(\"Well done you have won\");\n\t\t\/\/ ...\n\t}\n\n\tplace,52,50,6%TAB%script%TAB%Woman2%TAB%115,{\n\t\tmes(\"[Woman]\");\n\t\tmes(\"Lets see if you win\");\n\t\tcallfunc(\"funcNPC\", 5);\n\t\tmes(\"Well done you have won\");\n\t\t\/\/ ...\n\t}\n\n\tfunction%TAB%script%TAB%funcNPC%TAB%{\n\t\t.@win = rand(getarg(0));\n\t\tif (.@win == 0)\n\t\t\treturn;\n\t\tmes(\"Sorry you lost\");\n\t\tclose();\n\t}\n\n\"woman1\" NPC object calls the funcNPC. The argument it gives in this call\nis stated as 2, so when the random number is generated by the 'rand'\nfunction, it can only be 0 or 1. Whereas \"woman2\" gives 5 as the argument\nnumber 0 when calling the function, so the random number could be 0, 1, 2,\n3 or 4, this makes \"woman2\" less likely to say the player won.\n\nYou can pass multiple arguments in a function call:\n\n\tcallfunc(\"funcNPC\", 5, 4, 3);\n\ngetarg(0) would be 5, getarg(1) would be 4 and getarg(2) would be 3.\n\nGetarg also has an optional argument:\nIf the target argument exists, it is returned.\nOtherwise, if <default_value> is present it is returned instead, if not\nthe script terminates immediately.\n\nIn previous example getarg(2, -1) would be 3 and getarg(3, -1) would be -1."
    },
    {
        "command": "getargcount()",
        "line": 1907,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*getargcount()\n\nThis function is used when you use the 'callsub' or 'callfunc' commands.\nIn the call you can specify arguments. This function will return the\nnumber of arguments provided.\n\nExample:\n\tcallfunc(\"funcNPC\", 5, 4, 3);\n\t\/\/ ...\n\tfunction%TAB%script%TAB%funcNPC%TAB%{\n\t\t.@count = getargcount(); \/\/ 3\n\t\t\/\/...\n\t}"
    },
    {
        "command": "return {<value>}",
        "line": 1923,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*return {<value>}\n\nThis instruction causes the script execution to leave previously called\nfunction with callfunc() or script with callsub() and return to the\nlocation, where the call originated from. Optionally a return value can\nbe supplied.\n\nUsing this command outside of functions or scripts referenced by callsub\nwill result in error and termination of the script.\n\n\tcallfunc(\"<your function>\"); \/\/ when nothing is returned\n\t<variable> = callfunc(\"<your function>\"); \/\/ when a value is being returned"
    },
    {
        "command": "function <function name>;",
        "line": 1938,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*function <function name>;\n*<function name>{(<argument>, ...<argument>)};\n*function <function name> {\n<code>\n}\n\nThis works like callfunc(), and is used for cleaner and faster scripting.\nThe function must be defined and used within a script, and works like a\nlabel with arguments.\nNote that the name may only contain alphanumeric characters and underscore.\n\nUsage:\n\n    1. Declare the function.\n\tfunction <function name>;\n    2. Call the function anywhere within the script.\n       It can also return a value when used with parentheses.\n\t<function name>;\n    3. Define the function within the script.\n\t<function name> {<code>}\n\nExample:\n\nprontera,154,189,4\tscript\tItem Seller\t767,{\n\t\/* Function declaration *\/\n\tfunction SF_Selling;\n\n\tif (Zeny > 50) {\n\t\tmes(\"Welcome!\");\n\t\t\/* Function call *\/\n\t\tSF_Selling();\n\t} else {\n\t\tmes(\"You need 50z, sorry!\");\n\t}\n\tclose();\n\n\t\/* Function definition *\/\n\tfunction SF_Selling {\n\t\tmes(\"Would you like to buy a phracon for 50z?\");\n\t\tnext();\n\t\tif (select(\"Yes\", \"No, thanks\") == 1) {\n\t\t\tZeny -= 50;\n\t\t\tgetitem(Phracon, 1);\n\t\t\tmes(\"Thank you!\");\n\t\t}\n\t\treturn;\n\t}\n}\n\nExample with parameters and return value:\n\nprontera,150,150,0\tscript\tTestNPC\t123,{\n\t\/* Function declaration *\/\n\tfunction MyAdd;\n\n\tmes(\"Enter two numbers.\");\n\tnext();\n\tinput(.@a);\n\tinput(.@b);\n\t\/* Function call *\/\n\tmes(.@a+\" + \"+.@b+\" = \"+MyAdd(.@a, .@b));\n\tclose();\n\n\t\/* Function definition *\/\n\tfunction MyAdd {\n\t\treturn(getarg(0)+getarg(1));\n\t}\n}"
    },
    {
        "command": "is_function(\"<function name>\")",
        "line": 2010,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*is_function(\"<function name>\")\n\nThis command checks whether or not a function exists and returns its type.\nReturns false if it cannot be found.\n\nreturn values:\n\n\tFUNCTION_IS_COMMAND - built-in script command (eg: mes, select, ...)\n\tFUNCTION_IS_GLOBAL  - user-defined global function (callable with callfunc)\n\tFUNCTION_IS_LOCAL   - user-defined local function\n\tFUNCTION_IS_LABEL   - user-defined label function (callable with callsub)\n\nExample:\n\n\tfunction\tscript\tfunc1\t{\n\t\tdothat();\n\t}\n\n\t-\tscript\ttest\tFAKE_NPC,{\n\t\tfunction func2 {\n\t\t\tdo_something();\n\t\t}\n\n\tfunc3:\n\t\tend;\n\n\t\tis_function(\"func1\"); \/\/ FUNCTION_IS_GLOBAL\n\t\tis_function(\"func2\"); \/\/ FUNCTION_IS_LOCAL\n\t\tis_function(\"func3\"); \/\/ FUNCTION_IS_LABEL\n\t\tis_function(\"select\"); \/\/ FUNCTION_IS_COMMAND\n\t\tis_function(\"invalid\"); \/\/ false\n\t}"
    },
    {
        "command": "if (<condition>) <statement or block>",
        "line": 2045,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*if (<condition>) <statement or block>\n\nThis is the basic conditional command.\n\nThe condition can be any expression. All expressions resulting in a\nnon-zero value will be considered True, including negative values. All\nexpressions resulting in a zero are false.\n\nIf the expression results in True, the statement will be executed. If it\nisn't true, nothing happens and we move on to the next line of the script.\n\n    if (true)\n\tmes(\"This will always print.\");\n    if (0)\n\tmes(\"And this will never print.\");\n    if (5)\n\tmes(\"This will also always print.\");\n    if (-1)\n\tmes(\"Funny as it is, this will also print just fine.\");\n\nFor more information on conditional operators see the operators section\nabove.\nAnything that is returned by a function can be used in a condition check\nwithout bothering to store it in a specific variable:\n\n\tif (strcharinfo(PC_NAME) == \"Daniel Jackson\")\n\t\tmes(\"It is true, you are Daniel!\");\n\nMore examples of using the 'if' command in the real world:\n\nExample 1:\n\n\t.@var1 = 1;\n\tinput(.@var2);\n\tif (.@var1 == .@var2)\n\t\tclose();\n\tmes(\"Sorry that is wrong\");\n\tclose();\n\nExample 2:\n\n\t.@var1 = 1;\n\tinput(.@var2);\n\tif (.@var1 != .@var2)\n\t\tmes(\"Sorry that is wrong\");\n\tclose();\n\n(Notice examples 1 and 2 have the same effect.)\n\nExample 3:\n\n\t++@var1;\n\tmes(\"[Forgetfull Man]\");\n\tif (@var == 1)\n\t\tmes(\"This is the first time you have talked to me\");\n\tif (@var == 2)\n\t\tmes(\"This is the second time you have talked to me\");\n\tif (@var == 3)\n\t\tmes(\"This is the third time you have talked to me\");\n\tif (@var == 4)\n\t\tmes(\"This is the forth time you have talked to me, but I think I am getting amnesia, I have forgotten about you\");\n\tif (@var == 4)\n\t\t@var = 0;\n\tclose();\n\nExample 4:\n\n\tmes(\"[Quest Person]\");\n\t\/\/ The (AegisName) constant Apple comes from item_db, it is the item number 512.\n\tif (countitem(Apple) >= 1) {\n\t\tmes(\"Oh an apple, I didn't want it, I just wanted to see one\");\n\t\tclose();\n\t}\n\tmes(\"Can you please bring me an apple?\");\n\tclose();\n\nExample 5: Using complex conditions.\n\n\tmes(\"[Multi Checker]\");\n\tif ((queststarted == 1) && (countitem(Apple) >= 5)) {\n\t\t\/\/ Executed only if the quest has been started AND You have 5 apples\n\t\tmes(\"[Multi Checker]\");\n\t\tmes(\"Well done you have started the quest of got me 5 apples\");\n\t\tmes(\"Thank you\");\n\t\tqueststarted = 0;\n\t\tdelitem(Apple, 5);\n\t\tclose();\n\t}\n\tmes(\"Please get me 5 apples\");\n\tqueststarted = 1;\n\tclose();\n\nIf the condition doesn't meet, it'll do the action following the else.\nWe can also group several actions depending on a condition, this way:\n\nif (<condition>) {\n\tdothis1();\n\tdothis2();\n} else {\n\tdothat1();\n\tdothat2();\n\tdothat3();\n}\n\nExample 6:\n\n\tmes(\"[Person Checker]\");\n\tif ($name$ == \"\") {\n\t\tmes(\"Please tell me someone's name\");\n\t\tnext();\n\t\tinput($name$);\n\t\t$name2$ = strcharinfo(PC_NAME);\n\t\tmes(\"[Person Checker]\");\n\t\tmes(\"Thank you\");\n\t\tclose();\n\t}\n\tif ($name$ == strcharinfo(PC_NAME)) {\n\t\tmes(\"You are the person that \" +$name2$+ \" just mentioned\");\n\t\tmes(\"nice to meet you\");\n\t} else {\n\t\tmes(\"You are not the person that \" +$name2$+ \" mentioned\");\n\t}\n\t$name$ = \"\";\n\t$name2$ = \"\";\n\tclose();\n\nSee strcharinfo() for explanation of what this function does.\n\nRemember that if you plan to do several actions upon the condition being\nfalse, and you forget to use the curly braces (the { } ), the second\naction will be executed regardless the output of the condition, unless of\ncourse, you stop the execution of the script if the condition is true\n(that is, in the first grouping using a return, and end or a close()).\n\nAlso, you can have multiple conditions nested or chained, and don't worry\nabout limits as to how many nested if you can have, there is no spoon ;).\n\n...\nif (<condition 1>) {\n\tdothis();\n} else if (<condition 2>) {\n\tdotheother();\n\tdo_that();\n\tend;\n} else {\n\tdo_this();\n}\n..."
    },
    {
        "command": "while (<condition>) <statement or block>",
        "line": 2196,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*while (<condition>) <statement or block>\n\nThis is probably the simplest and most frequently used loop structure. The\n'while' statement can be interpreted as \"while <condition> is true,\nperform <statement>\". It is a pretest loop, meaning the conditional\nexpression is tested before any of the statements in the body of the loop\nare performed. If the condition evaluates to false, the statement(s) in\nthe body of the loop is\/are never executed. If the condition evaluates to\ntrue, the statement(s) are executed, then control transfers back to the\nconditional expression, which is reevaluated and the cycle continues.\n\nMultiple statements can be grouped with { }, curly braces, just like with\nthe 'if' statement.\n\nExample 1:\n\twhile (switch(select(\"Yes\", \"No\") == 2))\n\t\tmes(\"You picked no.\");\n\nExample 2: multiple statements\n\twhile (switch(select(\"Yes\", \"No\") == 2 )) {\n\t\tmes(\"Why did you pick no?\");\n\t\tmes(\"You should pick yes instead!\");\n\t}\n\nExample 3: counter-controlled loop\n\t.@i = 1;\n\twhile (.@i <= 5) {\n\t\tmes(\"This line will print 5 times.\");\n\t\t++.@i;\n\t}\n\nExample 4: sentinel-controlled loop\n\tmes(\"Input 0 to stop\");\n\tinput(.@num);\n\twhile (.@num != 0) {\n\t\tmes(\"You entered \" + .@num);\n\t\tinput(.@num);\n\t}\n\tclose();"
    },
    {
        "command": "for (<variable initialization>; <condition>; <variable update>) <statement or block>",
        "line": 2238,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*for (<variable initialization>; <condition>; <variable update>) <statement or block>\n\nAnother pretest looping structure is the 'for' statement. It is considered\na specialized form of the 'while' statement, and is usually associated\nwith counter-controlled loops. Here are the steps of the 'for' statement:\nthe initialize statement is executed first and only once. The condition\ntest is performed. When the condition evaluates to false, the rest of the\nfor statement is skipped. When the condition evaluates to true, the body\nof the loop is executed, then the update statement is executed (this\nusually involves incrementing a variable). Then the condition is\nreevaluated and the cycle continues.\n\nExample 1:\n\tfor (.@i = 0; .@i < 5; ++.@i)\n\t\tmes(\"This line will print 5 times.\");\n\nExample 2:\n\tmes(\"This will print the numbers 1 - 5.\");\n\tfor (.@i = 1; .@i <= 5; ++.@i)\n\t\tmes(.@i);"
    },
    {
        "command": "do { <statements>; } while (<condition>)",
        "line": 2261,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*do { <statements>; } while (<condition>)\n\nThe 'do...while' is the only post-test loop structure available in this\nscript language. With a post-test, the statements are executed once before\nthe condition is tested. When the condition is true, the statement(s) are\nrepeated. When the condition is false, control is transferred to the\nstatement following the 'do...while' loop expression.\n\nExample 1: sentinel-controlled loop\n\tmes(\"This menu will keep appearing until you pick Cancel\");\n\tdo {\n\t\t.@choice = select(\"One:Two:Three:Cancel\");\n\t} while (.@choice != 4);\n\nExample 2: counter-controlled loop\n\tmes(\"This will countdown from 10 to 1.\");\n\t.@i = 10;\n\tdo {\n\t\tmes(.@i--);\n\t} while (.@i > 0);"
    },
    {
        "command": "freeloop(<toggle>)",
        "line": 2284,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*freeloop(<toggle>)\n\nToggling this to enabled (true) allows the script instance to bypass the\ninfinite loop protection, allowing your script to loop as much as it may\nneed. Disabling (false) may warn you if an infinite loop is detected if your\nscript is looping too many times.\n\nPlease note, once again, that this isn't a solution to all problems, and by\ndisabling this protection your Hercules server may become laggy or\nunresponsive if the script it is used in is performing lenghty loop\noperations.\n\nExample:\n\tfreeloop(true); \/\/ enable script to loop freely\n\n\t\/\/Be aware with what you do here.\n\tfor (.@i = 0; .@i < .@bigloop; ++.@i) {\n\t\tdothis();\n\t\t\/\/ will sleep the script for 1ms when detect an infinity loop to\n\t\t\/\/ let Hercules do what it need to do (socket, timer, process,\n\t\t\/\/ etc.)\n\t}\n\n\tfreeloop(false); \/\/ disable\n\n\tfor (.@i = 0; .@i < .@bigloop; ++.@i) {\n\t\tdothis();\n\t\t\/\/ throw an infinity loop error\n\t}"
    },
    {
        "command": "setarray(<array name>[<first value>], <value>{, <value>...<value>})",
        "line": 2316,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*setarray(<array name>[<first value>], <value>{, <value>...<value>})\n\nThis command will allow you to quickly fill up an array in one go. Check\nthe Kafra scripts in the distribution to see this used a lot.\n\n\tsetarray(.@array[0], 100, 200, 300, 400, 500, 600);\n\nThe index of the first element of the array to alter can be omitted if\nzero. For example:\n\n\tsetarray(.@array, 200, 200, 200);\n\tsetarray(.@array[1], 300, 150);\n\nwill produce:\n\n .@array[0] = 200\n .@array[1] = 300\n .@array[2] = 150"
    },
    {
        "command": "cleararray(<array name>[<first value to alter>], <value>, <number of values to set>)",
        "line": 2337,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*cleararray(<array name>[<first value to alter>], <value>, <number of values to set>)\n\nThis command will change many array values at the same time to the same\nvalue.\n\n\tsetarray(.@array, 100, 200, 300, 400, 500, 600);\n\t\/\/ This will make all 6 values 0\n\tcleararray(.@array[0], 0, 6);\n\t\/\/ This will make array element 0 change to 245\n\tcleararray(.@array[0], 245, 1);\n\t\/\/ This is equivalent to the above\n\tcleararray(.@array, 245, 1);\n\t\/\/ This will make elements 1 and 2 change to 345\n\tcleararray(.@array[1], 345, 2);\n\nSee 'setarray'."
    },
    {
        "command": "copyarray(<destination array>[<first value>], <source array>[<first value>], <amount of data to copy>)",
        "line": 2356,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*copyarray(<destination array>[<first value>], <source array>[<first value>], <amount of data to copy>)\n\nThis command lets you quickly shuffle a lot of data between arrays, which\nis in some cases invaluable.\n\n\tsetarray(.@array, 100, 200, 300, 400, 500, 600);\n\t\/\/ So we have made .@array[]\n\tcopyarray(.@array2[0], .@array[2], 2);\n\n\t\/\/ Now, .@array2[0] will be equal to .@array[2] (300) and\n\t\/\/ .@array2[1] will be equal to .@array[3].\n\nSo using the examples above:\n .@array[0] = 100\n .@array[1] = 200\n .@array[2] = 300\n .@array[3] = 400\n .@array[4] = 500\n .@array[5] = 600\n\nNew Array:\n .@array2[0] = 300\n .@array2[1] = 400\n .@array2[2] = 0\n .@array2[3] = 0\n\nNotice that .@array[4] and .@array[5] won't be copied to the second array,\nand it will return a 0."
    },
    {
        "command": "deletearray(<array name>[<first value>], <how much to delete>)",
        "line": 2387,
        "category": "1 - Basic Commands",
        "sub_category": "",
        "description": "*deletearray(<array name>[<first value>], <how much to delete>)\n\nThis command will delete a specified number of array elements totally from\nan array, shifting all the elements beyond this towards the beginning.\n\n\t\/\/ This will delete array element 0, and move all the other array\n\t\/\/ elements up one place.\n\tdeletearray(.@array[0], 1);\n\n\t\/\/ This would delete array elements numbered 1, 2 and 3, leave element 0\n\t\/\/ in its place, and move the other elements ups, so there are no gaps.\n\tdeletearray(.@array[1], 3);\n\nIf the amount of items to delete is not specified, all elements of the\narray starting from the specified one to the end, are deleted. If no\nstarting element is specified either, the the entire array will be\ndeleted.\n\n\t\/\/ This would delete all elements of the array starting from 2, leaving\n\t\/\/ element 0 and 1\n\tdeletearray(.@array[2]);\n\n\t\/\/ This would delete all elements of the array\n\tdeletearray(.@array);"
    },
    {
        "command": "strcharinfo(<type>{, <default value>{, <GID>}})",
        "line": 2425,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*strcharinfo(<type>{, <default value>{, <GID>}})\n\nThis function will return either the name, party name or guild name for\nthe invoking character. Whatever it returns is determined by type.\n(0) PC_NAME\t\t- Character's name.\n(1) PC_PARTY\t- The name of the party they're in if any.\n(2) PC_GUILD\t- The name of the guild they're in if any.\n(3) PC_MAP\t\t- The name of the map the character is in.\n(4) PC_CLAN   - The name of the clan they're in if any.\n\nIf <GID> is passed, it will return the value of the specified player instead\nthe attached player. If the player is not found, it will return\n<default value>, if any, or else return an empty string.\n\nIf a character is not a member of any party or guild, an empty string will\nbe returned when requesting that information.\n\nNote: Numbers can also be used in <type>, but their usage is disncouraged as\nusing only numbers reduces script readability"
    },
    {
        "command": "strnpcinfo(<type>{, <default value>{, <GID>}})",
        "line": 2447,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*strnpcinfo(<type>{, <default value>{, <GID>}})\n\nThis function will return the various parts of the name of the calling NPC.\nWhatever it returns is determined by type.\n\n(0) NPC_NAME\t    - The NPC's display name (visible#hidden)\n(1) NPC_NAME_VISIBLE - The visible part of the NPC's display name\n(2) NPC_NAME_HIDDEN  - The hidden part of the NPC's display name\n(3) NPC_NAME_UNIQUE  - The NPC's unique name (::name)\n(4) NPC_MAP\t\t    - The name of the map the NPC is in.\n\nIf <GID> is passed, it will return the value of the specified NPC instead of\nthe attached NPC. If the NPC is not found, it will return <default value>,\nif any, or else return an empty string."
    },
    {
        "command": "charid2rid(<char id>)",
        "line": 2464,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*charid2rid(<char id>)\n\nThis function returns the RID of the character with the given character ID.\n\nIf the character is offline or doesn't exist, 0 is returned."
    },
    {
        "command": "getarraysize(<array name>)",
        "line": 2472,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*getarraysize(<array name>)\n\nThis function returns highest index of the array that is filled.\nNotice that zeros and empty strings at the end of this array are not\ncounted towards this number.\n\nFor example:\n\n\tsetarray(.@array, 100, 200, 300, 400, 500, 600);\n\t.@arraysize = getarraysize(.@array);\n\nThis will make .@arraysize == 6. But if you try this:\n\n\tsetarray(.@array, 100, 200, 300, 400, 500, 600, 0);\n\t.@arraysize = getarraysize(.@array);\n\n.@arraysize will still equal 6, even though you've set 7 values.\n\nIf you do this:\n\n\t.@array[1000] = 1;\n\t.@arraysize = getarraysize(.@array);\n\n.@arraysize will be 1000, even though only one element has been set."
    },
    {
        "command": "getarrayindex(<array name>)",
        "line": 2499,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*getarrayindex(<array name>)\n\nThis command returns the index of the passed array. This is useful when\nused in combination with getarg()\n\nExample:\n\n\tgetarrayindex(.@foo[42]) \/\/ 42"
    },
    {
        "command": "getelementofarray(<array name>, <index>)",
        "line": 2510,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*getelementofarray(<array name>, <index>)\n\nThis command retrieves the value of the element of given array at given\nindex. This is equivalent to using:\n\n\t<array name>[<index>]\n\nAlso useful when passing arrays to functions or accessing another npc's\narrays:\n\tgetelementofarray(getarg(0), <index>)\n\tgetelementofarray(getvariableofnpc(.var, \"testNPC\"), <index>)"
    },
    {
        "command": "readparam(<parameter number>{, \"<player name>\"})",
        "line": 2524,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*readparam(<parameter number>{, \"<player name>\"})\n*readparam(<parameter number>{, <account id>})\n\nThis function will return the basic stats of an invoking character,\nreferred to by the parameter number. Instead of a number, you can use a\nparameter name if it is defined in 'doc\/constants.md'.\n\nExample parameters:\n\nStatusPoint, BaseLevel, SkillPoint, Class, Upper, Zeny, Sex, Weight,\nMaxWeight, JobLevel, BaseExp, JobExp, NextBaseExp, NextJobExp, Hp, MaxHp,\nSp, MaxSp, BaseJob, Karma, Manner, bVit, bDex, bAgi, bStr, bInt, bLuk\n\nAll of these also behave as variables, but don't expect to be able to just\n'set' them - some will not work for various internal reasons.\n\nExample 1:\n\n\t\/\/ Returns how many status points you haven't spent yet.\n\tmes(\"Unused status points: \"+readparam(9)); \/\/ [!]\n\nUsing this particular information as a function call is not required.\nTyping this will return the same result:\n\n\tmes(\"Unused status points: \"+StatusPoint);\n\nExample 2:\n\nYou can also use this command to get stat values.\n\n\tif (readparam(bVit) > 77)\n\t\tmes(\"Only people with over 77 Vit are reading this!\");\n\nExample 3:\n\n\t\/\/ Display your current weight\n\tmes(\"Your current weight is \"+ (Weight\/10) + \"\/\" + (MaxWeight\/10));"
    },
    {
        "command": "setparam(<parameter number>, <value>{, \"<player name>\"})",
        "line": 2564,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*setparam(<parameter number>, <value>{, \"<player name>\"})\n*setparam(<parameter number>, <value>{, <account id>})\n\nSets a parameter on the given player. See readparam() for more info about\nparameters. Keep in mind that not all read-able parameters are also set-able.\n\nParameters that can be modified include:\n\nStatusPoint, BaseLevel, SkillPoint, Zeny, Sex, Weight, MaxWeight, JobLevel,\nBaseExp, JobExp, Hp, MaxHp, Sp, MaxSp, Karma, Manner, Fame, bVit, bDex, bAgi,\nbStr, bInt, bLuk"
    },
    {
        "command": "getcharid(<type>{, \"<character name>\"})",
        "line": 2579,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*getcharid(<type>{, \"<character name>\"})\n\nThis function will return a unique ID number of the invoking character,\nor, if a character name is specified, of that player.\n\nType is the kind of associated ID number required:\n\n(0) CHAR_ID_CHAR - Character ID number.\n(1) CHAR_ID_PARTY - Party ID number.\n(2) CHAR_ID_GUILD - Guild ID number.\n(3) CHAR_ID_ACCOUNT - Account ID number.\n(4) CHAR_ID_BG - Battle ground ID\n(5) CHAR_ID_CLAN - Clan ID number.\n\nFor most purposes other than printing it, a number is better to have than\na name (people do horrifying things to their character names).\n\nIf the character is not in a party or not in a guild, the function will\nreturn 0 if guild or party number is requested. If a name is specified and\nthe character is not found, 0 is returned.\n\nIf getcharid(CHAR_ID_CHAR) returns a zero, the script got called not by a character\nand doesn't have an attached RID. Note that this will cause the map server\nto print \"player not attached!\" error messages, so it is preferred to use\nplayerattached() to check for the character attached to the script.\n\n\tif (getcharid(CHAR_ID_GUILD) == 0)\n\t\tmes(\"Only members of a guild are allowed here!\");"
    },
    {
        "command": "getnpcid({\"<npc name>\"})",
        "line": 2610,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*getnpcid({\"<npc name>\"})\n\nRetrieves IDs of the currently invoked NPC. If a unique npc name is given,\nIDs of that NPC are retrieved instead.\n\nIf the NPC does not exist, 0 is returned."
    },
    {
        "command": "getchildid()",
        "line": 2619,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*getchildid()\n*getmotherid()\n*getfatherid()\n\nThese functions return the character ID of the attached player's child,\nmother, mother, or father, respectively. It returns 0 if no ID is found.\n\n\tif (getmotherid() != 0)\n\t\tmes(\"Your mother's ID is: \"+getmotherid());"
    },
    {
        "command": "ispartneron()",
        "line": 2631,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*ispartneron()\n\nThis function returns true if the invoking character's marriage partner\nis currently online and false if they are not or if the character has no\npartner."
    },
    {
        "command": "getpartnerid()",
        "line": 2639,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*getpartnerid()\n\nThis function returns the character ID of the invoking character's\nmarriage partner, if any. If the invoking character is not married, it\nwill return 0, which is a quick way to see if they are married:\n\n\tif (getpartnerid() == 0)\n\t\tmes(\"I'm not going to be your girlfriend!\");\n\telse\n\t\tmes(\"You're married already!\");"
    },
    {
        "command": "getpartyname(<party id>)",
        "line": 2652,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*getpartyname(<party id>)\n\nThis function will return the name of a party that has the specified ID\nnumber. If there is no such party ID, \"null\" will be returned.\n\nLets say the ID of a party was saved as a global variable:\n\n\t\/\/ This would return the name of the party from the ID stored in a\n\t\/\/ variable\n\tmes(\"You're in the '\"+getpartyname($@var)+\"' party, I know!\");"
    },
    {
        "command": "getpartymember(<party id>{, <type>})",
        "line": 2665,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*getpartymember(<party id>{, <type>})\n\nThis command will find all members of a specified party and returns their\nnames (or character id or account id depending on the value of \"type\")\ninto an array of temporary global variables. There's actually quite a few\ncommands like this which will fill a special variable with data upon\nexecution and not do anything else.\n\nUpon executing this,\n\n$@partymembername$[] is a global temporary string array which contains all\n                     the names of these party members.\n                     (only set when type is 0 or not specified)\n\n$@partymembercid[]   is a global temporary number array which contains the\n                     character id of these party members.\n                     (only set when type is 1)\n\n$@partymemberaid[]   is a global temporary number array which contains the\n                     account id of these party members.\n                     (only set when type is 2)\n\n$@partymembercount   is the number of party members that were found.\n\nThe party members will (apparently) be found regardless of whether they\nare online or offline. Note that the names come in no particular order.\n\nBe sure to use $@partymembercount to go through this array, and not\n'getarraysize', because it is not cleared between runs of 'getpartymember'.\nIf someone with 7 party members invokes this script, the array would have\n7 elements. But if another person calls up the NPC, and he has a party of\n5, the server will not clear the array for you, overwriting the values\ninstead. So in addition to returning the 5 member names, the 6th and 7th\nelements from the last call remain, and you will get 5+2 members, of which\nthe last 2 don't belong to the new guy's party. $@partymembercount will\nalways contain the correct number, (5) unlike 'getarraysize()' which will\nreturn 7 in this case.\n\nExample 1: list party member names\n\n\t\/\/ get the party member names\n\tgetpartymember(getcharid(CHAR_ID_PARTY), 0);\n\n\t\/\/ It's a good idea to copy the global temporary $@partymember*****\n\t\/\/ variables to your own scope variables because if you have pauses in\n\t\/\/ this script (sleep, sleep2, next, close2, input, menu, select, or\n\t\/\/ prompt), another player could click this NPC, trigger\n\t\/\/ 'getpartymember', and overwrite the $@partymember***** variables.\n\t.@count = $@partymembercount;\n\tcopyarray(.@name$[0], $@partymembername$[0], $@partymembercount);\n\n\t\/\/ list the party member names\n\tfor (.@i = 0; .@i < .@count; ++.@i) {\n\t\tmes((.@i +1) + \". ^0000FF\" + .@name$[.@i] + \"^000000\");\n\t}\n\tclose();\n\n\nExample 2: check party count (with a next() pause), before warping to event\n\n\t.register_num = 5; \/\/ How many party members are required?\n\n\t\/\/ get the charID and accountID of character's party members\n\tgetpartymember(getcharid(CHAR_ID_PARTY), 1);\n\tgetpartymember(getcharid(CHAR_ID_PARTY), 2);\n\n\tif ($@partymembercount != .register_num) {\n\t\tmes(\"Please form a party of \"+ .register_num +\" to continue\");\n\t\tclose();\n\t}\n\n\t\/\/ loop through both and use 'isloggedin' to count online party members\n\tfor (.@i = 0; .@i < $@partymembercount; ++.@i)\n\t\tif (isloggedin($@partymemberaid[.@i], $@partymembercid[.@i]))\n\t\t\t.@count_online++;\n\t\/\/ We search accountID & charID because a single party can have\n\t\/\/ multiple characters from the same account. Without searching\n\t\/\/ through the charID, if a player has 2 characters from the same\n\t\/\/ account inside the party but only 1 char online, it would count\n\t\/\/ their online char twice.\n\n\tif (.@count_online != .register_num) {\n\t\tmes(\"All your party members must be online to continue\");\n\t\tclose();\n\t}\n\n\t\/\/ copy the array to prevent players cheating the system\n\tcopyarray(.@partymembercid, $@partymembercid, .register_num);\n\n\tmes(\"Are you ready?\");\n\tnext(); \/\/ careful here\n\tselect(\"Yes\");\n\n\t\/\/ When a script hits a next, menu, sleep or input that pauses the\n\t\/\/ script, players can invite or \/leave and make changes in their\n\t\/\/ party. To prevent this, we call getpartymember again and compare\n\t\/\/ with the original values.\n\n\tgetpartymember(getcharid(CHAR_ID_PARTY), 1);\n\tif ($@partymembercount != .register_num) {\n\t\tmes(\"You've made changes to your party !\");\n\t\tclose();\n\t}\n\tfor (.@i = 0; .@i < $@partymembercount; ++.@i) {\n\t\tif (.@partymembercid[.@i] != $@partymembercid[.@i]) {\n\t\t\tmes(\"You've made changes to your party !\");\n\t\t\tclose();\n\t\t}\n\t}\n\n\t\/\/ Finally, it's safe to start the event!\n\twarpparty(\"event_map\", 0, 0, getcharid(CHAR_ID_PARTY), true);"
    },
    {
        "command": "getpartyleader(<party id>{, <type>})",
        "line": 2780,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*getpartyleader(<party id>{, <type>})\n\nThis function returns some information about the given party-id's leader.\nWhen type is omitted, the default information retrieved is the leader's\nname. Possible types are:\n\n\t1: Leader account id\n\t2: Leader character id\n\t3: Leader's class\n\t4: Leader's current map name\n\t5: Leader's current level as stored on the party structure (may not be\n\t   current level if leader leveled up recently).\n\nIf retrieval fails (leader not found or party does not exist), this\nfunction returns \"null\" instead of the character name, and -1 for the\nother types."
    },
    {
        "command": "getlook(<type>)",
        "line": 2799,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*getlook(<type>)\n\nThis function will return the number for the current character look value\nspecified by type. See 'setlook' for valid look types.\n\nThis can be used to make a certain script behave differently for\ncharacters dressed in black. :)"
    },
    {
        "command": "getsavepoint(<information type>)",
        "line": 2809,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*getsavepoint(<information type>)\n\nThis function will return information about the invoking character's save\npoint. You can use it to let a character swap between several recorded\nsave points. Available information types are:\n\n 0 - Map name (a string)\n 1 - X coordinate\n 2 - Y coordinate"
    },
    {
        "command": "getcharip({\"<character name>\"})",
        "line": 2821,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*getcharip({\"<character name>\"})\n*getcharip({<account id>})\n*getcharip({<character id>})\n\nThis function will return the IP address of the invoking character, or, if\na player is specified, of that character. A blank string is returned if no\nplayer is attached.\n\nExamples:\n\n\/\/ Outputs IP address of attached player.\n\tmes(\"Your IP: \" + getcharip());\n\n\/\/ Outputs IP address of character \"Silver\".\n\tmes(\"Silver's IP: \" + getcharip(\"Silver\"));"
    },
    {
        "command": "sit({\"<character name>\"})",
        "line": 2839,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*sit({\"<character name>\"})\n*stand({\"<character name>\"})\n\nThis function will force a character to sit\/stand if it is standing\/sitting.\nIf no player is specified, the attached player will be used."
    },
    {
        "command": "issit({\"<character name>\"})",
        "line": 2847,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*issit({\"<character name>\"})\n\nThis function will return a number depending on the character's sitting state.\nIf the character is sitting, it will return true, otherwise (standing) it will return false.\nIn case no player is specified, the function will return the state of the attached player."
    },
    {
        "command": "getequipid(<equipment slot>)",
        "line": 2859,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.1 - Item-Related Commands",
        "description": "*getequipid(<equipment slot>)\n\nThis function returns the item ID of the item equipped in the equipment\nslot specified on the invoking character. If nothing is equipped there, it\nreturns -1. Valid equipment slots are:\n\nEQI_HEAD_TOP (1)          - Upper head gear\nEQI_ARMOR (2)             - Armor (Where you keep your Jackets and Robes)\nEQI_HAND_L (3)            - What is in your Left hand.\nEQI_HAND_R (4)            - What is in your Right hand.\nEQI_GARMENT (5)           - The garment slot (Mufflers, Hoods, Manteaus)\nEQI_SHOES (6)             - What foot gear the player has on.\nEQI_ACC_L (7)             - Accessory 1.\nEQI_ACC_R (8)             - Accessory 2.\nEQI_HEAD_MID (9)          - Middle Headgear (masks and glasses)\nEQI_HEAD_LOW (10)         - Lower Headgear (beards, some masks)\nEQI_COSTUME_HEAD_LOW (11) - Lower Costume Headgear\nEQI_COSTUME_HEAD_MID (12) - Middle Costume Headgear\nEQI_COSTUME_HEAD_TOP (13) - Upper Costume Headgear\nEQI_COSTUME_GARMENT (14)  - Costume Garment\nEQI_SHADOW_ARMOR (15)     - Shadow Armor\nEQI_SHADOW_WEAPON (16)    - Shadow Weapon\nEQI_SHADOW_SHIELD (17)    - Shadow Shield\nEQI_SHADOW_SHOES (18)     - Shadow Shoes\nEQI_SHADOW_ACC_R (19)     - Shadow Accessory 2\nEQI_SHADOW_ACC_L (20)     - Shadow Accessory 1\n\nNotice that a few items occupy several equipment slots, and if the\ncharacter is wearing such an item, 'getequipid' will return it's ID number\nfor either slot.\n\nCan be used to check if you have something equipped, or if you haven't got\nsomething equipped:\n\n\tif (getequipid(EQI_HEAD_TOP) == Tiara) {\n\t\tmes(\"What a lovely Tiara you have on\");\n\t\tclose();\n\t}\n\tmes(\"Come back when you have a Tiara on\");\n\tclose();\n\nYou can also use it to make sure people don't pass a point before removing\nan item totally from them. Let's say you don't want people to wear Legion\nPlate armor, but also don't want them to equip if after the check, you\nwould do this:\n\n\tif (getequipid(EQI_ARMOR) == Full_Plate_Armor || getequipid(EQI_ARMOR) == Full_Plate_Armor_) {\n\t\tmes(\"You are wearing some Legion Plate Armor, please drop that in your stash before continuing\");\n\t\tclose();\n\t}\n\tif (countitem(Full_Plate_Armor) > 0 || countitem(Full_Plate_Armor_) > 0) {\n\t\tmes(\"You have some Legion Plate Armor in your inventory, please drop that in your stash before continuing\");\n\t\tclose();\n\t}\n\tmes(\"I will lets you pass\");\n\tclose2();\n\twarp(\"place\", 50, 50);\n\tend;"
    },
    {
        "command": "getequipname(<equipment slot>)",
        "line": 2920,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.1 - Item-Related Commands",
        "description": "*getequipname(<equipment slot>)\n\nReturns the jname of the item equipped in the specified equipment slot on\nthe invoking character, or an empty string if nothing is equipped in that\nposition.\nDoes the same thing as getitemname(getequipid()). Useful for an NPC to\nstate what your are wearing, or maybe saving as a string variable.\nSee getequipid() for a full list of valid equipment slots.\n\n\tif (getequipid(EQI_HEAD_TOP) != 0)\n\t\tmes(\"So you are wearing a \"+getequipname(EQI_HEAD_TOP)+\" on your head\");\n\telse\n\t\tmes(\"You are not wearing a head gear\");"
    },
    {
        "command": "getitemname(<item id>)",
        "line": 2936,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.1 - Item-Related Commands",
        "description": "*getitemname(<item id>)\n\nGiven the database ID number of an item, this function will return the\ntext stored in the 'japanese name' field (which, in Hercules, stores an\nEnglish name the players would normally see on screen).\nReturn \"null\" if no such item exist."
    },
    {
        "command": "getbrokenid(<number>)",
        "line": 2945,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.1 - Item-Related Commands",
        "description": "*getbrokenid(<number>)\n\nThis function will search the invoking character's inventory for any\nbroken items, and will return their item ID numbers. Since the character\nmay have several broken items, 1 given as an argument will return the\nfirst one found, 2 will return the second one, etc. Will return 0 if no\nsuch item is found.\n\n\t\/\/ Let's see if they have anything broken:\n\tif (getbrokenid(1) == 0)\n\t\tmes(\"You don't have anything broken, quit bothering me.\");\n\telse \/\/ They do, so let's print the name of the first broken item:\n\t\tmes(\"Oh, I see you have a broken \"+getitemname(getbrokenid(1))+\" here!\");"
    },
    {
        "command": "getbrokencount()",
        "line": 2961,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.1 - Item-Related Commands",
        "description": "*getbrokencount()\n\nThis function will return the total amount of broken equipment on the\ninvoking character."
    },
    {
        "command": "getequipisequiped(<equipment slot>)",
        "line": 2968,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.1 - Item-Related Commands",
        "description": "*getequipisequiped(<equipment slot>)\n\nThis functions will return 1 if there is an equipment placed on the\nspecified equipment slot and 0 otherwise. For a list of equipment slots\nsee 'getequipid'. Function originally used by the refining NPCs:\n\n\tif (getequipisequiped(EQI_HEAD_TOP)) {\n\t\tmes(\"[Refiner]\");\n\t\tmes(\"That's a fine hat you are wearing there...\");\n\t\tclose();\n\t}\n\tmes(\"[Refiner]\");\n\tmes(\"Do you want me to refine your dumb head?\");\n\tclose();"
    },
    {
        "command": "getequipisenableref(<equipment slot>)",
        "line": 2985,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.1 - Item-Related Commands",
        "description": "*getequipisenableref(<equipment slot>)\n\nWill return true if the item equipped on the invoking character in the\nspecified equipment slot is refinable, and false if it isn't. For a list\nof equipment slots see getequipid().\n\n\tif (getequipisenableref(EQI_HEAD_TOP)) {\n\t\tmes(\"[Refiner]\");\n\t\tmes(\"Ok I can refine this\");\n\t\tclose();\n\t}\n\tmes(\"[Refiner]\");\n\tmes(\"I can't refine this hat!...\");\n\tclose();"
    },
    {
        "command": "getequiprefinerycnt(<equipment slot>)",
        "line": 3002,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.1 - Item-Related Commands",
        "description": "*getequiprefinerycnt(<equipment slot>)\n\nReturns the current number of pluses for the item in the specified\nequipment slot. For a list of equipment slots see 'getequipid'.\n\nCan be used to check if you have reached a maximum refine value, default\nfor this is +10:\n\n\tif (getequiprefinerycnt(EQI_HEAD_TOP) < 10)\n\t\tmes(\"I will now upgrade your \"+getequipname(EQI_HEAD_TOP));\n\telse\n\t\tmes(\"Sorry, it's not possible to refine hats better than +10\");"
    },
    {
        "command": "getequipweaponlv(<equipment slot>)",
        "line": 3017,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.1 - Item-Related Commands",
        "description": "*getequipweaponlv(<equipment slot>)\n\nThis function returns the weapon level for the weapon equipped in the\nspecified equipment slot on the invoking character. For a list of\nequipment slots see 'getequipid'.\n\nOnly EQI_HAND_L and EQI_HAND_R normally make sense, since only weapons\nhave a weapon level. You can, however, probably, use this field for other\nequippable custom items as a flag or something.\n\nIf no item is equipped in this slot, or if it doesn't have a weapon level\naccording to the database, 0 will be returned.\n\nExamples:\n\n\/\/ Right hand can only contain a weapon.\n\tswitch (getequipweaponlv(EQI_HAND_R)) {\n\tcase 1:\n\t\tmes(\"You are holding a lvl 1 weapon.\");\n\t\tbreak;\n\tcase 2:\n\t\tmes(\"You are holding a lvl 2 weapon.\");\n\t\tbreak;\n\tcase 3:\n\t\tmes(\"You are holding a lvl 3 weapon.\");\n\t\tbreak;\n\tcase 4:\n\t\tmes(\"You are holding a lvl 4 weapon.\");\n\t\tbreak;\n\tcase 5:\n\t\tmes(\"You are holding a lvl 5 weapon, hm, must be a custom design...\");\n\t\tbreak;\n\tdefault:\n\t\tmes(\"Seems you don't have a weapon on.\");\n\t\tbreak;\n\t}\n\n\/\/ Left hand can hold either a weapon or shield.\n\tif (getequipid(EQI_HAND_R) == 0) {\n\t\tmes(\"Seems you have nothing equipped here.\");\n\t\tclose();\n\t}\n\tswitch (getequipweaponlv(EQI_HAND_L)) {\n\tcase 0:\n\t\tmes(\"You are holding a shield, so it doesn't have a level.\");\n\t\tbreak;\n\tcase 1:\n\t\tmes(\"You are holding a lvl 1 weapon.\");\n\t\tbreak;\n\tcase 2:\n\t\tmes(\"You are holding a lvl 2 weapon.\");\n\t\tbreak;\n\tcase 3:\n\t\tmes(\"You are holding a lvl 3 weapon.\");\n\t\tbreak;\n\tcase 4:\n\t\tmes(\"You are holding a lvl 4 weapon.\");\n\t\tbreak;\n\tcase 5:\n\t\tmes(\"You are holding a lvl 5 weapon, hm, must be a custom design...\");\n\t\tbreak;\n\t}"
    },
    {
        "command": "getequippercentrefinery(<equipment slot>{, <type>})",
        "line": 3082,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.1 - Item-Related Commands",
        "description": "*getequippercentrefinery(<equipment slot>{, <type>})\n\nThis function calculates and returns the percent value chance to\nsuccessfully refine the item found in the specified equipment slot of the\ninvoking character by +1. Refine rates are defined in the db\/<re\/pre-re>\/refine_db.conf\nfiles. For a list of equipment slots see getequipid().\n\nThese values can be displayed for the player to see, or used to calculate\nthe random change of a refine succeeding or failing and then going through\nwith it (which is what the official NPC refinery scripts use it for).\n\nRefine Chance Type Constants -\nREFINE_CHANCE_TYPE_NORMAL: 0        (Normal Ores)\nREFINE_CHANCE_TYPE_ENRICHED: 1      (Enriched Ores)\nREFINE_CHANCE_TYPE_E_NORMAL: 2      (Event Normal Ores)\nREFINE_CHANCE_TYPE_E_ENRICHED: 3    (Event Enriched Ores)\n\nRefine rate information -\nNormal Ores: http:\/\/ro.gnjoy.com\/news\/probability\/View.asp?category=4&seq=1941553&curpage=1\nEnriched Ores:  http:\/\/ro.gnjoy.com\/news\/probability\/View.asp?category=4&seq=1941565&curpage=1\nEvent Normal Ores: http:\/\/ro.gnjoy.com\/news\/probability\/View.asp?category=4&seq=1941558&curpage=1\nEvent Enriched Ores: http:\/\/ro.gnjoy.com\/news\/probability\/View.asp?category=4&seq=1941567&curpage=1\n\n\/\/ This will find a random number from 0 - 99 and if that is equal to or\n\/\/ more than the value recovered by this command it will show a message\n\tif (getequippercentrefinery(EQI_HAND_L, REFINE_CHANCE_TYPE_NORMAL) <= rand(100))\n\t\tmes(\"Aww\");"
    },
    {
        "command": "getareadropitem(\"<map name>\", <x1>, <y1>, <x2>, <y2>, <item>)",
        "line": 3112,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.1 - Item-Related Commands",
        "description": "*getareadropitem(\"<map name>\", <x1>, <y1>, <x2>, <y2>, <item>)\n\nThis function will count all the items with the specified ID number lying\non the ground on the specified map within the x1\/y1-x2\/y2 square on it and\nreturn that number.\n\nThis is the only function around where a parameter may be either a string\nor a number! If it's a number, it means that only the items with that item\nID number will be counted. If it is a string, it is assumed to mean the\n'english name' field from the item database. If you give it an empty\nstring, or something that isn't found from the item database, it will\ncount items number 512 (Apple)."
    },
    {
        "command": "getequipcardcnt(<equipment slot>)",
        "line": 3127,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.1 - Item-Related Commands",
        "description": "*getequipcardcnt(<equipment slot>)\n\nThis function will return the number of cards that have been compounded\nonto a specific equipped item for the invoking character. See 'getequipid'\nfor a list of possible equipment slots."
    },
    {
        "command": "getinventorylist()",
        "line": 3135,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.1 - Item-Related Commands",
        "description": "*getinventorylist()\n\nThis command sets a bunch of arrays with a complete list of whatever the\ninvoking character has in its inventory, including all the data needed to\nrecreate these items perfectly if they are destroyed. Here's what you get:\n\n@inventorylist_id[]        - array of item ids.\n@inventorylist_idx[]       - array of item inventory index.\n@inventorylist_amount[]    - their corresponding item amounts.\n@inventorylist_equip[]     - will return the slot the item is equipped on, if at all.\n@inventorylist_refine[]    - for how much it is refined.\n@inventorylist_identify[]  - whether it is identified.\n@inventorylist_attribute[] - whether it is broken.\n@inventorylist_card1[]     - These four arrays contain card data for the\n@inventorylist_card2[]       items. These data slots are also used to store\n@inventorylist_card3[]       names inscribed on the items, so you can\n@inventorylist_card4[]       explicitly check if the character owns an item\n                             made by a specific craftsman.\n@inventorylist_expire[]    - expire time (Unix time stamp). 0 means never\n                             expires.\n@inventorylist_bound[]     - whether it is an account bounded item or not.\n@inventorylist_favorite[]  - whether it is favorite (inside favorite tab) or not. \n@inventorylist_count       - the number of items in these lists.\n\nThis could be handy to save\/restore a character's inventory, since no\nother command returns such a complete set of data, and could also be the\nonly way to correctly handle an NPC trader for carded and named items who\ncould resell them - since NPC objects cannot own items, so they have to\nstore item data in variables and recreate the items.\n\nNotice that the variables this command generates are all temporary,\nattached to the character, and integer.\n\nBe sure to use @inventorylist_count to go through these arrays, and not\ngetarraysize(), because the arrays are not automatically cleared between\nruns of getinventorylist()."
    },
    {
        "command": "getcartinventorylist()",
        "line": 3174,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.1 - Item-Related Commands",
        "description": "*getcartinventorylist()\n\nThis command sets a bunch of arrays with a complete list of whatever the\ninvoking character has in its cart_inventory, including all the data needed to\nrecreate these items perfectly if they are destroyed. Here's what you get:\n\n@cartinventorylist_id[]        - array of item ids.\n@cartinventorylist_amount[]    - their corresponding item amounts.\n@cartinventorylist_refine[]    - for how much it is refined.\n@cartinventorylist_identify[]  - whether it is identified.\n@cartinventorylist_attribute[] - whether it is broken.\n@cartinventorylist_card1[]     - These four arrays contain card data for the\n@cartinventorylist_card2[]       items. These data slots are also used to store\n@cartinventorylist_card3[]       names inscribed on the items, so you can\n@cartinventorylist_card4[]       explicitly check if the character owns an item\n                                 made by a specific craftsman.\n@cartinventorylist_expire[]    - expire time (Unix time stamp). 0 means never\n                                 expires.\n@cartinventorylist_bound       - whether it is an account bound item or not.\n@cartinventorylist_count       - the number of items in these lists.\n\nThis could be handy to save\/restore a character's cart_inventory, since no\nother command returns such a complete set of data, and could also be the\nonly way to correctly handle an NPC trader for carded and named items who\ncould resell them - since NPC objects cannot own items, so they have to\nstore item data in variables and recreate the items.\n\nNotice that the variables this command generates are all temporary,\nattached to the character, and integer.\n\nBe sure to use @cartinventorylist_count to go through these arrays, and not\ngetarraysize(), because the arrays are not automatically cleared between\nruns of getcartinventorylist()."
    },
    {
        "command": "cardscnt()",
        "line": 3210,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.1 - Item-Related Commands",
        "description": "*cardscnt()\n\nThis function will return the number of cards inserted into the weapon\ncurrently equipped on the invoking character.\nWhile this function was meant for item scripts, it will work outside them:\n\n\tif (cardscnt() == 4)\n\t\tmes(\"So you've stuck four cards into that weapon, think you're cool now?\");"
    },
    {
        "command": "getrefine()",
        "line": 3221,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.1 - Item-Related Commands",
        "description": "*getrefine()\n\nThis function will return the refine count of the equipment from which\nthe function is called. This function is intended for use in item scripts.\n\n\tif (getrefine() == 10)\n\t\tmes(\"Wow. That's a murder weapon.\");"
    },
    {
        "command": "getitemslots(<item ID>)",
        "line": 3231,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.1 - Item-Related Commands",
        "description": "*getitemslots(<item ID>)\n\nThis function will look up the item with the specified ID number in the\ndatabase and return the number of slots this kind of items has - 0 if they\nare not slotted. It will also be 0 for all non-equippable items,\nnaturally, unless someone messed up the item database. It will return -1\nif there is no such item.\n\nExample:\n\n\/\/.@slots now has the amount of slots of the item with ID 1205.\n\t.@slots = getitemslots(1205);"
    },
    {
        "command": "getiteminfo(<item ID>, <type>)",
        "line": 3246,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.1 - Item-Related Commands",
        "description": "*getiteminfo(<item ID>, <type>)\n*setiteminfo(<item ID>, <type>, <value>)\n\nThis function will look up the item with the specified ID number in the\ndatabase and return the info set by TYPE argument.\nIt will return -1 if there is no such item.\n\nValid types are:\n\n\tITEMINFO_BUYPRICE   - Buy Price\n\tITEMINFO_SELLPRICE  - Sell Price\n\tITEMINFO_TYPE       - Item Type\n\tITEMINFO_MAXCHANCE  - Max drop chance of this item e.g. 1 = 0.01% , etc..\n\t\tif = 0, then monsters don't drop it at all (rare or a quest item)\n\t\tif = 10000, then this item is sold in NPC shops only\n\tITEMINFO_SEX        - Sex\n\tITEMINFO_LOC        - Equip location\n\tITEMINFO_WEIGHT     - Weight (note: 1\/10 of unit)\n\tITEMINFO_ATK        - Attack\n\tITEMINFO_DEF        - Defense\n\tITEMINFO_RANGE      - Range\n\tITEMINFO_SLOTS      - Slots\n\tITEMINFO_SUBTYPE    - Item subtype\n\tITEMINFO_ELV        - Equip min. level\n\tITEMINFO_WLV        - Weapon level\n\tITEMINFO_VIEWID     - View ID (\"Sprite\" field in the Item DB)\n\tITEMINFO_MATK       - MATK (only relevant if RENEWAL is set)\n\tITEMINFO_VIEWSPRITE - View Sprite (\"ViewSprite\" field in the Item DB)\n\tITEMINFO_TRADE      - Trade Restriction (see \"doc\/constant.md\": item trade restriction)\n\nCheck sample in doc\/sample\/getiteminfo.txt\n\nThe setiteminfo function will, instead, set the item's parameters. It returns\nthe new value on success, or -1 on failure (item_id not found).\n\nExample:\n\n\tsetiteminfo(Stone, ITEMINFO_WEIGHT, 9990); \/\/ Stone now weighs 999.0"
    },
    {
        "command": "getequipisenableopt(<equipment slot>)",
        "line": 3287,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.1 - Item-Related Commands",
        "description": "*getequipisenableopt(<equipment slot>)\n\nThis function checks if the equipped item allows the use of bonus options.\n\nReturns 1 if allowed, 0 if not."
    },
    {
        "command": "getequippedoptioninfo(<info_type>);",
        "line": 3295,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.1 - Item-Related Commands",
        "description": "*getequippedoptioninfo(<info_type>);\n\nThis function is to be used with the scripts of contents listed in\ndb\/item_options.conf only.\n\nReturns the value of the current equipment being parsed.\nIf the equip was not found or the type is invalid, -1 is returned."
    },
    {
        "command": "getequipoption(<equip_index>,<slot>,<type>);",
        "line": 3305,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.1 - Item-Related Commands",
        "description": "*getequipoption(<equip_index>,<slot>,<type>);\n\nGets the option information of an equipment.\n\n<equipment_index> For a list of equipment indexes see getequipid().\n<option_slot> can range from 1 to MAX_ITEM_OPTIONS\n<type> can be IT_OPT_INDEX (the ID of the option bonus, @see \"Id\" or \"Name\" in db\/item_options.conf)\n       or IT_OPT_VALUE (the value of the bonus script of the equipment, @see \"Script\" in db_item_options.conf).\n\nreturns the value of the slot if exists or -1 for invalid slot, type or slots."
    },
    {
        "command": "setequipoption(<equip_index>,<slot>,<opt_index>,<value>);",
        "line": 3318,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.1 - Item-Related Commands",
        "description": "*setequipoption(<equip_index>,<slot>,<opt_index>,<value>);\n\nSet an equipment's option index or value for the specified option slot.\n\n<equipment_index> For a list of equipment indexes see getequipid().\n<option_slot> can range from 1 to MAX_ITEM_OPTIONS\n<type> can be IT_OPT_INDEX (the ID of the option bonus, @see \"Id\" or \"Name\" in db\/item_options.conf)\n       removes the equip option if type is 0.\n<value> The value of the type to be set.\n\nreturns 0 if value couldn't be set, 1 on success."
    },
    {
        "command": "getequipcardid(<equipment slot>, <card slot>)",
        "line": 3332,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.1 - Item-Related Commands",
        "description": "*getequipcardid(<equipment slot>, <card slot>)\n\nReturns value for equipped item slot in the indicated slot (0, 1, 2, or 3).\n\nThis function returns CARD ID, 255, 254, -255 (for card 0, if the item is\nproduced). It's useful for when you want to check whether an item contains\ncards or if it's signed."
    },
    {
        "command": "hateffect(<Hat Effect ID>, <State>)",
        "line": 3342,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.1 - Item-Related Commands",
        "description": "*hateffect(<Hat Effect ID>, <State>)\n\nThis will set a Hat Effect onto the player. The state field allows you to\nenable (true) or disable (false) the effect on the player."
    },
    {
        "command": "getmapxy(\"<variable for map name>\", <variable for x>, <variable for y>, <type>{, \"<search parameter>\"})",
        "line": 3353,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*getmapxy(\"<variable for map name>\", <variable for x>, <variable for y>, <type>{, \"<search parameter>\"})\n\nThis function will locate a character object, NPC object or pet's\ncoordinates and place their coordinates into the variables specified when\ncalling it. It will return 0 if the search was successful, and -1 if the\nparameters given were not variables or the search was not successful.\n\nType is the type of object to search for:\n\n\tUNITTYPE_PC   - Character object\n\tUNITTYPE_NPC  - NPC object\n\tUNITTYPE_PET  - Pet object\n\tUNITTYPE_MOB  - Monster object\n\tUNITTYPE_HOM  - Homunculus object\n\tUNITTYPE_MER  - Mercenary object\n\tUNITTYPE_ELEM - Elemental object\n\nTo look for a monster object, monster GID is required. The function will\nalways return -1 when search using string.\n\nThe search parameter is optional. If it is not specified, the location of the\ninvoking character will always be returned for UNITTYPE_PC, the location of the\nNPC running this function for UNITTYPE_NPC. If a search parameter is specified,\nfor UNITTYPE_PC and UNITTYPE_NPC, the character or NPC with the specified name\nor GID will be located.\n\nIf type is UNITTYPE_PET, UNITTYPE_HOM, UNITTYPE_MER or UNITTYPE_ELEM the search\nwill locate the owner's pet\/homun\/mercenary\/elementals if the search parameter\nis not provided. It will NOT locate these object by name, but can be done if GID\nis provided.\n\nWhat a mess. Example, a working and tested one now:\n\n\tprontera,164,301,3%TAB%script%TAB%Meh%TAB%730,{\n\t\tmes(\"My name is Meh. I'm here so that Nyah can find me.\");\n\t\tclose();\n\t}\n\n\tprontera,164,299,3%TAB%script%TAB%Nyah%TAB%730,{\n\t\tmes(\"My name is Nyah.\");\n\t\tmes(\"I will now search for Meh all across the world!\");\n\t\tif (getmapxy(.@mapname$, .@mapx, .@mapy, UNITTYPE_NPC, \"Meh\") != 0) {\n\t\t\tmes(\"I can't seem to find Meh anywhere!\");\n\t\t\tclose();\n\t\t}\n\t\tmes(\"And I found him on map \"+.@mapname$+\" at X:\"+.@mapx+\" Y:\"+.@mapy+\" !\");\n\t\tclose();\n\t}\n\nNotice that NPC objects disabled with disablenpc() will still be located."
    },
    {
        "command": "getmapinfo(<info>{, \"<map name>\"})",
        "line": 3406,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*getmapinfo(<info>{, \"<map name>\"})\n*getmapinfo(<info>{, <map id>})\n\nThis command returns various information about a specific map. If the second\nargument is omitted, it will try to use the map of the attached NPC, or the\nmap of the attached player if the NPC can't be found.\n\nValid <info> are:\n\tMAPINFO_NAME         name of the map\n\tMAPINFO_ID           numeric ID of the map\n\tMAPINFO_ZONE         name of the zone used by the map\n\tMAPINFO_SIZE_X       width of the map (cells on the x axis)\n\tMAPINFO_SIZE_Y       height of the map (cells on the y axis)\n\tMAPINFO_NPC_COUNT    total number of NPC in the map\n\nExamples:\n\tgetmapinfo(MAPINFO_ID, \"map name\"); \/\/ ID from name\n\tgetmapinfo(MAPINFO_NAME, 3); \/\/ name from ID\n\tgetmapinfo(MAPINFO_ZONE); \/\/ zone, ie Normal, PvP, Jail, ..."
    },
    {
        "command": "getunits(<type>, <variable>, <limit>{, \"<map>\"{, <x1>, <y1>, <x2>, <y2>}})",
        "line": 3428,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*getunits(<type>, <variable>, <limit>{, \"<map>\"{, <x1>, <y1>, <x2>, <y2>}})\n\nThis function searches a whole map or area for units and adds their GID to\nthe provided <variable> array. It filters units by <type> and stops searching\nafter <limit> units have been found. Set <limit> to false (0) if you wish to\ndisable the limit altogether. If <map> is omitted, this command will search\non the whole server (slow). Returns the number of units added to the array.\n\nType is the type of unit to search for:\n\n\tBL_PC    - Character object\n\tBL_MOB   - Monster object\n\tBL_PET   - Pet object\n\tBL_HOM   - Homunculus object\n\tBL_MER   - Mercenary object\n\tBL_ITEM  - Item object (item drops)\n\tBL_SKILL - Skill object (skill fx & sfx)\n\tBL_NPC   - NPC object\n\tBL_CHAT  - Chat object\n\tBL_ELEM  - Elemental object\n\tBL_CHAR  - Shorthand for (BL_PC|BL_MOB|BL_HOM|BL_MER|BL_ELEM)\n\tBL_ALL   - Any kind of object"
    },
    {
        "command": "* If battle_config.dynamic_mobs is enabled and no player has entered the map",
        "line": 3453,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "** If battle_config.dynamic_mobs is enabled and no player has entered the map\n   yet, the mobs will not have spawned in the map yet, so getunits() will be\n   unable to find them when searching for BL_MOB.\n\nExample:\n\n\t.@count = getunits((BL_PC | BL_NPC), .@units, false, \"prontera\");\n\nThe above example would search the map \"prontera\" for all PC and NPC units and\nadd them to the .@units array, while setting .@count to the amount of units\nadded to the array (useful in for() loops)."
    },
    {
        "command": "getgmlevel()",
        "line": 3467,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*getgmlevel()\n\nThis function will return the (GM) level of player group the account to\nwhich the invoking character belongs. If this is somehow executed from a\nconsole command, 99 will be returned, and 0 will be returned if the\naccount has no GM level.\n\nThis allows you to make NPC's only accessible for certain GM levels, or\nbehave specially when talked to by GMs.\n\n\tif (getgmlevel() > 0)\n\t\tmes(\"What is your command, your godhood?\");\n\tif (getgmlevel() < 99)\n\t\tend;"
    },
    {
        "command": "setgroupid(<new group id>{, \"<character name>\"})",
        "line": 3484,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*setgroupid(<new group id>{, \"<character name>\"})\n*setgroupid(<new group id>{, <account id>})\n\nThis function will temporary adjust the id of player group the account to which the\nplayer specified if the new group id is available.\nReturn true if successful, otherwise it will return false."
    },
    {
        "command": "getgroupid({<account id>})",
        "line": 3493,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*getgroupid({<account id>})\n\nThis command returns the id of the group of the attached or specified player.\nIf the player is not found, returns -1."
    },
    {
        "command": "gettimetick(<type>)",
        "line": 3500,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*gettimetick(<type>)\n\nValid types are :\n\t0 - server's tick (milleseconds), unsigned int, loops every ~50 days\n\t1 - time since the start of the current day in seconds\n\t2 - UNIX epoch time (number of seconds elapsed since 1st of January 1970)"
    },
    {
        "command": "gettime(<type>)",
        "line": 3509,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*gettime(<type>)\n\nThis function returns specified information about the current system time.\n\nValid types:\n\t1 - GETTIME_SECOND     - Seconds (of a minute)\n\t2 - GETTIME_MINUTE     - Minutes (of an hour)\n\t3 - GETTIME_HOUR       - Hour (of a day)\n\t4 - GETTIME_WEEKDAY    - Week day (0 for Sunday, 6 is Saturday)\n\t                       - Additional: SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY\n\t5 - GETTIME_DAYOFMONTH - Day of the month.\n\t6 - GETTIME_MONTH      - Number of the month.\n\t                       - Additional: JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER\n\t7 - GETTIME_YEAR       - Year\n\t8 - GETTIME_DAYOFYEAR  - Day of the year.\n\nIt will only return numbers based on types.\nExample :\n\tif (gettime(GETTIME_WEEKDAY) == SATURDAY) {\n\t\tmes(\"It's a Saturday. I don't work on Saturdays.\");\n\t} else if (gettime(GETTIME_MONTH) == JANUARY) {\n\t\tmes(\"It's January. I don't work on January.\");\n\t} else if (gettime(GETTIME_MONTH) == OCTOBER && gettime(GETTIME_DAYOFMONTH) == 31) {\n\t\tmes(\"It's Halloween.\");\n\t}"
    },
    {
        "command": "getcalendartime(<hour>, <minute>{, <day of month>{, <day of week>}})",
        "line": 3537,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*getcalendartime(<hour>, <minute>{, <day of month>{, <day of week>}})\n\nThis function returns the timestamp of the next ocurrence of given time.\n\nDay of Month specifies a day between 1 and 31 in the future, by default its value is -1 (don't use).\nDay of Week specifies a day in the week and its valid values are:\n\t0 - SUNDAY\n\t1 - MONDAY\n\t2 - TUESDAY\n\t3 - WEDNESDAY\n\t4 - THURSDAY\n\t5 - FRIDAY\n\t6 - SATURDAY\n\nIn order to use Day of Week, you must use Day of Month as -1.\nIf for some reason the command fails, it'll return -1.\n\nExamples :\n\tgetcalendartime(19, 00); \/\/ Next 7 pm\n\tgetcalendartime(19, 00, 6); \/\/ Next day 6 of the month, at 7pm\n\tgetcalendartime(19, 10, -1, 1); \/\/ Next Monday, at 7:10pm"
    },
    {
        "command": "gettimestr(<format string>, <max length>{, <timestamp>})",
        "line": 3561,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*gettimestr(<format string>, <max length>{, <timestamp>})\n\nThis function will return a string containing time data as specified by\nthe format string.\n\nThis uses the C function 'strftime', which obeys special format\ncharacters. For a full description see, for example, the description of\n'strftime' at http:\/\/www.delorie.com\/gnu\/docs\/glibc\/libc_437.html\nAll the format characters given in there should properly work.\nMax length is the maximum length of a time string to generate.\n\nThe example given in Hercules sample scripts works like this:\n\n\tmes(gettimestr(\"%Y-%m\/%d %H:%M:%S\", 21));\n\tmes(gettimestr(\"%Y-%m\/%d %H:%M:%S\", 21, getcalendartime(0, 0)));\n\nThis will print a full date and time like 'YYYY-MM\/DD HH:MM:SS'."
    },
    {
        "command": "getusers(<type>)",
        "line": 3581,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*getusers(<type>)\n\nThis function will return a number of users on a map or the whole server.\nWhat it returns is specified by Type.\n\nType can be one of the following values, which control what is returned:\n\n\t0 - Count of all characters on the map of the invoking character.\n\t1 - Count of all characters in the entire server.\n\t8 - Count of all characters on the map of the NPC the script is\n\t\trunning in."
    },
    {
        "command": "getmapusers(\"<map name>\")",
        "line": 3595,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*getmapusers(\"<map name>\")\n\nThis function will return the number of users currently located on the\nspecified map.\n\nCurrently being used in the PVP scripts to check if a PVP room is full of\nnot, if the number returned it equal to the maximum allowed it will not\nlet you enter.\n\nReturn -1 if the map name is invalid."
    },
    {
        "command": "getareausers({\"<map name>\", }{<x1>, <y1>, <x2>, <y2>})",
        "line": 3608,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*getareausers({\"<map name>\", }{<x1>, <y1>, <x2>, <y2>})\n*getareausers({\"<map name>\", }{<radius>})\n\nThis function will return the count of connected characters which are\nlocated within the specified area. Area can be x1\/y1-x2\/y2 square,\nor radius from npc position. If map name missing, used attached player map.\n\nThis is useful for maps that are split into many buildings, such as all\nthe \"*_in\" maps, due to all the shops and houses.\n\nExamples:\n\t\/\/ return players in area npc area on current map.\n\t.@num = getareausers();\n\t\/\/ return players in square (1, 1) - (10, 10)\n\t.@num = \"players: \" + getareausers(1, 1, 10, 10);"
    },
    {
        "command": "getusersname();",
        "line": 3626,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*getusersname();\n\nThis command will give the invoking character a list of names of the\nconnected characters (including themselves) into an NPC script message\nwindow (see 'mes') paging it by 10 names as if with the next() command.\n\nYou need to put a 'close' after that yourself."
    },
    {
        "command": "getguildname(<guild id>)",
        "line": 3640,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.2 - Guild-Related Commands",
        "description": "*getguildname(<guild id>)\n\nThis function returns a guild's name given an ID number. If there is no\nsuch guild, \"null\" will be returned;\n\n\t\/\/ Would print whatever guild 10007 name is.\n\tmes(\"The guild \"+getguildname(10007)+\" are all nice people.\");\n\n\t\/\/ This will do the same as above:\n\t.@var = 10007;\n\tmes(\"We have some friends in \"+getguildname(.@var)+\", you know.\");\n\nThis is used all over the WoE controlling scripts. You could also use it\nfor a guild-based event."
    },
    {
        "command": "getguildmaster(<guild id>)",
        "line": 3657,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.2 - Guild-Related Commands",
        "description": "*getguildmaster(<guild id>)\n\nThis function return the name of the master of the guild which has the\nspecified ID number. If there is no such guild, \"null\" will be returned.\n\n\/\/ Would return the guild master of guild 10007, whatever that might be.\n\tmes(getguildmaster(10007)+\" runs \"+getguildname(10007));\n\nCan be used to check if the character is the guild master of the specified\nguild.\n\nMaybe you want to make a room only guild masters can enter:\n\n\t.@GID = getcharid(CHAR_ID_GUILD);\n\tif (.@GID == 0) {\n\t\tmes(\"Sorry you are not in a guild\");\n\t\tclose();\n\t}\n\tif (strcharinfo(PC_NAME) == getguildmaster(.@GID)) {\n\t\tmes(\"Welcome guild master of \"+getguildname(.@GID));\n\t\tclose();\n\t}\n\tmes(\"Sorry you don't own the guild you are in\");\n\tclose();"
    },
    {
        "command": "getguildmasterid(<guild id>)",
        "line": 3684,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.2 - Guild-Related Commands",
        "description": "*getguildmasterid(<guild id>)\n\nThis function will return the character ID number of the guild master of\nthe guild specified by the ID. 0 if the character is not a guild master of\nany guild."
    },
    {
        "command": "getcastlename(\"<map name>\")",
        "line": 3692,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.2 - Guild-Related Commands",
        "description": "*getcastlename(\"<map name>\")\n\nThis function returns the name of the castle when given the map name for\nthat castle. The data is read from 'db\/castle_db.txt'."
    },
    {
        "command": "getcastledata(\"<map name>\", <type of data>)",
        "line": 3699,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.2 - Guild-Related Commands",
        "description": "*getcastledata(\"<map name>\", <type of data>)\n*setcastledata(\"<map name>\", <type of data>, <value>);\n\nThis function returns the castle ownership information for the castle\nreferred to by its map name. Castle information is stored in\n`guild_castle` SQL table.\n\nTypes of data correspond to `guild_castle` table columns:\n\n 1 - `guild_id`   - Guild ID.\n 2 - `economy`    - Castle Economy score.\n 3 - `defense`    - Castle Defense score.\n 4 - `triggerE`   - Number of times the economy was invested in today.\n 5 - `triggerD`   - Number of times the defense was invested in today.\n 6 - `nextTime`   - unused\n 7 - `payTime`    - unused\n 8 - `createTime` - unused\n 9 - `visibleC`   - Is 1 if a Kafra was hired for this castle, 0 otherwise.\n10 - `visibleG0`  - Is 1 if the 1st guardian is present (Soldier Guardian)\n11 - `visibleG1`  - Is 1 if the 2nd guardian is present (Soldier Guardian)\n12 - `visibleG2`  - Is 1 if the 3rd guardian is present (Soldier Guardian)\n13 - `visibleG3`  - Is 1 if the 4th guardian is present (Archer Guardian)\n14 - `visibleG4`  - Is 1 if the 5th guardian is present (Archer Guardian)\n15 - `visibleG5`  - Is 1 if the 6th guardian is present (Knight Guardian)\n16 - `visibleG6`  - Is 1 if the 7th guardian is present (Knight Guardian)\n17 - `visibleG7`  - Is 1 if the 8th guardian is present (Knight Guardian)\n\nAll types of data have their meaning determined by War of Emperium\nscripts, with exception of:\n - `guild_id` that is always the ID of the guild that owns the castle,\n - `defense` that is used in Guardians & Emperium HP calculations,\n - `visibleG` that is always considered to hold guardian presence bits.\n\nThe setcastledata() command will behave identically, but instead of\nreturning values for the specified types of accessible data, it will alter\nthem and cause them to be sent to the char-server for storage.\n\nChanging Guild ID or Castle Defense will trigger additional actions, like\nrecalculating guardians' HP."
    },
    {
        "command": "getgdskilllv(<guild id>, <skill id>)",
        "line": 3741,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.2 - Guild-Related Commands",
        "description": "*getgdskilllv(<guild id>, <skill id>)\n*getgdskilllv(<guild id>, \"<skill name>\")\n\nThis function returns the level of the skill <skill id> of the guild\n<guild id>.\nIf the guild does not have that skill, 0 is returned.\nIf the guild does not exist, -1 is returned.\nRefer to 'db\/(pre-)re\/skill_db.txt' for the full list of skills.\nGD_* are guild skills"
    },
    {
        "command": "requestguildinfo(<guild id>{, \"<event label>\"});",
        "line": 3753,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.2 - Guild-Related Commands",
        "description": "*requestguildinfo(<guild id>{, \"<event label>\"});\n\nThis command requests the guild data from the char server and merrily\ncontinues with the execution. Whenever the guild information becomes\navailable (which happens instantly if the guild information is already in\nmemory, or later, if it isn't and the map server has to wait for the char\nserver to reply) it will run the specified event as in a 'doevent' call."
    },
    {
        "command": "getmapguildusers(<mapname>, <guild id>)",
        "line": 3763,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.2 - Guild-Related Commands",
        "description": "*getmapguildusers(<mapname>, <guild id>)\n\nReturns the amount of characters from the specified guild on the given map.\n\nExample:\n\n\tmes(\"You have \"+getmapguildusers(\"prontera\", getcharid(CHAR_ID_GUILD))+\" guild members in Prontera.\");"
    },
    {
        "command": "getguildmember(<guild id>{, <type>});",
        "line": 3773,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.2 - Guild-Related Commands",
        "description": "*getguildmember(<guild id>{, <type>});\n\nThis command will find all members of a specified guild and returns their names\n(or character id or account id depending on the value of \"type\") into an array\nof temporary global variables.\n\nUpon executing this,\n\n$@guildmembername$[] is a global temporary string array which contains all the\n                     names of these guild members.\n                     (only set when type is 0 or not specified)\n\n$@guildmembercid[]   is a global temporary number array which contains the\n                     character id of these guild members.\n                     (only set when type is 1)\n\n$@guildmemberaid[]   is a global temporary number array which contains the\n                     account id of these guild members.\n                     (only set when type is 2)\n\n$@guildmembercount   is the number of guild members that were found.\n\nThe guild members will be found regardless of whether they are online or offline.\nNote that the names come in no particular order.\n\nBe sure to use $@guildmembercount to go through this array, and not\ngetarraysize(), because it is not cleared between runs of getguildmember().\n\nFor usage examples, see getpartymember()."
    },
    {
        "command": "getguildonline(<guild id>{, <type>});",
        "line": 3805,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "2.2 - Guild-Related Commands",
        "description": "*getguildonline(<guild id>{, <type>});\n\nReturns the amount of players online in the specified guild id.\nReturns -1 if the guild was not found.\n\nValid <type> are:\n\tGUILD_ONLINE_ALL         Returns the total amount of players online in the guild.\n\tGUILD_ONLINE_VENDOR      Returns the total amount of vendors online in the guild.\n\tGUILD_ONLINE_NO_VENDOR   Returns the total amount of non-vendors online in the guild."
    },
    {
        "command": "getskilllv(<skill id>)",
        "line": 3821,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*getskilllv(<skill id>)\n*getskilllv(\"<skill name>\")\n\nThis function returns the level of the specified skill that the invoking\ncharacter has. If they don't have the skill, 0 will be returned. The full\nlist of character skills is available in 'db\/(pre-)re\/skill_db.txt'.\n\nThere are two main uses for this function, it can check whether the\ncharacter has a skill or not, and it can tell you if the level is high\nenough.\n\nExample 1:\n\n\tif (getskilllv(TF_THROWSTONE)) {\n\t\t\/\/ TF_THROWSTONE is defined in skill_db.txt and its value is 152\n\t\tmes(\"You have got the skill Throw Stone\");\n\t\tclose();\n\t}\n\tmes(\"You don't have Throw Stone\");\n\tclose();\n\nExample 2:\n\n\tif (getskilllv(AL_HEAL) == 10) {\n\t\tmes(\"Your heal lvl has been maxed\");\n\t\tclose();\n\t}\n\tif (getskilllv(AL_HEAL) >= 5) {\n\t\tmes(\"Your heal lvl is 5 or more\");\n\t\tclose();\n\t}\n\tmes(\"You heal skill is below lvl 5\");\n\tclose();"
    },
    {
        "command": "getskilllist();",
        "line": 3857,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*getskilllist();\n\nThis command sets a bunch of arrays with a complete list of skills the\ninvoking character has. Here's what you get:\n\n@skilllist_id[]   - skill ids.\n@skilllist_lv[]   - skill levels.\n@skilllist_flag[] - see 'skill' for the meaning of skill flags.\n@skilllist_count  - number of skills in the above arrays.\n\nWhile getskilllv() is probably more useful for most situations, this is the\neasiest way to store all the skills and make the character something else\nfor a while. Advanced job for a day? :) This could also be useful to see\nhow many skills a character has."
    },
    {
        "command": "getpetinfo(<type>)",
        "line": 3874,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*getpetinfo(<type>)\n\nThis command will return the currently active pet information of the invoking character.\nThese fields are associate in 'db\/(pre-)re\/pet_db.conf'. Valid types are:\n\n\tPETINFO_ID            - Pet Database ID, stored in `pet` table to distinguish from other pets.\n\tPETINFO_CLASS         - Pet class ID. (Id field)\n\tPETINFO_NAME          - Pet Name, return \"null\" if there's no active pet.\n\tPETINFO_INTIMACY      - Pet Intimacy level. 1000 is full loyalty.\n\tPETINFO_HUNGRY        - Pet hungry level. 100 is completely full.\n\tPETINFO_RENAME        - Pet rename flag. 0 means this pet has not been named yet.\n\tPETINFO_GID           - Pet Game ID\n\tPETINFO_EGGITEM       - Pet EggItem\n\tPETINFO_FOODITEM      - Pet FoodItem\n\tPETINFO_ACCESSORYITEM - Pet AccessoryItem\n\tPETINFO_ACCESSORYFLAG - return 1 if the pet currently equipping accessory, return 0 otherwise.\n\tPETINFO_EVO_EGGID     - Pet Evolve EggID\n\tPETINFO_AUTOFEED      - Pet AutoFeed flag.\n\t\nIf the invoking player doesn't own a pet, this command will\nreturn \"null\" for type PETINFO_NAME, and return 0 for other types."
    },
    {
        "command": "petstat(<flag>)",
        "line": 3898,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*petstat(<flag>)\n\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n    @ \/!\\ This command is deprecated @\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\nReturns current pet status, all are integers except name.\nReturns 0 or \"\" if the player doesn't have pets.\n\nFlags usable:\nPET_CLASS\nPET_NAME\nPET_LEVEL\nPET_HUNGRY\nPET_INTIMATE\n\nExample:\n\t.@i = petstat(PET_CLASS);\n\nThis command is deprecated and it should not be used in new scripts, as it is\nlikely to be removed at a later time. Please use 'getpetinfo' instead."
    },
    {
        "command": "getmonsterinfo(<mob ID>, <type>)",
        "line": 3922,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*getmonsterinfo(<mob ID>, <type>)\n\nThis function will look up the monster with the specified ID number in the\nmob database and return the info set by TYPE argument.\nIt will return -1 if there is no such monster (or the type value is\ninvalid), or \"null\" if you requested the monster's name.\n\nValid types are listed in doc\/constants.md:\n\tMOB_NAME\t\t0\n\tMOB_LV\t\t\t1\n\tMOB_MAXHP\t\t2\n\tMOB_BASEEXP\t\t3\n\tMOB_JOBEXP\t\t4\n\tMOB_ATK1\t\t5\n\tMOB_ATK2\t\t6\n\tMOB_DEF\t\t\t7\n\tMOB_MDEF\t\t8\n\tMOB_STR\t\t\t9\n\tMOB_AGI\t\t\t10\n\tMOB_VIT\t\t\t11\n\tMOB_INT\t\t\t12\n\tMOB_DEX\t\t\t13\n\tMOB_LUK\t\t\t14\n\tMOB_RANGE\t\t15\n\tMOB_RANGE2\t\t16\n\tMOB_RANGE3\t\t17\n\tMOB_SIZE\t\t18\n\tMOB_RACE\t\t19\n\tMOB_ELEMENT\t\t20\n\tMOB_MODE\t\t21\n\tMOB_MVPEXP\t\t22\n\nCheck sample in doc\/sample\/getmonsterinfo.txt"
    },
    {
        "command": "addmonsterdrop(<mob id or name>, <item id>, <rate>)",
        "line": 3958,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*addmonsterdrop(<mob id or name>, <item id>, <rate>)\n\nThis command will temporarily add a drop to an existing monster. If the\nmonster already drops the specified item, its drop rate will be updated to the\ngiven value.\n\nBoth the monster and the item must be valid.  Acceptable values for the drop\nrate are in the range [1:10000].\n\nReturn value will be 1 in case of success (the item was added or its drop rate\nwas updated), and 0 otherwise (there were no free item drop slots).\n\nExample:\n\t\/\/ Add Poring Doll (741) to the Poring's (1002) drops, with 1% (100) rate\n\taddmonsterdrop(PORING, Poring_Doll, 100);"
    },
    {
        "command": "delmonsterdrop(<mob id or name>, <item id>)",
        "line": 3976,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*delmonsterdrop(<mob id or name>, <item id>)\n\nThis command will temporarily remove a drop from an existing monster.\n\nBoth the monster and the item must be valid.\n\nReturn value will be true in case of success (the item was removed), and\nfalse otherwise (the monster didn't have the specified item in its drop\nlist).\n\nExample:\n\t\/\/ Remove Jellopy (909) from the Poring's (1002) drops\n\tdelmonsterdrop(PORING, Jellopy);"
    },
    {
        "command": "getmobdrops(<mob id>)",
        "line": 3992,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*getmobdrops(<mob id>)\n\nThis command will find all drops of the specified mob and return the item\nIDs and drop percentages into arrays of temporary global variables.\ngetmobdrops() returns true if successful and false if the mob ID doesn't\nexist.\n\nUpon executing this,\n\n$@MobDrop_item[] is a global temporary number array which contains the\n                 item IDs of the monster's drops.\n\n$@MobDrop_rate[] is a global temporary number array which contains the\n                 drop percentages of each item. (1 = .01%)\n\n$@MobDrop_count  is the number of item drops found.\n\nBe sure to use $@MobDrop_count to go through the arrays, and not\n'getarraysize', because the temporary global arrays are not cleared\nbetween runs of 'getmobdrops'. If a mob with 7 item drops is looked up,\nthe arrays would have 7 elements. But if another mob is looked up and it\nonly has 5 item drops, the server will not clear the arrays for you,\noverwriting the values instead. So in addition to returning the 5 item\ndrops, the 6th and 7th elements from the last call remain, and you will\nget 5+2 item drops, of which the last 2 don't belong to the new mob.\n$@MobDrop_count will always contain the correct number (5), unlike\ngetarraysize() which would return 7 in this case.\n\nExample:\n\n\t\/\/ get a Mob ID from the user\n\tinput(.@mob_id);\n\n\tif (getmobdrops(.@mob_id)) { \/\/ getmobdrops() returns true on success\n\t\t\/\/ immediately copy global temporary variables into scope\n\t\t\/\/ variables, since we don't know when getmobdrops() will get\n\t\t\/\/ called again for another mob, overwriting your global temporary\n\t\t\/\/ variables.\n\t\t.@count = $@MobDrop_count;\n\t\tcopyarray(.@item[0], $@MobDrop_item[0], .@count);\n\t\tcopyarray(.@rate[0], $@MobDrop_rate[0], .@count);\n\n\t\tmes(getmonsterinfo(.@mob_id, MOB_NAME) + \" - \" + .@count + \" drops found:\");\n\t\tfor (.@i = 0; .@i < .@count; ++.@i) {\n\t\t\tmes(.@item[.@i] + \" (\" + getitemname(.@item[.@i]) + \") \" + .@rate[.@i]\/100 + ((.@rate[.@i]%100 < 10) ? \".0\":\".\") + .@rate[.@i]%100 + \"%\");\n\t\t}\n\t} else {\n\t\tmes(\"Unknown monster ID.\");\n\t}\n\tclose();"
    },
    {
        "command": "skillpointcount()",
        "line": 4045,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*skillpointcount()\n\nReturns the total amount of skill points a character possesses\n(SkillPoint + skill points used in skills) This command can be used to\ncheck the currently attached characters total amount of skill points.\nThis means the skill points used in skill are counted, and added to\nSkillPoints (number of skill points not used).\n\nExample:\n\n\/\/This will set the temp character variable @skill_points to the amount of\n\/\/skill points, and then tell the player the value.\n\t@skill_points = skillpointcount();\n\tmes(\"You have \"+@skill_points+\" skill points in total!\");\n\n\/\/Self-explanatory... :P\n\tif (skillpointcount() > 20)\n\t\tmes(\"Wow, you have more then 20 Skill Points in total!\");\n\nThis command does not count skills which are set as flag 3 (permamently\ngranted) (e.g. ALL_BUYING_STORE\/ALL_INCCARRY)."
    },
    {
        "command": "getscrate(<effect type>, <base rate>{, <GID>})",
        "line": 4068,
        "category": "2 - Information-retrieving Related Commands",
        "sub_category": "",
        "description": "*getscrate(<effect type>, <base rate>{, <GID>})\n\nThis function will return the chance of a status effect affecting the\ninvoking character, in percent, modified by the their current defense\nagainst said status. The 'base rate' is the base chance of the status\neffect being inflicted, in percent.\n\n\tif (rand(100) > getscrate(Eff_Blind, 50)) {\n\t\t\/\/ do something\n\t}\n\nYou can see the full list of available effect types you can possibly\ninflict in 'doc\/constants.md' under 'Status effects'."
    },
    {
        "command": "playerattached()",
        "line": 4088,
        "category": "3 - Checking-Related Commands",
        "sub_category": "",
        "description": "*playerattached()\n\nReturns the ID of the player currently attached to the script. It will\nreturn 0 if no one is attached, or if the attached player no longer exists\non the map server. It is wise to check for the attached player in script\nfunctions that deal with timers as there's no guarantee the player will\nstill be logged on when the timer triggers. Note that the ID of a player\nis actually their account ID."
    },
    {
        "command": "isloggedin(<account id>{, <char id>})",
        "line": 4099,
        "category": "3 - Checking-Related Commands",
        "sub_category": "",
        "description": "*isloggedin(<account id>{, <char id>})\n\nThis function returns true if the specified account is logged in and\nfalse if they aren't. You can also pass the char_id to check for both\naccount and char id."
    },
    {
        "command": "checkweight(<item id>, <amount>{, <item id>, <amount>, <item id>, <amount>, ...})",
        "line": 4107,
        "category": "3 - Checking-Related Commands",
        "sub_category": "",
        "description": "*checkweight(<item id>, <amount>{, <item id>, <amount>, <item id>, <amount>, ...})\n*checkweight(\"<item name>\", <amount>{, \"<item name>\", <amount>, \"<item name>\", <amount>, ...})\n*checkweight2(<id_array>, <amount_array>)\n\nThese functions will compute and return true if the total weight of the\nspecified number of specific items does not exceed the invoking\ncharacter's carrying capacity, and false otherwise. It is important to\nsee if a player can carry the items you expect to give them, failing to\ndo that may open your script up to abuse or create some very unfair\nerrors.\n\nThe second function will check an array of items and amounts, and also\nreturns true on success and false on failure.\n\nThe functions, in addition to checking to see if the player is capable of\nholding a set amount of items, also ensure the player has room in their\ninventory for the item(s) they will be receiving.\n\nLike getitem(), this function will also accept an 'english name' from\nthe database as an argument.\n\nExample 1:\n\n\tif (checkweight(Apple, 10)) {\n\t\tgetitem(Apple, 10);\n\t} else {\n\t\tmes(\"Sorry, you cannot hold this amount of apples!\");\n\t}\n\nExample 2:\n\n\tsetarray(.@item[0], 512, 513, 514);\n\tsetarray(.@amount[0], 10, 5, 5);\n\tif (!checkweight(.@item, .@amount)) {\n\t\tmes(\"Sorry, you cannot hold this amount of fruit!\");\n\t}"
    },
    {
        "command": "basicskillcheck()",
        "line": 4146,
        "category": "3 - Checking-Related Commands",
        "sub_category": "",
        "description": "*basicskillcheck()\n\nThis function will return the state of the configuration option\n'basic_skill_check' in 'conf\/map\/battle.conf'. Returns true if the\noption is enabled and false if it isn't. If the 'basic_skill_check'\noption is enabled, which it is by default, characters must have a\ncertain number of basic skill levels to sit, request a trade, use\nemotions, etc.  Making your script behave differently depending on\nwhether the characters must actually have the skill to do all these\nthings might in some cases be required."
    },
    {
        "command": "checkoption(<option number>{, <account id>})",
        "line": 4159,
        "category": "3 - Checking-Related Commands",
        "sub_category": "",
        "description": "*checkoption(<option number>{, <account id>})\n*checkoption1(<option number>{, <account id>})\n*checkoption2(<option number>{, <account id>})\n*setoption(<option number>{, <flag>{, <account id>}});\n\nThe setoption() series of functions check for a so-called option that is\nset on the invoking character. 'Options' are used to store status\nconditions and a lot of other non-permanent character data of the yes-no\nkind. For most common cases, it is better to use checkcart(),\ncheckfalcon(), checkmount() and other similar functions, but there are\nsome options which you cannot get at this way. If <account id> is given,\nthis player will be used instead of the invoking character.\n\nOption numbers valid for the first (option) version of this command are:\n\n0x000000 Option_Nothing   - No options\n0x000001 Option_Sight     - Sight in effect.\n0x000002 Option_Hide      - Hide in effect.\n0x000004 Option_Cloak     - Cloaking in effect.\n0x000008                  - Cart number 1 present.\n0x000010 Option_Falcon    - Falcon present.\n0x000020 Option_Riding    - Peco Peco present.\n0x000040 Option_Invisible - GM Perfect Hide in effect.\n0x000080                  - Cart number 2 present.\n0x000100                  - Cart number 3 present.\n0x000200                  - Cart number 4 present.\n0x000400                  - Cart number 5 present.\n0x000800 Option_Orcish    - Orc head present.\n0x001000 Option_Wedding   - The character is wearing a wedding sprite.\n0x002000                  - Ruwach is in effect.\n0x004000 Option_Chasewalk - Chasewalk in effect.\n0x008000 Option_Flying    - Flying or Xmas suit.\n0x010000                  - Sighttrasher.\n0x100000 Option_Wug       - Warg present.\n0x200000 Option_Wugrider  - The character is riding a warg.\n\nOption numbers valid for the second version (opt1) of this command are:\n\n1 - Petrified.\n2 - Frozen.\n3 - Stunned.\n4 - Sleeping.\n6 - Petrifying (the state where you can still walk)\n\nOption numbers valid for the third version (opt2) of this command are:\n\n0x01 - Poisoned.\n0x02 - Cursed.\n0x04 - Silenced.\n0x08 - Signum Crucis (plays a howl-like sound effect, but otherwise no\n       visible effects are displayed)\n0x10 - Blinded.\n0x80 - Deadly poisoned.\n\nOption numbers (except for opt1) are bit-masks - you can add them up to\ncheck for several states, but the functions will return true if at least\none of them is in effect.\n\nsetoption() will set options on the invoking character. There are no\nsecond and third versions of this command, so you can only change the\nvalues in the first list (cloak, cart, ruwach, etc). If flag is 1 (default\nwhen omitted), the option will be added to what the character currently\nhas; if 0, the option is removed.\n\nThis is definitely not a complete list of available option flag numbers.\nAsk a core developer (or read the source: src\/map\/status.h) for the full\nlist."
    },
    {
        "command": "setcart({<type>})",
        "line": 4229,
        "category": "3 - Checking-Related Commands",
        "sub_category": "",
        "description": "*setcart({<type>})\n*checkcart()\n\nIf <type> is 0 this command will remove the cart from the character.\nOtherwise it gives the invoking character a cart. The cart given will be\ncart number <type> and will work regardless of whether the character is a\nmerchant class or not.\nNote: the character needs to have the skill MC_PUSHCART to gain a cart.\n\nThe accompanying function will return true if the invoking character has a\ncart (any kind of cart) and false if they don't.\n\n\tif (checkcart())\n\t\tmes(\"But you already have a cart!\");"
    },
    {
        "command": "setfalcon({<flag>})",
        "line": 4246,
        "category": "3 - Checking-Related Commands",
        "sub_category": "",
        "description": "*setfalcon({<flag>})\n*checkfalcon()\n\nIf <flag> is 0 this command will remove the falcon from the character.\nOtherwise it gives the invoking character a falcon. The falcon will be\nthere regardless of whether the character is a hunter or not. It will\n(probably) not have any useful effects for non-hunters though.\nNote: the character needs to have the skill HT_FALCON to gain a falcon.\n\nThe accompanying function will return true if the invoking character has a\nfalcon and false if they don't.\n\n\tif (checkfalcon())\n\t\tmes(\"But you already have a falcon!\");"
    },
    {
        "command": "setmount({<flag>})",
        "line": 4263,
        "category": "3 - Checking-Related Commands",
        "sub_category": "",
        "description": "*setmount({<flag>})\n*checkmount()\n\nIf <flag> is MOUNT_NONE this command will remove the mount from the\ncharacter.\n\nOtherwise it gives the invoking character the desired combat mount, where\nallowed by their class and skills.\n\nIf no flag is specified, the mount is automatically chosen according to the\ncharacter's class and skills.\n\nThe following flag values are accepted:\n\n    MOUNT_NONE:\n        - Dismount\n    MOUNT_PECO:\n        - PecoPeco (Knight series class)\n        - GrandPeco (Crusader series class)\n        - Gryphon (Royal Guard)\n    MOUNT_WUG:\n        - Warg (Ranger)\n    MOUNT_MADO:\n        - Mado Gear (Mechanic)\n    MOUNT_DRAGON:\n    MOUNT_DRAGON_GREEN:\n    MOUNT_DRAGON_BROWN:\n    MOUNT_DRAGON_GRAY:\n    MOUNT_DRAGON_BLUE:\n    MOUNT_DRAGON_RED:\n        - Dragon (Rune Knight)\n          if MOUNT_DRAGON is specified, a the default (green) dragon will be used.\n\nUnlike 'setfalcon' and 'setcart' this will not work at all if they aren't of a\nclass which can ride a mount.\n\nThe accompanying function will return MOUNT_NONE if the invoking\ncharacter is not on a mount, and a non-zero value (according to the\nabove constants) if they are.\nNote: in case of dragons, the returned value will always be MOUNT_DRAGON,\nregardless of color.\n\n\tif (checkmount())\n\t\tmes(\"Leave your mount outside! No riding mounts on the floor here!\");\n\n\tif (checkmount() == MOUNT_DRAGON)\n\t\tmes(\"Wow, your dragon is cool! Can I pet it?\");"
    },
    {
        "command": "setcashmount()",
        "line": 4313,
        "category": "3 - Checking-Related Commands",
        "sub_category": "",
        "description": "*setcashmount()\n*hascashmount()\n\nThe 'setcashmount' function toggles cash mount for the invoking character.\nIt will return true if successful, false otherwise.\n\nNote: Character must not be mounting a non-cash mount (eg. dragon, peco,\n\t  wug, etc.)\n\nThe accompanying function will return true if the invoking character has a\ncash mount and false if they don't."
    },
    {
        "command": "checkwug()",
        "line": 4327,
        "category": "3 - Checking-Related Commands",
        "sub_category": "",
        "description": "*checkwug()\n\nThis function will return true if the invoking character has a warg and false if\nthey don't."
    },
    {
        "command": "checkvending({\"<Player Name>\"})",
        "line": 4334,
        "category": "3 - Checking-Related Commands",
        "sub_category": "",
        "description": "*checkvending({\"<Player Name>\"})\n*checkchatting({\"<Player Name>\"})\n\nChecks if the player is vending or in a chatroom.\nName is optional, and defaults to the attached player if omitted.\n\nReturn values for 'checkvending' are\n  0 = not vending\n  1 = normal vending\n  2 = vending using @autotrade\n\ncheckchatting() returns true if they are in a chat room, false if they are not.\n\nExamples:\n\t\/\/This will check if Aaron is vending, and if so, put a message in\n\t\/\/front of the attached player saying Aaron is vending.\n\tif (checkvending(\"Aaron\"))\n\t\tmes(\"Aaron is currently vending!\");\n\n\t\/\/This will check if the attached player in a chat room or not.\n\tif (checkchatting())\n\t\tmes(\"You are currently in a chat room!\");"
    },
    {
        "command": "checkidle({\"<Player Name>\"})",
        "line": 4359,
        "category": "3 - Checking-Related Commands",
        "sub_category": "",
        "description": "*checkidle({\"<Player Name>\"})\n\nReturns the time, in seconds, that the specified player has been idle.\nName is optional, and defaults to the attached player if omitted."
    },
    {
        "command": "agitcheck()",
        "line": 4366,
        "category": "3 - Checking-Related Commands",
        "sub_category": "",
        "description": "*agitcheck()\n*agitcheck2()\n\nThese function will let you check whether the server is currently in WoE\nmode (or WoE SE mode if the second function is called) and will return true\nif War of Emperium is on and false if it isn't."
    },
    {
        "command": "isnight()",
        "line": 4375,
        "category": "3 - Checking-Related Commands",
        "sub_category": "",
        "description": "*isnight()\n\nThis functions will return true or false depending on whether the server is in\nnight mode or day mode:\n\n\tif (!isnight())\n\t\tmes(\"I only prowl in the night.\");"
    },
    {
        "command": "isequipped(<item id>{, <item id>{, <item id>{, <item id>}}})",
        "line": 4389,
        "category": "3 - Checking-Related Commands",
        "sub_category": "3.1 - Checking Item-Related Commands",
        "description": "*isequipped(<item id>{, <item id>{, <item id>{, <item id>}}})\n\nThis function will return true if the invoking character has all of the item\nIDs given equipped (if card IDs are passed, then it checks if the cards\nare inserted into slots in the equipment they are currently wearing).\nTheoretically there is no limit to the number of items that may be tested\nfor at the same time.\nIf even one of the items given is not equipped, false will be returned.\n\n\t\/\/ (Poring, Santa Poring, Poporing, Marin)\n\tif (isequipped(Poring_Card, Poring__Card, Poporing_Card, Marin_Card))\n\t\tmes(\"Wow! You're wearing a full complement of possible poring cards!\");\n\t\/\/ (Poring)\n\tif (isequipped(Poring_Card))\n\t\tmes(\"A poring card is useful, don't you think?\");\n\t\/\/ (Earring)\n\tif (isequipped(Earring_))\n\t\tmes(\"You got a pair of nice Earring.\");\n\nThe function was meant for item scripts to support the cards released by\nGravity in February 2005, but it will work just fine in normal NPC scripts."
    },
    {
        "command": "isequippedcnt(<item id>{, <item id>{, <item id>{, <item id>}}})",
        "line": 4413,
        "category": "3 - Checking-Related Commands",
        "sub_category": "3.1 - Checking Item-Related Commands",
        "description": "*isequippedcnt(<item id>{, <item id>{, <item id>{, <item id>}}})\n\nThis function is similar to isequipped(), but instead of true or false, it will\nreturn the number of equipped items\/cards in the list given that were found on the\ninvoking character.\n\n\tif (isequippedcnt(Poring_Card, Poring__Card, Poporing_Card, Marin_Card) == 4)\n\t\tmes(\"Finally got all four poring cards?\");\n\tif (isequippedcnt(Helm_Of_Sun_, Earring_) == 2)\n\t\tmes(\"You equipped both Helm of Sun and Earring.\");"
    },
    {
        "command": "checkequipedcard(<card id>)",
        "line": 4426,
        "category": "3 - Checking-Related Commands",
        "sub_category": "3.1 - Checking Item-Related Commands",
        "description": "*checkequipedcard(<card id>)\n\nThis function will return true if the card specified by it's item ID number\nis inserted into any equipment they have in their inventory, currently\nequipped or not."
    },
    {
        "command": "getequipisidentify(<equipment slot>)",
        "line": 4434,
        "category": "3 - Checking-Related Commands",
        "sub_category": "3.1 - Checking Item-Related Commands",
        "description": "*getequipisidentify(<equipment slot>)\n\nThis function will return true if an item in the specified equipment slot is\nidentified and false if it isn't. Since you can't even equip unidentified\nequipment, there's a question of whether it can actually end up there, and\nit will normally return true all the time if there is an item in this\nequipment slot, which makes this script command kinda pointless.\nFor a list of equipment slots see getequipid()."
    },
    {
        "command": "attachrid(<account ID>)",
        "line": 4455,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*attachrid(<account ID>)\n*detachrid()\n\nThese commands allow the manipulation of the script's currently attached\nplayer. While attachrid() allows attaching of a different player by using\nits account id for the parameter rid, detachrid() makes the following\ncommands run as if the script was never invoked by a player.\n\nIn case, that the player cannot be attached, such as, when the player went\noffline in the mean time, attachrid() returns false, otherwise true."
    },
    {
        "command": "rid2name(<account id>)",
        "line": 4468,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*rid2name(<account id>)\n\nConverts rid to name. Note: The player\/monster\/NPC must be online\/enabled.\nGood for PCKillEvent where you can convert 'killedrid' to the name of the\nplayer.\n\nNote: rid2name() may not produce correct character names since RID means\n      account id.\n      It will return the current online character of the account only."
    },
    {
        "command": "message(<account ID>, \"<message>\")",
        "line": 4480,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*message(<account ID>, \"<message>\")\n*message(\"<character name>\", \"<message>\")\n\nThat command will send a message to the chat window of the character\nspecified by account ID or name. The text will also appear above the head\nof that character. It will not be seen by anyone else."
    },
    {
        "command": "dispbottom(\"<message>\"{, <color>})",
        "line": 4489,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*dispbottom(\"<message>\"{, <color>})\n\nThis command will send the given message into the invoking character's\nchat window. The color format is in RGB (0xRRGGBB), and default to green\nif <color> field is left out."
    },
    {
        "command": "showscript(\"<message>\"{, <GID>{, <send_target>}})",
        "line": 4497,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*showscript(\"<message>\"{, <GID>{, <send_target>}})\n\nMakes the attached player or GID, display a message similiar to a chat,\nthis will be seen by everyone near the invoking character but will not\nbe displayed in the chat window.\nsend_target: (optional)\n\tAREA: show the message to everyone within the view range (default)\n\tSELF: show the message to the given unit GID only"
    },
    {
        "command": "warp(\"<map name>\", <x>, <y>{, <flag>})",
        "line": 4508,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*warp(\"<map name>\", <x>, <y>{, <flag>})\n\nThis command will take the invoking character to the specified map, and if\nwanted, specified coordinates too, but these can be random.\n\n\twarp(\"place\", 50, 55);\n\nThis would take them to X 50 Y 55 on the map called \"place\". If your X and\nY coordinates land on an unwalkable map square, it will send the warped\ncharacter to a random place. Same will happen if they are both zero:\n\n\twarp(\"place\", 0, 0);\n\nNotice that while warping people to coordinates 0,0 will normally get them\ninto a random place, it's not certain to always be so. Darned if I know\nwhere this is actually coded, it might be that this happens because square\n0,0 is unwalkable on all official maps. Beware if you're using custom maps.\n\nThere are also three special 'map names' you can use:\n\n\"Random\" will warp the player randomly on the current map.\n\"Save\" and \"SavePoint\" will warp the player back to their save point.\n\nIf flag parameter is set to 0, after player warped will be not stopped\ncurrend running npc script. Running script after warp can be issue for\nGravity client if warp to other maps."
    },
    {
        "command": "areawarp(\"<from map name>\", <x1>, <y1>, <x2>, <y2>, \"<to map name>\", <x3>, <y3>{, <x4>, <y4>})",
        "line": 4537,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*areawarp(\"<from map name>\", <x1>, <y1>, <x2>, <y2>, \"<to map name>\", <x3>, <y3>{, <x4>, <y4>})\n\nThis command is similar to 'warp', however, it will not refer to the\ninvoking character, but instead, all characters within a specified area,\ndefined by the x1\/y1-x2\/y2 square, will be warped. Nobody outside the area\nwill be affected, including the activating character, if they are outside\nthe area.\n\n\tareawarp(\"place\", 10, 10, 120, 120, \"place2\", 150, 150);\n\nEveryone that is in the area between X 10 Y 10 and X 120 Y 120, in a\nsquare shape, on the map called \"place\", will be affected, and warped to\n\"place2\" X 150 Y 150.\n\n\tareawarp(\"place\", 10, 10, 120, 120, \"place2\", 0, 0);\n\nBy using 0,0; as the destination coordinates it will take all the\ncharacters in the affected area to a random set of co-ordinates on the\n\"place2\" map.\n\n\tareawarp(\"place\", 10, 10, 120, 120, \"place2\", 150, 150, 200, 200);\n\nBy using the optional x4 and y4 parameters, the destination coordinates\nwill be a random place within the defined x3\/y3-x4\/y4 square.\n\nLike warp(), areawarp() will also explicitly warp characters randomly into\nthe current map if you give the 'to map name' as \"Random\".\n\nSee also warp()."
    },
    {
        "command": "warpparty(\"<to_mapname>\", <x>, <y>, <party_id>, \"<from_mapname>\", <include_leader>)",
        "line": 4569,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*warpparty(\"<to_mapname>\", <x>, <y>, <party_id>, \"<from_mapname>\", <include_leader>)\n\nWarps a party to specified map and coordinate given the party ID, which\nyou can get with getcharid(CHAR_ID_PARTY). You can also request another party id given\na member's name with getcharid(CHAR_ID_PARTY, <player_name>).\n\nYou can use the following \"map names\" for special warping behavior:\nRandom:       All party members are randomly warped in their current map\n              (as if they all used a fly wing).\nSavePointAll: All party members are warped to their respective save point.\nSavePoint:    All party members are warped to the save point of the\n              currently attached player (will fail if there's no player\n              attached).\nLeader:       All party members are warped to the leader's position. The\n              leader must be online and in the current map-server for\n              this to work.\n\nIf you specify a from_mapname, warpparty() will only affect those on\nthat map.\n\nYou can exclude Party leader from warping, by keeping include_leader option as false.\n\nExample:\n\n\tmes(\"[Party Warper]\");\n\tmes(\"Here you go!\");\n\tclose2();\n\t.@id = getcharid(CHAR_ID_PARTY);\n\twarpparty(\"prontera\", 150, 100, .@id, true);\n\tclose();"
    },
    {
        "command": "warpchar(\"<mapname>\", <x>, <y>, <char_id>)",
        "line": 4602,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*warpchar(\"<mapname>\", <x>, <y>, <char_id>)\n\nWarps another player to specified map and coordinate given the char id,\nwhich you can get with getcharid(CHAR_ID_CHAR, <player_name>). Obviously this is\nuseless if you want to warp the same player that is executing this script,\nunless it's some kind of \"chosen\" script.\n\nExample:\n\n\twarpchar(\"prontera\", 150, 100, 150001);"
    },
    {
        "command": "warpguild(\"<mapname>\", <x>, <y>, <guild_id>, {\"<from_mapname>\"})",
        "line": 4615,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*warpguild(\"<mapname>\", <x>, <y>, <guild_id>, {\"<from_mapname>\"})\n\nWarps a guild to specified map and coordinate given the guild id, which\nyou can get with getcharid(CHAR_ID_GUILD). You can also request another guild id given\nthe member's name with getcharid(CHAR_ID_GUILD, <player_name>).\n\nYou can use the following \"map names\" for special warping behavior:\nRandom:       All guild members are randomly warped in their current map\n              (as if they all used a fly wing)\nSavePointAll: All guild members are warped to their respective save point.\nSavePoint:    All guild members are warped to the save point of the\n              currently attached player (will fail if there's no player\n              attached).\n\nIf you specify a from_mapname, warpguild() will only affect those on that map.\n\nExample:\n\n\twarpguild(\"prontera\", x, y, Guild_ID);\n\twarpguild(\"prontera\", x, y, Guild_ID, \"payon\"); \/\/ warp member from Payon map only."
    },
    {
        "command": "warppartner(\"<map name>\", <x>, <y>)",
        "line": 4638,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*warppartner(\"<map name>\", <x>, <y>)\n\nThis function will find the invoking character's marriage partner, if any,\nand warp them to the map and coordinates given. Go kidnap that spouse. :)\nIt will return true upon success and false if the partner is not online,\nthe character is not married, or if there's no invoking character (no\nRID).\n0,0 will, as usual, normally translate to random coordinates."
    },
    {
        "command": "savepoint(\"<map name>\", <x>, <y>)",
        "line": 4649,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*savepoint(\"<map name>\", <x>, <y>)\n\nThis command saves where the invoking character will return to upon\n'return to save point', if dead or in some other cases. The two versions\nare equivalent. Map name, X coordinate and Y coordinate should be\nperfectly obvious. This ignores any and all map flags, and can make a\ncharacter respawn where no teleportation is otherwise possible.\n\n\tsavepoint(\"place\", 350, 75);"
    },
    {
        "command": "heal(<hp>, <sp>)",
        "line": 4661,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*heal(<hp>, <sp>)\n\nThis command will heal a set amount of HP and\/or SP on the invoking\ncharacter.\n\n\theal(30000, 0) \/\/ This will heal 30,000 HP\n\theal(0, 30000) \/\/ This will heal 30,000 SP\n\theal(300, 300) \/\/ This will heal 300 HP and 300 SP\n\nThis command just alters the hit points and spell points of the invoking\ncharacter and produces no other output whatsoever."
    },
    {
        "command": "itemheal(<hp>, <sp>)",
        "line": 4675,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*itemheal(<hp>, <sp>)\n\nThis command heals given relative amounts of HP and\/or SP on the invoking\ncharacter. Unlike heal, this command is intended for use in item scripts.\nIt applies potion-related bonuses, such as alchemist ranking, cards,\nstatus changes.\nIt also applies a sp\/vit-related bonus that is calculated by:\n\theal = heal*[(100+STATUS*2)\/100]\nSo if a player has 99 vit and the script is 'itemheal 5, 0':\n\theal(hp) = 5*[(100+99*2)\/100]\n\theal(hp) = 14.9\n\theal(hp) = 14\n\theal(sp) = 0\n\nWhen used inside an NPC script, potion-related bonuses are omitted.\n\nThere is also a nice example on using this with the rand() function, to\ngive you a random amount of healing.\n\n\t\/\/ If the player has 50 vit and no bonuses this will heal\n\t\/\/ anything from 200 to 300 HP and 5 SP\n\titemheal(rand(100, 150), 5);"
    },
    {
        "command": "percentheal(<hp>, <sp>)",
        "line": 4700,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*percentheal(<hp>, <sp>)\n\nThis command will heal the invoking character. It heals the character, but\nnot by a set value - it adds percent of their maximum HP\/SP.\n\n\tpercentheal(100, 0); \/\/ This will heal 100% HP\n\tpercentheal(0, 100); \/\/ This will heal 100% SP\n\tpercentheal(50, 50); \/\/ This will heal 50% HP and 50% SP\n\nSo the amount that this will heal will depend on the total amount of HP or\nSP you have maximum. Like heal(), this will not call up any animations or\neffects."
    },
    {
        "command": "recovery({<account id>})",
        "line": 4715,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*recovery({<account id>})\n*recovery(\"<map name>\"{, <x1>, <y1>, <x2>, <y2>})\n\nThis command will revive and restore full HP and SP to all characters currently\nconnected to the server. If an account id is supplied, it will instead only\naffect this character. If a map is supplied it will affect a whole map or area."
    },
    {
        "command": "jobchange(<job number>{, <upper flag>})",
        "line": 4724,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*jobchange(<job number>{, <upper flag>})\n\nThis command will change the job class of the invoking character.\n\n\tjobchange(Job_Swordman); \/\/ This would change your player into a Swordman\n\tjobchange(Job_Swordman_High); \/\/ This would change your player into a Swordman High\n\nThis command does work with numbers, but you can also use job names. The\nfull list of job names and the numbers they correspond to can be found in\n'doc\/constants.md'.\n\n'upper flag' can alternatively be used to specify the type of job one\nchanges to. For example, jobchange(Job_Swordman, 1); will change the\ncharacter to a high swordsman. The upper values are:"
    },
    {
        "command": "jobname(<job number>)",
        "line": 4749,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*jobname(<job number>)\n\nThis command retrieves the name of the given job using the names defined\nin messages.conf.\n\n\tmes(\"[Kid]\");\n\tmes(\"I never thought I'd met a \"+jobname(Class)+\" here of all places.\");\n\tclose();"
    },
    {
        "command": "eaclass({<job number>})",
        "line": 4760,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*eaclass({<job number>})\n\nThis commands returns the \"eA job-number\" corresponding to the given\nclass, and uses the invoking player's class if none is given. The eA\njob-number is also a class number system, but it's one that comes with\nconstants which make it easy to convert among classes. The command will\nreturn -1 if you pass it a job number which doesn't have an eA job-number\nequivalent.\n\n\t.@eac = eaclass();\n\tif ((.@eac&EAJ_BASEMASK) == EAJ_SWORDMAN)\n\t\tmes(\"Your base job is Swordman.\");\n\tif (.@eac&EAJL_UPPER)\n\t\tmes(\"You are a rebirth job.\");\n\tif ((.@eac&EAJ_UPPERMASK) == EAJ_SWORDMAN)\n\t\tmes(\"You must be a Swordman, Baby Swordman or High Swordman.\");\n\nFor more information on the eA Job System, see the docs\/ea_job_system.txt\nfile."
    },
    {
        "command": "roclass(<job number> {, <gender>})",
        "line": 4781,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*roclass(<job number> {, <gender>})\n\nDoes the opposite of eaclass(). That is, given an eA job-number, it returns\nthe corresponding RO class number. A gender is required because both Bard\nand Dancers share the same eA job-number (EAJ_BARDDANCER), and uses the\ninvoking player's gender if none is given (if no player is attached,\nmale will be used by default). The command will return -1 if there is no\nvalid class to represent the specified job (for example, if you try to get\nthe baby version of a Taekwon class).\n\n\t.@eac = eaclass();\n\t\/\/Check if class is already rebirth\n\tif (.@eac&EAJL_UPPER) {\n\t\tmes(\"You look strong.\");\n\t\tclose();\n\t}\n\t.@eac = roclass(.@eac|EAJL_UPPER);\n\t\/\/Check if class has a rebirth version\n\tif (.@eac != -1) {\n\t\tmes(\"Bet you can't wait to become a \"+jobname(.@eac)+\"!\");\n\t\tclose();\n\t}"
    },
    {
        "command": "changebase(<job ID number>)",
        "line": 4806,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*changebase(<job ID number>)\n\nThis command will change the appearance of the invoking character to that\nof a specified job class. Nothing but appearance will change.\n\nExamples:\n\n\t\/* This example is an item script in the item db *\/\n\t{\n\t\tId: 2338\n\t\tAegisName: \"Wedding_Dress\"\n\t\tName: \"Wedding Dress\"\n\t\tType: 5\n\t\tBuy: 43000\n\t\tWeight: 500\n\t\tJob: 0xFFFFFFFE\n\t\tLoc: 16\n\t\tScript: <\"\n\t\t\tbonus(bMdef, 15);\n\t\t\tchangebase(Job_Wedding);\n\t\t\">\n\t},\n\nchangebase(Job_Novice); \/\/ Changes player to Novice sprite.\n\nchangebase(Class); \/\/ Changes player back to default sprite."
    },
    {
        "command": "classchange(<view id>, <type> {, <char id>})",
        "line": 4835,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*classchange(<view id>, <type> {, <char id>})\n\nThis command is very ancient, it's origins are clouded in mystery.\nIt will send a 'display id change' packet to player with given char ID\nor to everyone in the immediate area of the NPC object if char ID is 0 or\nnot passed, which will make the NPC look like a different sprite, an NPC\nsprite ID, or a monster ID. This effect is not stored anywhere and will\nnot persist.\nNote that you can't send a Job sprite ID\n\ntype is not used and should always be 0."
    },
    {
        "command": "changesex()",
        "line": 4849,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*changesex()\n\nThis command will change the gender for the attached character's account.\nIf it was male, it will become female, if it was female, it will become\nmale. The change will be written to the character server, the player will\nreceive the message: \"Need disconnection to perform change-sex request...\"\nand the player will be immediately kicked to the login screen. When they\nlog back in, they will be the opposite sex.\n\nIf there are any Dancer\/Gypsy or Bard\/Clown characters on the account,\nthey will also have their skills reset upon 'changesex'."
    },
    {
        "command": "changecharsex()",
        "line": 4863,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*changecharsex()\n\nThis command is exactly same as changesex(), with an exception that,\ncharacter sex will be changed instead of account sex.\nRequires client 2014-10-22 or greater."
    },
    {
        "command": "getexp(<base xp>, <job xp>)",
        "line": 4871,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*getexp(<base xp>, <job xp>)\n\nThis command will give the invoking character a specified number of base\nand job experience points. Should be used as a quest reward. Negative values\nwon't work.\nIs subject to EXP bonuses and to the `quest_exp_rate` config option.\n\n\tgetexp(10000, 5000);\n\nYou can also assign directly to the parameters defined in\n'doc\/constants.md':\n\n\tBaseExp += 10000;\n\tJobExp += 5000;\n\nYou can also reduce the amount of experience points:\n\n\tBaseExp -= 10000;\n\nWhen setting the parameters directly no bonuses or config options are applied."
    },
    {
        "command": "setlook(<look type>, <look value>)",
        "line": 4894,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*setlook(<look type>, <look value>)\n*changelook(<look type>, <look value>)\n\n'setlook' will alter the look data for the invoking character. It is used\nmainly for changing the palette used on hair and clothes: you specify\nwhich look type you want to change, then the palette you want to use. Make\nsure you specify a palette number that exists\/is usable by the client you\nuse. 'changelook' works the same, but is only client side (it doesn't save\nthe look value).\n\n\t\/\/ This will change your hair(6), so that it uses palette 8, what ever\n\t\/\/ your palette 8 is, your hair will use that color.\n\n\tsetlook(LOOK_HAIR_COLOR, 8);\n\n\t\/\/ This will change your clothes(7), so they are using palette 1,\n\t\/\/ whatever your palette 1 is, your clothes will then use that set of\n\t\/\/ colors.\n\n\tsetlook(LOOK_CLOTHES_COLOR, 1);\n\nHere are the possible look types:\n\n  0 - LOOK_BASE           Base sprite\n  1 - LOOK_HAIR           Hairstyle\n  2 - LOOK_WEAPON         Weapon\n  3 - LOOK_HEAD_BOTTOM    Head bottom\n  4 - LOOK_HEAD_TOP       Head top\n  5 - LOOK_HEAD_MID       Head mid\n  6 - LOOK_HAIR_COLOR     Hair color\n  7 - LOOK_CLOTHES_COLOR  Clothes color\n  8 - LOOK_SHIELD         Shield\n  9 - LOOK_SHOES          Shoes\n 10 - LOOK_BODY           Body(N\/A)\n 11 - LOOK_FLOOR          FLOOR(N\/A)\n 12 - LOOK_ROBE           Robe\n 13 - LOOK_BODY2          Body style\n\nWhatever 'shoes' means is anyone's guess, ask Gravity - the client does\nnothing with this value. It still wants it from the server though, so it\nis kept, but normally doesn't do a thing.\n\nOnly the look data for hairstyle, hair color and clothes color are saved\nto the char server's database and will persist. The rest freely change as\nthe character puts on and removes equipment, changes maps, logs in and out\nand otherwise you should not expect to set them. In fact, messing with\nthem is generally hazardous, do it at your own risk, it is not tested\nwhat will this actually do - it won't cause database corruption and\nprobably won't cause a server crash, but it's easy to crash the client\nwith just about anything unusual.\n\nHowever, it might be an easy way to quickly check for empty view IDs for\nsprites, which is essential for making custom headgear.\n\nSince a lot of people have different palettes for hair and clothes, it's\nimpossible to tell you what all the color numbers are. If you want a\nserious example, there is a Stylist script inside the default Hercules\ninstallation that you can look at: 'npc\/custom\/stylist.txt'"
    },
    {
        "command": "pushpc(<direction>, <cells>)",
        "line": 4955,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*pushpc(<direction>, <cells>)\n\nThis command will push the currently attached player to given direction by\ngiven amount of square cells. Direction is the same as used when declaring\nNPCs, and can be specified by using one of the DIR_* constants\n(doc\/constants.md).\n\nThe knock-back is not restricted by items or map flags, only obstacles are\ntaken into account. If there is not enough space to perform the push (e.g.\ndue to a wall), the character is pushed only up to the obstacle.\n\n\t\/\/ pushes the character 5 cells in 3 o'clock direction from it's\n\t\/\/ current position.\n\tpushpc(DIR_EAST, 5);"
    },
    {
        "command": "montransform(<monster id>, <duration>{, <sc_type>{, <val1>{, <val2>{, <val3>{, <val4>}}}}})",
        "line": 4972,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*montransform(<monster id>, <duration>{, <sc_type>{, <val1>{, <val2>{, <val3>{, <val4>}}}}})\n*montransform(\"<monster name>\", <duration>{, <sc_type>{, <val1>{, <val2>{, <val3>{, <val4>}}}}})\n\nThis command can transform your character into monster and you can still\nuse all your skills like a normal character.\nCan only be removed when your killed or if you die or if duration is over.\n\nfor sc_type, val1, val2, val3, val4, see sc_start(), sc_start2(), sc_start4() commands."
    },
    {
        "command": "getitem(<item id>, <amount>{, <account ID>})",
        "line": 4987,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*getitem(<item id>, <amount>{, <account ID>})\n*getitem(\"<item name>\", <amount>{, <account ID>})\n\nThis command will give a specific amount of specified items to the target\ncharacter. If the character is not online, nothing will happen.\nIf <account ID> is not specified, items will be created in the invoking\ncharacter inventory instead.\n\nIn the first and most commonly used version of this command, items are\nreferred to by their database ID number found in 'db\/(pre-)re\/item_db.txt'.\n\n\tgetitem(Apple, 10); \/\/ The person will receive 10 apples\n\tgetitem(Old_Violet_Box, 1);  \/\/ The person will receive 1 Old Violet Box\n\nGiving an item ID of -1 will give a specified number of random items from\nthe list of those that fall out of Old Blue Box. Unlike in all other\ncases, these will be unidentified, if they turn out to be equipment. This\nis exactly what's written in the Old Blue Box's item script.\n\nOther negative IDs also correspond to other random item generating item\ntables:\n\nGiving an item ID of -2 will produce the effects of Old Violet Box.\nGiving an item ID of -3 will produce the effects of Old Card Album.\nGiving an item ID of -4 will produce the effects of Gift Box.\nGiving an item ID of -5 will produce the effects of Worn Out Scroll,\nwhich, in current Git, drops only Jellopies anyway.\n\nThis transaction is logged if the log script generated transactions option\nis enabled.\n\nYou may also create an item by it's name in the 'english name' field in\nthe item database:\n\n    getitem(\"Red_Potion\", 10); \/\/ Not recommended, use Red_Potion instead of \"Red_Potion\"\n\nWhich will do what you'd expect. If it can't find that name in the\ndatabase, apples will be created anyway.\n\nThis is used in pretty much all NPC scripts that have to do with items and\nquite a few item scripts. For more examples check just about any official\nscript."
    },
    {
        "command": "getitem2(<item id>, <amount>, <identify>, <refine>, <attribute>, <card1>, <card2>, <card3>, <card4>{, <account ID>})",
        "line": 5032,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*getitem2(<item id>, <amount>, <identify>, <refine>, <attribute>, <card1>, <card2>, <card3>, <card4>{, <account ID>})\n*getitem2(\"<item name>\", <amount>, <identify>, <refine>, <attribute>, <card1>, <card2>, <card3>, <card4>{, <account ID>})\n\nThis command will give an amount of specified items to the invoking\ncharacter. If an optional account ID is specified, and the target\ncharacter is currently online, items will be created in their inventory\ninstead. If they are not online, nothing will happen. It works essentially\nthe same as 'getitem' (it even works for negative ID numbers the same way)\nbut is a lot more flexible.\n\nThose parameters that are different from getitem() are:\n\nidentify\t- Whether you want the item to be identified (1) or not (0).\nrefine\t\t- For how many pluses will it be refined. It will not let you\n\t\t\t  refine an item higher than the max refine.\nattribute\t- Whether the item is broken (1) or not (0).\ncard1,2,3,4\t- If you want a card compound to it, place the card ID number\n\t\t\t  into the specific card slot.\n\nCard1-card4 values are also used to store name information for named\nitems, as well as the elemental property of weapons and armor. You can\ncreate a named item in this manner, however, if you just need a named\npiece of standard equipment, it is much easier to the 'getnameditem'\nfunction instead.\n\nYou will need to keep these values if you want to destroy and then\nperfectly recreate a named item, for this see getinventorylist().\n\nIf you still want to try creating a named item with this command because\n'getnameditem' won't do it for you cause it's too limited, you can do it\nlike this. Careful, minor magic ahead.\n\n\t\/\/ First, let's get an ID of a character who's name will be on the\n\t\/\/ item. Only an existing character's name may be there.\n\t\/\/ Let's assume our character is 'Adam' and find his ID.\n\n\t.@charid = getcharid(CHAR_ID_CHAR, \"Adam\");\n\n\t\/\/ Now we split the character ID number into two portions with a\n\t\/\/ binary shift operation. If you don't understand what this does,\n\t\/\/ just copy it.\n\n\t.@card3 = .@charid & 65535;\n\t.@card4 = .@charid >> 16;\n\n\t\/\/ If you're inscribing non-equipment, .@card1 must be 254.\n\t\/\/ Arrows are also not equipment. :)\n\t.@card1 = 254;\n\n\t\/\/ For named equipment, card2 means the Star Crumbs and elemental\n\t\/\/ crystals used to make this equipment. For everything else, it's 0.\n\n\t.@card2 = 0;\n\n\t\/\/ Now, let's give the character who invoked the script some\n\t\/\/ Adam's Apples:\n\n\tgetitem2(Apple, 1, 1, 0, 0, .@card1, .@card2, .@card3, .@card4);\n\nThis wasn't tested with all possible items, so I can't give any promises,\nexperiment first before relying on it.\n\nTo create equipment, continue this example it like this:\n\n\t\/\/ We've already have card3 and card4 loaded with correct\n\t\/\/ values so we'll just set up card1 and card2 with data\n\t\/\/ for an Ice Stiletto.\n\n\t\/\/ If you're inscribing equipment, .@card1 must be 255.\n\t.@card1 = 255;\n\n\t\/\/ That's the number of star crumbs in a weapon.\n\t.@sc = 2;\n\n\t\/\/ That's the number of elemental property of the weapon.\n\t.@ele = 1;\n\n\t\/\/ And that's the wacky formula that makes them into\n\t\/\/ a single number.\n\t.@card2 = .@ele+((.@sc*5)<<8);\n\n\t\/\/ That will make us an Adam's +2 VVS Ice Stiletto:\n\n\tgetitem2(Stiletto, 1, 1, 2, 0, .@card1, .@card2, .@card3, .@card4);\n\nExperiment with the number of star crumbs - I'm not certain just how much\nwill work most and what it depends on. The valid element numbers are:\n\n 1 - Ice, 2 - Earth 3 - Fire 4 - Wind.\n\nYou can, apparently, even create duplicates of the same pet egg with this\ncommand, creating a pet which is the same, but simultaneously exists in\ntwo eggs, and may hatch from either, although, I'm not sure what kind of a\nmess will this really cause."
    },
    {
        "command": "getitembound(<item id>, <amount>, <bound type>{, <account ID>})",
        "line": 5128,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*getitembound(<item id>, <amount>, <bound type>{, <account ID>})\n*getitembound(\"<item name>\", <amount>, <bound type>{, <account ID>})\n\nThis command behaves identically to getitem(), but the items created will be\nbound to the target character as specified by the bound type. All items created\nin this manner cannot be dropped, sold, vended, auctioned, or mailed, and in\nsome cases cannot be traded or stored.\n\nValid bound types are:\n 1 - Account Bound\n 2 - Guild Bound\n 3 - Party Bound\n 4 - Character Bound"
    },
    {
        "command": "getitembound2(<item id>, <amount>, <identify>, <refine>, <attribute>, <card1>, <card2>, <card3>, <card4>, <bound type>)",
        "line": 5144,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*getitembound2(<item id>, <amount>, <identify>, <refine>, <attribute>, <card1>, <card2>, <card3>, <card4>, <bound type>)\n*getitembound2(\"<item name>\", <amount>, <identify>, <refine>, <attribute>, <card1>, <card2>, <card3>, <card4>, <bound type>)\n\nThis command behaves identically to getitem2(), but the items created will be\nbound to the target character as specified by the bound type. All items created\nin this manner cannot be dropped, sold, vended, auctioned, or mailed, and in\nsome cases cannot be traded or stored.\n\nFor a list of bound types see getitembound()."
    },
    {
        "command": "countbound({<bound type>})",
        "line": 5156,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*countbound({<bound type>})\n\nThis function will return the number of bounded items in the character's\ninventory, and sets an array @bound_items[] containing all item IDs of the\ncounted items. If a bound type is specified, only those items will be counted.\n\nFor a list of bound types see 'getitembound'.\n\nExample:\n\tmes(\"You currently have \"+countbound()+\" bound items.\");\n\tnext();\n\tmes(\"The list of bounded items include:\");\n\tfor (.@i = 0; .@i < getarraysize(@bound_items); ++.@i)\n\t\tmes(getitemname(@bound_items[.@i]));\n\tclose();"
    },
    {
        "command": "checkbound(<item_id>{, <bound_type>{, <refine>{, <attribute>{, <card_1>{, <card_2>{, <card_3>{, <card_4>}}}}}}})",
        "line": 5174,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*checkbound(<item_id>{, <bound_type>{, <refine>{, <attribute>{, <card_1>{, <card_2>{, <card_3>{, <card_4>}}}}}}})\n\nThis command allows you to check whether or not the attached player has the specified bound item in their inventory.\nIf a bound type is not specified or a bound type of 0 is used, it will search the player's inventory for a bound item\nof any type, so long as the other parameters match. In all cases, this command will return the bound type of the\nitem found, or 0 if the specified item was not found.\n\nValid bound types are:\n 0 - All Bound types.\n 1 - Account Bound\n 2 - Guild Bound\n 3 - Party Bound\n 4 - Character Bound\n\nOptional Parameters:\n bound_type - checks to see if the item has the specified bound type.\n refine - checks to see if the item is refined to the given number.\n attribute - whether the item is broken (1) or not (0).\n card 1,2,3,4 - checks to see if the specified cards are compounded on the item as well.\n\nExample:\n\t\/\/ This will check if you have a bound (any type) 1205 (Cutter).\n\tif (checkbound(Cutter)) {\n\t\tmes(\"You have a bound Cutter\");\n\t} else {\n\t\tmes(\"You do not have a bound Cutter\");\n\t}\n\tclose();\n\n\t\/\/ This will also check if you have a bound (any type) 1205 (Cutter).\n\tif (checkbound(Cutter, 0)) {\n\t\tmes(\"You have a bound Cutter\");\n\t} else {\n\t\tmes(\"You do not have a bound Cutter\");\n\t}\n\tclose();\n\n\t\/\/ This will check if the player doesn't have a bound 1205 (Cutter).\n\tif (!checkbound(Cutter)) {\n\t\tmes(\"You do not have a bound Cutter\");\n\t} else {\n\t\tmes(\"You do have a bound Cutter\");\n\t}\n\tclose();\n\n\t\/\/ This will check if the item found, has a bound type of 2 (guild_bound)\n\tif (checkbound(Cutter) == 2) {\n\t\tmes(\"You have a guild_bound Cutter\");\n\t} else {\n\t\tmes(\"You do not have a guild_bound Cutter.\");\n\t}\n\tclose();\n\n\t\/\/ This will check if you have a 'guild_bound' +7 1205 (Cutter).\n\tif (checkbound(Cutter, 2, 7)) {\n\t\tmes(\"You have a +7 guild_bound Cutter.\");\n\t} else {\n\t\tmes(\"You don't have the required item.\");\n\t}\n\tclose();"
    },
    {
        "command": "getnameditem(<item id>, \"<character name>\")",
        "line": 5236,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*getnameditem(<item id>, \"<character name>\")\n*getnameditem(<item id>, <character ID>)\n*getnameditem(\"<item name>\", \"<character name>\")\n*getnameditem(\"<item name>\", <character ID>)\n\nCreate an item signed with the given character's name.\n\nThe command returns true when the item is created successfully, or false\nif it fails. Failure occurs when:"
    },
    {
        "command": "rentitem(<item id>, <time>)",
        "line": 5262,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*rentitem(<item id>, <time>)\n*rentitem(\"<item name>\", <time>)\n\nCreates a rental item in the attached character's inventory. The item will\nexpire in <time> seconds and be automatically deleted. When receiving a\nrental item, the character will receive a message in their chat window.\nThe character will also receive warning messages in their chat window\nbefore the item disappears.\n\nThis command can not be used to rent stackable items. Rental items cannot\nbe dropped, traded, sold to NPCs, or placed in guild storage (i.e. trade\nmask 75).\nNote: delitem() in an NPC script can still remove rental items."
    },
    {
        "command": "makeitem(<item id>, <amount>, \"<map name>\", <X>, <Y>)",
        "line": 5278,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*makeitem(<item id>, <amount>, \"<map name>\", <X>, <Y>)\n*makeitem(\"<item name>\", <amount>, \"<map name>\", <X>, <Y>)\n\nThis command will create an item lying around on a specified map in the\nspecified location.\n\n\titemid   - Found in 'db\/(pre-)re\/item_db.txt'\n\tamount   - Amount you want produced\n\tmap name - The map name\n\tX        - The X coordinate\n\tY        - The Y coordinate.\n\nThis item will still disappear just like any other dropped item. Like\ngetitem(), it also accepts an 'english name' field from the database and\ncreates apples if the name isn't found.\nIf the map name is given as \"this\", the map the invoking character is on\nwill be used."
    },
    {
        "command": "makeitem2(<item id>,<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,{\"<map name>\",<X>,<Y>,<range>})",
        "line": 5298,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*makeitem2(<item id>,<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,{\"<map name>\",<X>,<Y>,<range>})\n*makeitem2(\"<item name>\",<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,{\"<map name>\",<X>,<Y>,<range>})\n\nThis script command work like 'makeitem', but it has additional parameters\nto expand the usage of the scritp command.\n\nParameter List:\n\titemid\t\t- ID \/ Name of an item\n\tamount\t\t- Amount you want produced (Value: 1~MAX_AMOUNT)\n\t\t\t\t- if item type is Armor\/Wepaon\/PetEgg\/PetArmor, amount will be limit to 1\n\tidentify\t- Item to be identified (1) or not (0)\n\trefine\t\t- Refine count of item. (Value: 0 ~ MAX_REFINE)\n\tattribute\t- Item is broken (1) or not (0)\n\tcard1,2,3,4\t- Card IDs that compound on each slot\n\nOptional Parameter List:\n\tmap name\t- Map name (Default to attached player map)\n\tX,Y\t\t\t- The coordinate of item will be dropped\n\t\t\t\t\tIf value = 0, it's drop random across the map\n\t\t\t\t\tIf value = -1, its drop around player\n\trange\t\t- Range of item drop around player. (Value: 1 ~ battle_config.area_size, Default: 3)\n\t\t\t\t\tDefault value will be used if no player are attached to the script."
    },
    {
        "command": "cleanarea(\"<map name>\",<x1>,<y1>,<x2>,<y2>)",
        "line": 5323,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*cleanarea(\"<map name>\",<x1>,<y1>,<x2>,<y2>)\n*cleanmap(\"<map name>\")\n\nThese commands will clear all items lying on the ground on the specified\nmap, either within the x1\/y1-x2\/y2 rectangle or across the entire map."
    },
    {
        "command": "searchitem(<array name>, \"<item name>\")",
        "line": 5331,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*searchitem(<array name>, \"<item name>\")\n\nThis command will fill the given array with the ID of items whose name\nmatches the given one. It returns the number of items found. For\nperformance reasons, the results array is limited to 10 items.\n\n\tmes(\"What item are you looking for?\");\n\tinput(.@name$);\n\t.@qty = searchitem(.@matches[0], .@name$);\n\tmes(\"I found \"+.@qty+\" items:\");\n\tfor (.@i = 0; .@i < .@qty; ++.@i)\n\t\t\/\/Display name (eg: \"Apple[0]\")\n\t\tmes(getitemname(.@matches[.@i])+\"[\"+getitemslots(.@matches[.@i])+\"]\");"
    },
    {
        "command": "delitem(<item id>, <amount>{, <account ID>})",
        "line": 5347,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*delitem(<item id>, <amount>{, <account ID>})\n*delitem(\"<item name>\", <amount>{, <account ID>})\n\nThis command will remove a specified amount of items from the invoking or\ntarget character. Like all the item commands, it uses the item ID found\ninside 'db\/(pre-)re\/item_db.txt'.\n\n\tdelitem(Apple, 10); \/\/ The person will lose 10 apples\n\tdelitem(Old_Violet_Box, 1);  \/\/ The person will lose 1 Old Violet Box\n\nIt is always a good idea to check if the player actually has the items\nbefore you delete them. If you try to delete more items that the player\nhas, the player will lose the ones he\/she has and the script will be\nterminated with an error.\n\nLike getitem() this command will also accept an 'english name' field from\nthe database. If the name is not found, nothing will be deleted."
    },
    {
        "command": "delitem2(<item id>, <amount>, <identify>, <refine>, <attribute>, <card1>, <card2>, <card3>, <card4>{, <account ID>})",
        "line": 5367,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*delitem2(<item id>, <amount>, <identify>, <refine>, <attribute>, <card1>, <card2>, <card3>, <card4>{, <account ID>})\n*delitem2(\"<item name>\", <amount>, <identify>, <refine>, <attribute>, <card1>, <card2>, <card3>, <card4>{, <account ID>})\n\nThis command will remove a specified amount of items from the invoking or\ntarget character.\nCheck getitem2() to understand its expanded parameters."
    },
    {
        "command": "delitemidx(<index>{, <amount>{, <account id>}})",
        "line": 5376,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*delitemidx(<index>{, <amount>{, <account id>}})\n\nThis command will remove an item at the given inventory index. Unlike the\n'delitem()' counterpart, this doesn't check invalid Item ID, making it useful to remove\ninvalid item IDs in player's inventory.\n\nIf <amount> is not specified, this will remove all of the items at the specified index.\nNote that items with the 'ForceSerial' flag, not yet merged through 'mergeitem()', will only\nbe removed at the given index.\n\nThe only way to get the inventory index is by using 'getinventorylist()'. After deleting\nan item at the given index, that index can remain empty until the player relogs, so you\nshould recall 'getinventorylist()' again. If you try to delete an item at an invalid index, the\nscript will terminate with an error.\n\nThis command is also useful to remove rental\/bound items because 'delitem()'\ndoes not discriminate at choosing which item to remove.\n\nExample:\n\n\t\/\/ This will remove all invalid Item ID in player's inventory\n\tgetinventorylist();\n\tfor (.@i = 0; .@i < @inventorylist_count; ++.@i)\n\t\tif (getiteminfo(@inventorylist_id[.@i], ITEMINFO_TYPE) == -1)\n\t\t\tdelitemidx(@inventorylist_idx[.@i]);"
    },
    {
        "command": "countitem(<item id>)",
        "line": 5404,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*countitem(<item id>)\n*countitem(\"<item name>\")\n\nThis function will return the number of items for the specified item ID\nthat the invoking character has in the inventory.\n\n\tmes(\"[Item Checker]\");\n\tmes(\"Hmmm, it seems you have \"+countitem(Apple)+\" apples\");\n\tclose;\n\nLike getitem(), this function will also accept an 'english name' from the\ndatabase as an argument."
    },
    {
        "command": "countitem2(<item id>, <identify>, <refine>, <attribute>, <card1>, <card2>, <card3>, <card4>)",
        "line": 5419,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*countitem2(<item id>, <identify>, <refine>, <attribute>, <card1>, <card2>, <card3>, <card4>)\n*countitem2(\"<item name>\", <identify>, <refine>, <attribute>, <card1>, <card2>, <card3>, <card4>)\n\nExpanded version of countitem() function, used for created\/carded\/forged\nitems.\n\nThis function will return the number of items for the specified item ID\nand other parameters that the invoking character has in the inventory.\nCheck getitem2() to understand the arguments of the function."
    },
    {
        "command": "countnameditem(<item id>, \"<character name>\")",
        "line": 5431,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*countnameditem(<item id>, \"<character name>\")\n*countnameditem(<item id>, <character ID>)\n*countnameditem(\"<item name>\", \"<character name>\")\n*countnameditem(\"<item name>\", <character ID>)\n\nThis function will return the number of signed items for the specified item ID\nthat the invoking character has in their inventory.\n\n\tmes(\"[Item Checker]\");\n\tif (countnameditem(Apple) > 0) {\n\t\tmes(\"You have an apple with your name on it!\");\n\t} else {\n\t\tmes(\"You do not have an apple with your name on it.\");\n\t}\n\tnext();\n\tmes(\"[Item Checker]\");\n\tmesf(\"You have %d apples with John's name on it!\", countnameditem(Apple, \"John\"));\n\tclose();\n\nLike getnameditem(), this function will also accept an 'english name' from the\ndatabase as an argument."
    },
    {
        "command": "groupranditem(<item id>)",
        "line": 5455,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*groupranditem(<item id>)\n\nReturns the item_id of a random item picked from the item container specified. There\nare different item containers and they are specified in 'db\/(pre-)re\/item_group.conf'.\n\nExample:\n   getitem(groupranditem(Old_Blue_Box), 1);"
    },
    {
        "command": "getrandgroupitem(<item id>, <quantity>)",
        "line": 5465,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*getrandgroupitem(<item id>, <quantity>)\n\nSimilar to the above example, this command allows players to obtain the specified\nquantity of a random item from the container. The different containers\nare specified in 'db\/(pre-)re\/item_group.conf'.\n\nExample:\n   getrandgroupitem(Old_Blue_Box, 1);"
    },
    {
        "command": "packageitem({item_id})",
        "line": 5476,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*packageitem({item_id})\n\nThis command has only 1 param which is optional. If the package item_id is not provided, it\nwill try to use the item id from the item it is being used from (if called from an item script).\nIt runs a item package and grants the items accordingly to the attached player.\n\nExample:\n\n\/* This example is an item script from the item db *\/\n\t{\n\t\tId: 12477\n\t\tAegisName: \"Gift_Bundle\"\n\t\tName: \"Gift Bundle\"\n\t\tType: 2\n\t\tBuy: 0\n\t\tScript: <\" packageitem(); \">\n\t},"
    },
    {
        "command": "enable_items()",
        "line": 5496,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*enable_items()\n*disable_items()\n\nThese commands enable\/disable changing of equipments while an NPC is\nrunning. When disable_items() is run, equipments cannot be changed\nduring scripts until enable_items() is called or the script has\nterminated. To avoid possible exploits, when disable_items() is invoked,\nit will only disable changing equips while running that script in\nparticular. Note that if a different script also calls disable_items(),\nit will override the last call (so you may want to call this command at\nthe start of your script without assuming the effect is still in\neffect).\nIf 'item_enabled_npc' option is set to true in 'conf\/map\/battle\/items.conf' all\nNPC are allowing changing of equipment by default except for those have been\nset with 'disable_items'."
    },
    {
        "command": "itemskill(<skill id>, <skill level>, {flag})",
        "line": 5514,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*itemskill(<skill id>, <skill level>, {flag})\n*itemskill(\"<skill name>\", <skill level>, {flag})\n\nThis command meant for item scripts to replicate single-use skills in\nusable items. It will not work properly if there is a visible dialog\nwindow or menu.\nIf the skill is self or auto-targeting, it will be used immediately.\nOtherwise, a target cursor is shown.\nFlag is a optional param and, when present, the command will not check for\nskill requirements.\n\n\/\/ When Anodyne is used, it will cast Endure, Level 1, as if the actual skill\n\/\/ has been used from skill tree.\n\titemskill(SM_ENDURE, 1);"
    },
    {
        "command": "itemeffect(<item id>)",
        "line": 5531,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*itemeffect(<item id>)\n*itemeffect(\"<item name>\")\n*consumeitem is an alias of itemeffect (added for compatibility)\n\nThis command will run the item script of the specified item on the\ninvoking character. The character does not need to posess the item, and\nthe item will not be deleted. While this command is intended for usable\nitems, it will run for any item type."
    },
    {
        "command": "produce(<item level>)",
        "line": 5542,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*produce(<item level>)\n\nThis command will open a crafting window on the client connected to the\ninvoking character. The 'item level' is a number which determines what\nkind of a crafting window will pop-up.\n\nYou can see the full list of such item levels in 'db\/produce_db.txt' which\ndetermines what can actually be produced. The window will not be empty\nonly if the invoking character can actually produce the items of that type\nand has the appropriate raw materials in their inventory.\n\nThe success rate to produce the item is the same as the success rate of\nthe skill associated with the item level. If there is no skill id, the\nsuccess rate will be 50%.\n\nValid item levels are:\n\n 1   - Level 1 Weapons\n 2   - Level 2 Weapons\n 3   - Level 3 Weapons\n 21  - Blacksmith's Stones and Metals\n 22  - Alchemist's Potions, Holy Water, Assassin Cross's Deadly Poison\n 23  - Elemental Converters"
    },
    {
        "command": "cooking(<dish level>)",
        "line": 5568,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*cooking(<dish level>)\n\nThis command will open a produce window on the client connected to the\ninvoking character. The 'dish level' is the number which determines what\nkind of dish level you can produce. You can see the full list of dishes\nthat can be produced in 'db\/produce_db.txt'.\n\nThe window will be shown empty if the invoking character does not have\nenough of the required incredients to cook a dish.\n\nValid dish levels are:\n\n11 - Level 1 Dish\n12 - Level 2 Dish\n13 - Level 3 Dish\n14 - Level 4 Dish\n15 - Level 5 Dish\n16 - Level 6 Dish\n17 - Level 7 Dish\n18 - Level 8 Dish\n19 - Level 9 Dish\n20 - Level 10 Dish\n\nAlthough it's required to set a dish level, it doesn't matter if you set\nit to 1 and you want to cook a level 10 dish, as long as you got the\nrequired ingredients to cook the dish the command works."
    },
    {
        "command": "makerune(<% success bonus>)",
        "line": 5597,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*makerune(<% success bonus>)\n\nThis command will open a rune crafting window on the client connected to\nthe invoking character. Since this command is officially used in rune\nores, a bonus success rate must be specified (which adds to the base\nformula).\n\nYou can see the full list of runes that can be produced in\n'db\/produce_db.txt'. The window will not be empty only if the invoking\ncharacter can actually produce a rune and has the appropriate raw\nmaterials in their inventory."
    },
    {
        "command": "successremovecards(<equipment slot>)",
        "line": 5611,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*successremovecards(<equipment slot>)\n\nThis command will remove all cards from the item found in the specified\nequipment slot of the invoking character, create new card items and give\nthem to the character. If any cards were removed in this manner, it will\nalso show a success effect."
    },
    {
        "command": "failedremovecards(<equipment slot>, <type>)",
        "line": 5620,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*failedremovecards(<equipment slot>, <type>)\n\nThis command will remove all cards from the item found in the specified\nequipment slot of the invoking character. 'type' determines what happens\nto the item and the cards:\n\n 0 - will destroy both the item and the cards.\n 1 - will keep the item, but destroy the cards.\n 2 - will keep the cards, but destroy the item.\n\nWhatever the type is, it will also show a failure effect on screen."
    },
    {
        "command": "repair(<broken item number>)",
        "line": 5634,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*repair(<broken item number>)\n\nThis command repairs a broken piece of equipment, using the same list of\nbroken items as available through 'getbrokenid'.\n\nThe official scripts seem to use the repair command as a function instead:\n'repair(<number>)' but it returns nothing on the stack. Probably only\nValaris, who made it, can answer why is it so."
    },
    {
        "command": "repairall()",
        "line": 5645,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*repairall()\n\nThis command repairs all broken equipment in the attached player's\ninventory. A repair effect will be shown if any items are repaired, else\nthe command will end silently."
    },
    {
        "command": "successrefitem(<equipment slot>{, <upgrade_count>})",
        "line": 5653,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*successrefitem(<equipment slot>{, <upgrade_count>})\n\nThis command will refine an item in the specified equipment slot of the\ninvoking character by +1 (unless <upgrade_count> is specified).\nFor a list of equipment slots see 'getequipid'.\nThis command will also display a 'refine success'\neffect on the character and put appropriate messages into their chat\nwindow. It will also give the character fame points if a weapon reached\n+10 this way, even though these will only take effect for blacksmith who\nwill later forge a weapon."
    },
    {
        "command": "failedrefitem(<equipment slot>)",
        "line": 5666,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*failedrefitem(<equipment slot>)\n\nThis command will fail to refine an item in the specified equipment slot\nof the invoking character. The item will be destroyed. This will also\ndisplay a 'refine failure' effect on the character and put appropriate\nmessages into their chat window."
    },
    {
        "command": "downrefitem(<equipment slot>{, <downgrade_count>})",
        "line": 5675,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*downrefitem(<equipment slot>{, <downgrade_count>})\n\nThis command will downgrade an item by - 1 (unless optional <downgrade_count> is provided)\nin the specified equipment slot  of the invoking character.\nSo the item will not be destroyed unlike in the failedrefitem() script\ncommand. This will also display a 'refine failure' effect on the\ncharacter and put appropriate messages into their chat window."
    },
    {
        "command": "unequip(<equipment slot>)",
        "line": 5685,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*unequip(<equipment slot>)\n\nThis command will unequip whatever is currently equipped in the invoking\ncharacter's specified equipment slot. For a full list of possible\nequipment slots see 'getequipid'.\n\nIf an item occupies several equipment slots, it will get unequipped from\nall of them."
    },
    {
        "command": "clearitem()",
        "line": 5696,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*clearitem()\n\nThis command will destroy all items the invoking character has in their\ninventory (including equipped items). It will not affect anything else,\nlike storage or cart."
    },
    {
        "command": "equip(<item id>)",
        "line": 5704,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*equip(<item id>)\n*equip2(<item id>, <refine>, <attribute>, <card1>, <card2>, <card3>, <card4>)\n*autoequip(<item id>, <option>)\n\nThese commands are to equip a equipment on the attached character.\nThe equip function will equip the item ID given when the player has this\nitem in his\/her inventory, while the autoequip function will equip the\ngiven item ID when this is looted. The option parameter of the autoequip\nis 1 or 0, 1 to turn it on, and 0 to turn it off.\n\nExamples:\n\n\/\/This will equip a 1104 (falchion) on the character if this is in the\n\/\/inventory.\n\tequip(Falchion);\n\n\/\/This will equip a +10 1104 (falchion) on the character if this is in the\n\/\/inventory.\n\tequip2(Falchion, 10, 0, 0, 0, 0, 0);\n\n\/\/The invoked character will now automatically equip a falchion when it's\n\/\/looted.\n\tautoequip(Falchion, 1);\n\n\/\/The invoked character will no longer automatically equip a falchion.\n\tautoequip(Falchion, 0);"
    },
    {
        "command": "buyingstore(<slots>)",
        "line": 5733,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*buyingstore(<slots>)\n\nInvokes buying store preparation window like the skill 'Open Buying\nStore', without the item requirement. Amount of slots is limited by the\nserver to a maximum of 5 slots by default.\n\nExample:\n\n\t\/\/ Gives the player opportunity to buy 4 different kinds of items.\n\tbuyingstore(4);"
    },
    {
        "command": "searchstores(<uses>, <effect>);",
        "line": 5746,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*searchstores(<uses>, <effect>);\n\nInvokes the store search window, which allows to search for both vending\nand buying stores. Parameter uses indicates, how many searches can be\nstarted, before the window has to be reopened. Effect value affects what\nhappens when a result item is double-clicked and can be one of the\nfollowing:\n\n\t0 = Shows the store's position on the mini-map and highlights the shop\n\t\tsign with yellow color, when the store is on same map as the\n\t\tinvoking player.\n\t1 = Directly opens the shop, regardless of distance.\n\nExample:\n\n\t\/\/ Item Universal_Catalog_Gold (10 uses, effect: open shop)\n\tsearchstores(10, 1);"
    },
    {
        "command": "mergeitem();",
        "line": 5766,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*mergeitem();\n\nmergeitem() opens the item merge window,\nThe Item merge window shows all stackable item(same ItemID) with different\nserial, that can be merged into one stack.\nCheck sample: npc\/other\/item_merge.txt"
    },
    {
        "command": "delequip(<equipment slot>)",
        "line": 5775,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.1 - Player Item-Related Commands",
        "description": "*delequip(<equipment slot>)\n\nThis command will destroy whatever is currently equipped in the invoking\ncharacter's specified equipment slot. For a full list of possible equipment\nslots see getequipid().\n\nIt is always a good idea to check if the player actually has the item you want\nbefore you use this command. If you try to delete in a position that the player\nhas no gear, script will be terminated with an error."
    },
    {
        "command": "openstorage()",
        "line": 5791,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*openstorage()\n\nThis will open character's Kafra storage window on the client connected to\nthe invoking character. It can be used from any kind of NPC or item\nscript, not just limited to Kafra Staff.\n\nThe storage window opens regardless of whether there are open NPC dialogs\nor not, but it is preferred to close the dialog before displaying the\nstorage window, to avoid any disruption when both windows overlap.\n\n\tmes(\"I will now open your stash for you\");\n\tclose2();\n\topenstorage();\n\tend;\n\nThe mapflag 'nostorage' when set to type '2' (or 3), will not open the\naccount storage. Unless the character group has the permission 'bypass_nostorage'.\nIn case blocked by mapflag, returns 0."
    },
    {
        "command": "openmail()",
        "line": 5812,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*openmail()\n\nThis will open a character's Mail window on the client connected to the\ninvoking character.\n\n\tmes(\"Close this window to open your mail inbox.\");\n\tclose2();\n\topenmail();\n\tend;"
    },
    {
        "command": "openauction()",
        "line": 5824,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*openauction()\n\nThis will open the Auction window on the client connected to the invoking\ncharacter.\n\n\tmes(\"Close this window to open the Auction window.\");\n\tclose2();\n\topenauction();\n\tend;"
    },
    {
        "command": "dressroom({<mode>})",
        "line": 5836,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*dressroom({<mode>})\n\nThis command controls the dressing room for the attached player. If no <mode>\nis passed, DRESSROOM_OPEN is used by default.\n\nValid <mode> for dressroom() are:\n\tDRESSROOM_OPEN     opens the dressing room window\n\tDRESSROOM_CLOSE    closes the dressing room window\n\nExample:\n\tmes(\"Close this window to open the Dress Room window.\");\n\tclose2();\n\tdressroom(DRESSROOM_OPEN);\n\tend;"
    },
    {
        "command": "guildopenstorage()",
        "line": 5857,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.2 - Guild-Related Commands",
        "description": "*guildopenstorage()\n\nThis function works the same as openstorage() but will open a guild\nstorage window instead for the guild storage of the guild the invoking\ncharacter belongs to. This is a function because it returns a value - 0 if\nthe guild storage was opened successfully and 1 if it wasn't. (Notice,\nit's a ZERO upon success.)\nSince guild storage is only accessible to one character at one time, it\nmay fail if another character is accessing the guild storage at the same\ntime.\n\nThis will also fail and return 2 if the attached character does not belong\nto any guild.\n\nThe mapflag 'nogstorage' when set to type '2' (or 3), will not open the\nguild storage. Unless the character group has the permission 'bypass_nostorage'.\nIn case blocked by mapflag, returns 1."
    },
    {
        "command": "guildchangegm(<guild id>, <new master's name>)",
        "line": 5877,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.2 - Guild-Related Commands",
        "description": "*guildchangegm(<guild id>, <new master's name>)\n\nThis function will change the Guild Master of a guild. The ID is the\nguild's id, and the new guild master's name must be passed.\n\nReturns true on success, false otherwise."
    },
    {
        "command": "guildgetexp(<amount>)",
        "line": 5886,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.2 - Guild-Related Commands",
        "description": "*guildgetexp(<amount>)\n\nThis will give the specified amount of guild experience points to the\nguild the invoking character belongs to. It will silently fail if they do\nnot belong to any guild."
    },
    {
        "command": "guildskill(<skill id>, <level>)",
        "line": 5894,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.2 - Guild-Related Commands",
        "description": "*guildskill(<skill id>, <level>)\n*guildskill(\"<skill name>\", <level>)\n\nThis command will bump up the specified guild skill by the specified\nnumber of levels. This refers to the invoking character and will only work\nif the invoking character is a member of a guild AND it's guild master,\notherwise no failure message will be given and no error will occur, but\nnothing will happen. The full list of guild skills is available in\n'db\/(pre-)re\/skill_db.txt', these are all the GD_ skills at the end.\nIf a level higher than the maximum is given as parameter the skill will be\nleveled to the maximum and not above.\n\n\/\/ This would give your character's guild one level of Approval\n\/\/ (GD_APPROVAL ID 10000). Notice that if you try to add two levels of\n\/\/ Approval, or add Approval when the guild already has it, it will only\n\/\/ have one level of Approval afterwards.\n\tguildskill(GD_APPROVAL, 1);\n\nYou might want to make a quest for getting a certain guild skill, make it\nhard enough that all the guild needs to help or something. Doing this for\nthe Glory of the Guild skill, which allows your guild to use an emblem, is\na good idea for a fun quest. (Wasting a level point on that is really\nannoying :D)"
    },
    {
        "command": "resetlvl(<action type>)",
        "line": 5924,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*resetlvl(<action type>)\n\nThis is a character reset command, meant mostly for rebirth script\nsupporting Advanced jobs, which will reset the invoking character's stats\nand level depending on the action type given. Valid action types are:\n\n 1 - Base level 1, Job level 1, 0 skill points, 0 base exp, 0 job exp,\n     wipes the status effects (only the ones settable by 'setoption'),\n     sets all stats to 1. If the new job is 'Novice High', give 100 status\n     points, give First Aid and Play Dead skills.\n 2 - Base level 1, Job level 1, 0 skill points, 0 base exp, 0 job exp.\n     Skills and attribute values are not altered.\n 3 - Base level 1, base exp 0. Nothing else is changed.\n 4 - Job level 1, job exp 0. Nothing else is changed.\n\nIn all cases everything the character has on will be unequipped."
    },
    {
        "command": "resetstatus()",
        "line": 5943,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*resetstatus()\n\nThis is a character reset command, which will reset the stats on the\ninvoking character and give back all the stat points used to raise them\npreviously. Nothing will happen to any other numbers about the character.\n\nUsed in reset NPC's (duh!)."
    },
    {
        "command": "resetskill()",
        "line": 5953,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*resetskill()\n\nThis command takes off all the skill points on the invoking character, so\nthey only have Basic Skill blanked out (lvl 0) left, and returns the\npoints for them to spend again. Nothing else will change but the skills.\nQuest skills will also reset if 'quest_skill_reset' option is set to true in\n'conf\/map\/battle.conf'. If the 'quest_skill_learn' option is set in there, the\npoints in the quest skills will also count towards the total.\n\nUsed in reset NPC's (duh!)."
    },
    {
        "command": "sc_start(<effect type>, <ticks>, <value 1>{, <rate>, <flag>{, <GID>}})",
        "line": 5966,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*sc_start(<effect type>, <ticks>, <value 1>{, <rate>, <flag>{, <GID>}})\n*sc_start2(<effect type>, <ticks>, <value 1>, <value 2>{, <rate>, <flag>{, <GID>}})\n*sc_start4(<effect type>, <ticks>, <value 1>, <value 2>, <value 3>, <value 4>{, <rate>, <flag>{, <GID>}})\n*sc_end(<effect type>{, <GID>})\n\nThese commands will bestow a status effect on a character.\n\nThe <effect type> determines which status is invoked. This can be either a number\nor constant, with the common statuses (mostly negative) found in\n'doc\/constants.md' under 'Status Changes'. A full list is located in\n'src\/map\/status.h', though they are not currently documented.\n\nThe duration of the status is given in <ticks>, or milleseconds.\n\nCertain status changes take an additional parameter <value 1>, which typically\nmodifies player stats by the given number or percentage. This differs for each\nstatus, and is sometimes zero.\n\nOptional value <rate> is the chance that the status will be invoked (10000 = 1%).\nThis is used primarily in item scripts. When used in an NPC script, a flag MUST\nbe defined for the rate to work.\n\nOptional value <flag> is how the status change start will be handled (a bitmask).\n SCFLAG_NONE      = 0x00: No special behavior.\n SCFLAG_NOAVOID   = 0x01: Status change cannot be avoided.\n SCFLAG_FIXEDTICK = 0x02: Tick cannot be reduced by stats (default).\n SCFLAG_LOADED    = 0x04: sc_data was loaded, no value will be altered.\n SCFLAG_FIXEDRATE = 0x08: Rate cannot be reduced.\n SCFLAG_NOICON    = 0x10: Status icon (SI) won't be shown.\n\nIf a <GID> is given, the status change will be invoked on the specified character\ninstead of the one attached to the script. This can only be defined after setting\na rate and flag.\n\nsc_start2() and sc_start4() allow extra parameters to be passed, and are used only\nfor effects that require them. The meaning of the extra values vary depending on the\neffect type.\n\nsc_end() will remove a specified status effect. If SC_ALL (-1) is given, it will\nperform a complete removal of all statuses (although permanent ones will re-apply).\n\nExamples:\n\t\/\/ This will poison the invoking character for 10 minutes at 50% chance.\n\tsc_start(SC_POISON, 600000, 0, 5000);\n\n\t\/\/ This will bestow the effect of Level 10 Blessing.\n\tsc_start(SC_BLESSING, 240000, 10);\n\n\t\/\/ This will end the Freezing status for the invoking character.\n\tsc_end(SC_FREEZE);\n\nNote: to use SC_NOCHAT you should alter Manner\n\tManner = -5;\t\/\/ Will mute a user for 5 minutes\n\tManner = 0;\t\/\/ Will unmute a user\n\tManner = 5;\t\/\/ Will unmute a user and prevent the next use of 'Manner'"
    },
    {
        "command": "getstatus(<effect type>{, <type>})",
        "line": 6024,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*getstatus(<effect type>{, <type>})\n\nRetrieve information about a specific status effect when called. Depending\non <type> specified the function will return different information.\n\nPossible <type> values:\n\t- 0 or undefined: whether the status is active\n\t- 1: the val1 of the status\n\t- 2: the val2 of the status\n\t- 3: the val3 of the status\n\t- 4: the val4 of the status\n\t- 5: the amount of time in milliseconds that the status has remaining\n\nIf <type> is not defined or is set to 0, then the script function will\neither return 1 if the status is active, or 0 if the status is not active.\nIf the status is not active when any of the <type> fields are provided,\nthis script function will always return 0."
    },
    {
        "command": "skilleffect(<skill id>, <number>)",
        "line": 6044,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*skilleffect(<skill id>, <number>)\n*skilleffect(\"<skill name>\", <number>)\n\nThis command displays visual and aural effects of given skill on currently\nattached character. The number parameter is for skill whose visual effect\ninvolves displaying of a number (healing or damaging). Note that this\ncommand will not actually use the skill: it is intended for scripts which\nsimulate skill usage by the NPC, such as buffs, by setting appropriate\nstatus and displaying the skill's effect.\n\n\tmes(\"Be blessed!\");\n\t\/\/ Heal of 2000 HP\n\theal(2000, 0);\n\tskilleffect(AL_HEAL, 2000);\n\t\/\/ Blessing Level 10\n\tsc_start(SC_BLESSING, 240000, 10);\n\tskilleffect(AL_BLESSING, 0);\n\t\/\/ Increase AGI Level 5\n\tsc_start(SC_INC_AGI, 140000, 5);\n\tskilleffect(AL_INCAGI, 0);\n\nThis will heal the character with 2000 HP, buff it with Blessing Lv 10 and\nIncrease AGI Lv 5, and display appropriate effects."
    },
    {
        "command": "npcskilleffect(<skill id>, <number>, <x>, <y>)",
        "line": 6070,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*npcskilleffect(<skill id>, <number>, <x>, <y>)\n*npcskilleffect(\"<skill name>\", <number>, <x>, <y>)\n\nThis command behaves identically to skilleffect(), however, the effect\nwill not be centered on the invoking character's sprite, nor on the NPC\nsprite, if any, but will be centered at map coordinates given on the same\nmap as the invoking character."
    },
    {
        "command": "specialeffect(<effect number>{, <send_target>{, <unit id>{, <account id>}}})",
        "line": 6080,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*specialeffect(<effect number>{, <send_target>{, <unit id>{, <account id>}}})\n*specialeffect(<effect number>{, <send_target>{, \"<NPC Name>\"{, <account id>}}})\n\nThis command will display special effect with the given number, centered\non the specified NPCs coordinates, if any. For a full list of special\neffect numbers known see 'doc\/effect_list.txt'. Some effect numbers are\nknown not to work in some client releases. (Notably, rain is absent from\nany client executables released after April 2005.)\n\n<NPC name> parameter will display <effect number> on another NPC. If the\nNPC specified does not exist, the command will do nothing. When specifying\nan NPC, <send_target> must be specified when specifying an <NPC Name>,\nspecifying AREA will retain the default behavior of the command.\n\n<unit id> behaves like <NPC Name> except it can display the effect on\nany kind of unit, not just NPC, by specifying its GID.\n\nWhen <send_target> is SELF you can specify which player to send the effect\nto by passing <account id>.\n\nExample usage:\n\n\t\/\/ To make a NPC do an effect and show it to everyone:\n\tspecialeffect(EF_HIT1, AREA, \"John Doe#1\");\n\n\t\/\/ To make a player do an effect and show it to everyone:\n\tspecialeffect(EF_HIT1, AREA, getcharid(CHAR_ID_ACCOUNT, \"player\"));\n\n\t\/\/ To make a NPC do an effect and show it only to the attached player:\n\tspecialeffect(EF_HIT1, SELF, \"John Doe#1\");\n\n\t\/\/ To make a NPC do an effect and show it only to another player:\n\tspecialeffect(EF_HIT1, SELF, \"John Doe#1\", getcharid(CHAR_ID_ACCOUNT, \"player\"));"
    },
    {
        "command": "removespecialeffect(<effect number>{, <send_target>{, <unit id>{, <account id>}}})",
        "line": 6116,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*removespecialeffect(<effect number>{, <send_target>{, <unit id>{, <account id>}}})\n*removespecialeffect(<effect number>{, <send_target>{, \"<NPC Name>\"{, <account id>}}})\n\nWorks for:\n\tmain client from version 2018-10-02\n\tre   client from version 2018-10-02\nThis command will remove special effect. All parameters same with specialeffect.\nExamples and detailed explanation about parameters see in specialeffect."
    },
    {
        "command": "specialeffect2(<effect number>{, <send_target>{, \"<Player Name>\"}})",
        "line": 6127,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*specialeffect2(<effect number>{, <send_target>{, \"<Player Name>\"}})\n\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n    @ \/!\\ This command is deprecated @\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\nThis command behaves identically to the specialeffect(), but the effect\nwill be centered on the invoking character's sprite.\n\nThis command is deprecated and it should not be used in new scripts, as it is\nlikely to be removed at a later time. Please use specialeffect instead,\nie: specialeffect(<effect number>, <send_target>, playerattached())"
    },
    {
        "command": "statusup(<stat>)",
        "line": 6142,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*statusup(<stat>)\n\nThis command will bump a specified stat of the invoking character up by\none permanently using status points to do so, if there aren't enough to perform\nthe change nothing will happen.\nStats are to be given as number, but you can use these constants to replace them:\n\nbStr -  Strength\nbVit -  Vitality\nbInt -  Intelligence\nbAgi -  Agility\nbDex -  Dexterity\nbLuk -  Luck"
    },
    {
        "command": "statusup2(<stat>, <amount>)",
        "line": 6158,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*statusup2(<stat>, <amount>)\n\nThis command will bump a specified stat of the invoking character up by\nthe specified amount permanently without using status points.\nAmount can be negative. See statusup().\n\n\/\/ This will decrease a character's Vit forever.\n\tstatusup(bVit, -1);"
    },
    {
        "command": "needed_status_point(<type>, <val>);",
        "line": 6169,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*needed_status_point(<type>, <val>);\n\nReturns the number of stat points needed to change the specified stat <type> by <val>.\nIf <val> is negative, returns the number of stat points that would be needed to\nraise the specified stat from (current value - <val>) to current value.\n\nList of <type>:\nbStr -  Strength\nbVit -  Vitality\nbInt -  Intelligence\nbAgi -  Agility\nbDex -  Dexterity\nbLuk -  Luck"
    },
    {
        "command": "bonus(<bonus type>, <val1>)",
        "line": 6185,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*bonus(<bonus type>, <val1>)\n*bonus2(<bonus type>, <val1>, <val2>)\n*bonus3(<bonus type>, <val1>, <val2>, <val3>)\n*bonus4(<bonus type>, <val1>, <val2>, <val3>, <val4>)\n*bonus5(<bonus type>, <val1>, <val2>, <val3>, <val4>, <val5>)\n\nThese commands are meant to be used in item scripts. They will probably\nwork outside item scripts, but the bonus will not persist for long. They,\nas expected, refer only to an invoking character.\n\nYou can find the full list of possible bonuses and which command to use\nfor each kind in 'doc\/item_bonus.txt'."
    },
    {
        "command": "autobonus(<bonus script>, <rate>, <duration>{, <flag>, {<other script>}})",
        "line": 6200,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*autobonus(<bonus script>, <rate>, <duration>{, <flag>, {<other script>}})\n*autobonus2(<bonus script>, <rate>, <duration>{, <flag>, {<other script>}})\n*autobonus3(<bonus script>, <rate>, <duration>, <skill id>, {<other script>})\n*autobonus3(<bonus script>, <rate>, <duration>, \"<skill name>\", {<other script>})\n\nThese commands are meant to be used in item scripts. They will probably\nwork outside item scripts, but the bonus will not persist for long. They,\nas expected, refer only to an invoking character.\n\nWhat these commands do is 'attach' a script to the player which will get\nexecuted on attack (or when attacked in the case of autobonus2()).\n\nRate is the trigger rate of the script (1000 = 100%).\n\nDuration is the time that the bonus will last for since the script has\ntriggered.\n\nSkill ID\/skill name the skill which will be used as trigger to start the\nbonus (for autobonus3()).\n\nThe optional argument 'flag' is used to classify the type of attack where\nthe script can trigger (it shares the same flags as the bAutoSpell bonus\nscript):\n\nRange criteria:\n\tBF_SHORT:  Trigger on melee attack\n\tBF_LONG:   Trigger on ranged attack\n\tDefault:   BF_SHORT+BF_LONG\nAttack type criteria:\n\tBF_WEAPON: Trigger on weapon skills\n\tBF_MAGIC:  Trigger on magic skills\n\tBF_MISC:   Trigger on misc skills\n\tDefault:   BF_WEAPON\nSkill criteria:\n\tBF_NORMAL: Trigger on normal attacks\n\tBF_SKILL:  Trigger on skills\n\tdefault:   If the attack type is BF_WEAPON (only) BF_NORMAL is used,\n\t\t       otherwise BF_SKILL+BF_NORMAL is used.\n\nThe difference between the optional argument 'other script' and the 'bonus\nscript' is that, the former one triggers only when attacking (or attacked)\nand the latter one runs on status calculation as well, which makes sure,\nwithin the duration, the \"bonus\" that get lost on status calculation is\nrestored. So, 'bonus script' is technically supposed to accept \"bonus\"\ncommand only. And we usually use 'other script' to show visual effects.\n\nIn all cases, when the script triggers, the attached player will be the\none who holds the bonus. There is currently no way of knowing within this\nscript who was the other character (the attacker in autobonus2(), or the\ntarget in autobonus() and autobonus3()).\n\n\/\/Grants a 1% chance of starting the state \"all stats +10\" for 10 seconds\n\/\/when using weapon or misc attacks (both melee and ranged skills) and\n\/\/shows a special effect when the bonus is active.\n\tautobonus(\"{ bonus(bAllStats, 10); }\", 10, 10000, BF_WEAPON|BF_MISC, \"{ specialeffect(EF_FIRESPLASHHIT, AREA, playerattached()); }\");"
    },
    {
        "command": "skill(<skill id>, <level>{, <flag>})",
        "line": 6258,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*skill(<skill id>, <level>{, <flag>})\n*skill(\"<skill name>\", <level>{, <flag>})\n*addtoskill(<skill id>, <level>{, <flag>})\n*addtoskill(\"<skill name>\", <level>{, <flag>})\n\nThese commands will give the invoking character a specified skill. This is\nalso used for item scripts.\n\nLevel is obvious. Skill id is the ID number of the skill in question as\nper 'db\/(pre-)re\/skill_db.txt'. It is not known for certain whether this\ncan be used to give a character a monster's skill, but you're welcome to\ntry with the numbers given in 'db\/(pre-)re\/mob_skill_db.txt'.\n\nFlag is 0 if the skill is given permanently (will get written with the\ncharacter data) or 1 if it is temporary (will be lost eventually, this is\nmeant for card item scripts usage.).  The flag parameter is optional, and\ndefaults to 1 in 'skill' and to 2 in 'addtoskill'.\n\nFlag 2 means that the level parameter is to be interpreted as a stackable\nadditional bonus to the skill level. If the character did not have that\nskill previously, they will now at 0+the level given.\n\n\/\/ This will permanently give the character Stone Throw\n\/\/ (TF_THROWSTONE, 152), at level 1.\n    skill(TF_THROWSTONE, 1, 0);\n\nFlag 3 is the same as flag 0 in that it saves to the database. However,\nthese skills are ignored when any action is taken that adjusts the skill\ntree (reset\/job change)."
    },
    {
        "command": "nude()",
        "line": 6290,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*nude()\n\nThis command will unequip anything equipped on the invoking character.\n\nIt is not required to do this when changing jobs since jobchange() will\nunequip everything not equippable by the new job class anyway."
    },
    {
        "command": "disguise(<Monster ID>)",
        "line": 6299,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*disguise(<Monster ID>)\n*undisguise()\n\nThis command disguises the current player with a monster sprite.\nThe disguise lasts until undisguise() is issued or the player logs out.\n\nExample:\n\ndisguise(PORING); \/\/ Disguise character as a Poring.\nnext();\nundisguise(); \/\/ Return to normal character sprite."
    },
    {
        "command": "marriage(\"<spouse name>\")",
        "line": 6317,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.3 - Marriage-Related Commands",
        "description": "*marriage(\"<spouse name>\")\n\nThis function will marry two characters, the invoking character and the\none referred to by name given, together, setting them up as each other's\nmarriage partner. No second function call has to be issued (in current Git\nat least) to make sure the marriage works both ways. The function returns\ntrue upon success, or false if the marriage could not be completed, either\nbecause the other character wasn't found or because one of the two\ncharacters is already married.\n\nThis will do nothing else for the marriage except setting up the spouse ID\nfor both of these characters. No rings will be given and no effects will\nbe shown."
    },
    {
        "command": "wedding()",
        "line": 6333,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.3 - Marriage-Related Commands",
        "description": "*wedding()\n\nThis command will call up wedding effects - the music and confetti -\ncentered on the invoking character. Example can be found in the wedding\nscript."
    },
    {
        "command": "divorce()",
        "line": 6341,
        "category": "4 - Player-Related Commands",
        "sub_category": "4.3 - Marriage-Related Commands",
        "description": "*divorce()\n\nThis function will \"un-marry\" the invoking character from whoever they\nwere married to. Both will no longer be each other's marriage partner,\n(at least in current Git, which prevents the cases of multi-spouse\nproblems). It will return true upon success or false if the character\nwas not married at all.\n\nThis function will also destroy both wedding rings and send a message to\nboth players, telling them they are now divorced."
    },
    {
        "command": "pcfollow(<id>, <target id>)",
        "line": 6358,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*pcfollow(<id>, <target id>)\n*pcstopfollow(<id>)\n\nMakes a character follow or stop following someone. This command does the\nsame as the @follow command. The main difference is that @follow can use\ncharacter names, and this commands needs the Account ID for the target.\n\nExamples:\n\n\/\/ This will make Aaron follow Bullah, when both of these characters are\n\/\/ online.\n\tpcfollow(getcharid(CHAR_ID_ACCOUNT, \"Aaron\"), getcharid(CHAR_ID_ACCOUNT, \"Bullah\"));\n\n\/\/ Makes Aaron stop following whoever he is following.\n\tpcstopfollow(getcharid(CHAR_ID_ACCOUNT, \"Aaron\"));"
    },
    {
        "command": "pcblockmove(<account id>, <option>)",
        "line": 6376,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*pcblockmove(<account id>, <option>)\n\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n    @ \/!\\ This command is deprecated @\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\nPrevents the player from moving when the option != 0, and 0 enables the\nplayer to move again. The player has to be the account ID of a character,\nand will run for the attached player if zero is supplied.\n\nExamples:\n\n\/\/ Prevents the current char from moving away.\n\tpcblockmove(getcharid(CHAR_ID_ACCOUNT), true);\n\n\/\/ Enables the current char to move again.\n\tpcblockmove(getcharid(CHAR_ID_ACCOUNT), false);"
    },
    {
        "command": "setpcblock(<type>,<option>)",
        "line": 6396,
        "category": "4 - Player-Related Commands",
        "sub_category": "",
        "description": "*setpcblock(<type>,<option>)\n*checkpcblock()\n\nPrevents the player from doing the following action.\n\nFor setpcblock, when the <option> is true(1) will block them, and false(0)\nwill allow those actions again.\n\nThe checkpcblock command returned value is a bit mask of the currently\nenabled block flags (or PCBLOCK_NONE when none is set).\n\nThe <type> listed are a bit mask of the following:\n\tPCBLOCK_NONE (only used by checkpcblock)\n\tPCBLOCK_MOVE\n\tPCBLOCK_ATTACK\n\tPCBLOCK_SKILL\n\tPCBLOCK_USEITEM\n\tPCBLOCK_CHAT\n\tPCBLOCK_IMMUNE\n\tPCBLOCK_SITSTAND\n\tPCBLOCK_COMMANDS\n\nExamples:\n\n\/\/ Make the current attached player invulnerable, same as @monsterignore\n\tsetpcblock(PCBLOCK_IMMUNE, true);\n\n\/\/ Prevents the current char from attacking or using skills\n\tsetpcblock(PCBLOCK_ATTACK|PCBLOCK_SKILL, true);\n\n\/\/ Re-enables attack, skills and item use\n\tsetpcblock(PCBLOCK_ATTACK|PCBLOCK_SKILL|PCBLOCK_USEITEM, false);\n\n\/\/ checkpcblock related checks\n\tif ((checkpcblock() & PCBLOCK_IMMUNE) != 0)\n\t\tmes \"You are invulnerable!\";\n\n\tif ((checkpcblock() & (PCBLOCK_MOVE|PCBLOCK_SITSTAND)) == (PCBLOCK_MOVE|PCBLOCK_SITSTAND))\n\t\tmes \"You can't walk or sit\";\n\n\tif ((checkpcblock() & (PCBLOCK_ATTACK|PCBLOCK_SKILL)) == PCBLOCK_NONE)\n\t\tmes \"You can attack and use skills\";\n\n\tif ((checkpcblock() & PCBLOCK_CHAT) == PCBLOCK_NONE)\n\t\tmes \"You can't chat\";"
    },
    {
        "command": "monster(\"<map name>\", <x>, <y>, \"<name to show>\", <mob id>, <amount>{, \"<event label>\"{, <size>{, <ai>}}})",
        "line": 6454,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*monster(\"<map name>\", <x>, <y>, \"<name to show>\", <mob id>, <amount>{, \"<event label>\"{, <size>{, <ai>}}})\n*areamonster(\"<map name>\", <x1>, <y1>, <x2>, <y2>, \"<name to show>\", <mob id>, <amount>{, \"<event label>\"{, <size>{, <ai>}}})\n\nThis command will spawn a monster on the specified coordinates on the\nspecified map. If the script is invoked by a character, a special map\nname, \"this\", will be recognized to mean the name of the map the invoking\ncharacter is located at. This command works fine in the item scripts.\n\nThe same command arguments mean the same things as described above in the\nbeginning of this document when talking about permanent monster spawns.\nMonsters spawned in this manner will not respawn upon being killed.\n\nUnlike the permanent monster spawns, if the mob id is -1, a random monster\nwill be picked from the entire database according to the rules configured\nin the server for dead branches. This will work for all other kinds of\nnon-permanent monster spawns.\n\nThe only very special thing about this command is an event label, which is\nan optional parameter. This label is written like\n'<NPC object name>::<label name>' and upon the monster being killed, it\nwill execute the script inside of the specified NPC object starting from\nthe label given. The RID of the player attached at this execution will be\nthe RID of the killing character.\n\n<size> can be:\n\tSize_Medium = medium (default)\n\tSize_Small = small\n\tSize_Large = big\n\n<ai> can be:\n\t0 = none (default)\n\t1 = attack\/friendly\n\t2 = sphere (Alchemist skill)\n\t3 = flora (Alchemist skill)\n\t4 = zanzou (Kagerou\/Oboro skill)\n\n\tmonster(\"place\", 60, 100, \"Poring\", PORING, 1, \"NPCNAME::OnLabel\");\n\nThe coordinates of 0,0 will spawn the monster on a random place on the\nmap. Both 'monster' and 'areamonster' return the GID of the monster\nspawned if there was ONLY ONE monster to be spawned. This is useful for\ncontrolling each of the spawned mobs with the unit* commands shown below.\nFor example:\n\n\t\/\/ We'll make a poring which will automatically attack invoking player:\n\t.@mobGID = monster(\"prontera\", 150, 150, \"Poring\", PORING, 1); \/\/ PORING is defined in the mob db and its value is 1002\n\tunitattack(.@mobGID, getcharid(CHAR_ID_ACCOUNT)); \/\/ Attacker GID, attacked GID\n\nThe way you can get the GID of more than only one monster is looping\nthrough all the summons to get their individual GIDs and do whatever you\nwant with them. For example:\n\n\t\/\/ We want to summon .mobnumber porings which will give us a kiss\n\tfor (.@i = 0; .@i < .mobnumber; ++.@i) {\n\t\t.@mobGID = monster(\"map\", .x, .y, \"Kisser Poring\", PORING, 1);\n\t\tunitemote(.@mobGID, e_kis);\n\t}\n\nRefer to the unit* commands below.\n\nThe areamonster() command works much like the monster() command and is not\nsignificantly different, but spawns the monsters within a square defined\nby x1\/y1-x2\/y2.\n\nSimple monster killing script:\n\n\t<NPC object definition. Let's assume you called him NPCNAME.>\n\t\tmes(\"[Summon Man]\");\n\t\tmes(\"Want to start the kill?\");\n\t\tnext();\n\t\tif (select(\"Yes\", \"No\") != 1) {\n\t\t\tmes(\"[Summon Man]\");\n\t\t\tmes(\"Come back later\");\n\t\t\tclose();\n\t\t}\n\t\tmonster(\"prontera\", 0, 0, \"Quest Poring\", PORING, 10, \"NPCNAME::OnPoringKilled\");\n\t\t\/\/ By using 0,0 it will spawn them in a random place.\n\t\tmes(\"[Summon Man]\");\n\t\tmes(\"Now go and kill all the Poring I summoned\");\n\t\t\/\/ He summoned ten.\n\t\tclose();\n\tOnPoringKilled:\n\t\t++$poring_killed;\n\t\tif ($poring_killed == 10) {\n\t\t\tannounce(\"Summon Man: Well done all the poring are dead\", bc_self);\n\t\t\t$poring_killed = 0;\n\t\t}\n\t\tend;\n\nFor more examples see just about any official 2-1 or 2-2 job quest script."
    },
    {
        "command": "areamobuseskill(\"<map name>\", <x>, <y>, <range>, <mob id>, <skill id>, <skill level>, <cast time>, <cancelable>, <emotion>, <target type>)",
        "line": 6547,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*areamobuseskill(\"<map name>\", <x>, <y>, <range>, <mob id>, <skill id>, <skill level>, <cast time>, <cancelable>, <emotion>, <target type>)\n*areamobuseskill(\"<map name>\", <x>, <y>, <range>, <mob id>, \"<skill name>\", <skill level>, <cast time>, <cancelable>, <emotion>, <target type>)\n\nThis command will make all monsters of the specified mob ID in the\nspecified area use the specified skill. Map name, x, and y define the\ncenter of the area, which extending <range> cells in each direction (ex: a\nrange of 3 would create a 7x7 square). The skill can be specified by skill\nID or name. <cast time> is in milliseconds (1000 = 1 second), and the rest\nshould be self-explanatory.\n\n<target type> can be:\n\t0 = self\n\t1 = the mob's current target\n\t2 = the mob's master\n\t3 = random target\n\nExample:\n\n\t\/\/ spawn 1 Shining Plant in the 5x5 area centered on (155,188)\n\tareamonster(\"prontera\", 153, 186, 157, 190, \"Shining Plant\", SHINING_PLANT, 1);\n\t\/\/ make the plant cast level 10 Cold Bolt on a random target\n\tareamobuseskill(\"prontera\", 155, 188, 2, SHINING_PLANT, MG_COLDBOLT, 10, 3000, 1, e_gg, 3)"
    },
    {
        "command": "killmonster(\"<map name>\", \"<event label>\"{, <type>})",
        "line": 6572,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*killmonster(\"<map name>\", \"<event label>\"{, <type>})\n\nThis command will kill all monsters that were spawned with monster() or\nareamonster() and have a specified event label attached to them. Commonly\nused to get rid of remaining quest monsters once the quest is complete.\n\nIf the label is given as \"all\", all monsters which have their respawn\ntimes set to -1 (like all the monsters summoned with 'monster' or\n'areamonster' script command, and all monsters summoned with GM commands,\nbut no other ones - that is, all non-permanent monsters) on the specified\nmap will be killed regardless of the event label value.\n\nkillmonster() supports an optional argument type. Using 1 for type will make\nthe command fire \"OnMyMobDead\" events from any monsters that do die as a\nresult of this command."
    },
    {
        "command": "killmonsterall(\"<map name>\"{, <type>})",
        "line": 6590,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*killmonsterall(\"<map name>\"{, <type>})\n\nThis command will kill all monsters on a specified map name, regardless of\nhow they were spawned or what they are without triggering any event label\nattached to them, unless you specify 1 for type parameter. In this case,\nmob death labels will be allowed totrigger when there is no player. Any\nother number for this parameter won't be recognized."
    },
    {
        "command": "killmonstergid(<GID>);",
        "line": 6600,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*killmonstergid(<GID>);\n\nThis command will kill the specific monster GID. The difference between\nthis command and 'unitkill', is this command does not trigger monster's\nevent label."
    },
    {
        "command": "strmobinfo(<type>, <monster id>)",
        "line": 6608,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*strmobinfo(<type>, <monster id>)\n\nThis function will return information about a monster record in the\ndatabase, as per 'db\/(pre-)re\/mob_db.txt'. Type is the kind of information\nreturned. Valid types are:\n\n 1 - 'english name' field in the database, a string.\n 2 - 'japanese name' field in the database, a string.\n     All other returned values are numbers:\n 3 - Level.\n 4 - Maximum HP.\n 5 - Maximum SP.\n 6 - Experience reward.\n 7 - Job experience reward."
    },
    {
        "command": "mobcount(\"<map name>\", \"<event label>\")",
        "line": 6625,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*mobcount(\"<map name>\", \"<event label>\")\n\nThis function will count all the monsters on the specified map that have a\ngiven event label and return the number or 0 if it can't find any.\nNaturally, only monsters spawned with 'monster' and 'areamonster' script\ncommands can have non-empty event label.\nIf you pass this function an empty string for the event label, it will\nreturn the total count of monster without event label, including\npermanently spawning monsters.\n\nWith the dynamic mobs system enabled, where mobs are not kept in memory\nfor maps with no actual people playing on them, this will return a 0 for\nany such map.\n\nIf the event label is given as \"all\", all monsters will be counted,\nregardless of having any event label attached.\n\nIf the map name is given as \"this\", the map the invoking character is on\nwill be used. If the map is not found, or the invoker is not a character\nwhile the map is \"this\", it will return -1."
    },
    {
        "command": "clone(\"<map name>\", <x>, <y>, \"<event>\", <char id>{, <master_id>{, <mode>{, <flag>, <duration>}}})",
        "line": 6648,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*clone(\"<map name>\", <x>, <y>, \"<event>\", <char id>{, <master_id>{, <mode>{, <flag>, <duration>}}})\n\nThis command creates a monster which is a copy of another player. The\nfirst four arguments serve the same purpose as in the monster script\ncommand, The <char id> is the character id of the player to clone (player\nmust be online).\nIf <master id> is given, the clone will be a 'slave\/minion' of it.\nMaster_id must be a character id of another online player.\n\nThe mode can be specified to determine the behavior of the clone, its\nvalues are the same as the ones used for the mode field in the mob_db. The\ndefault mode is aggressive, assists, can move, can attack.\n\nFlag can be either zero or one currently. If zero, the clone is a normal\nmonster that'll target players, if one, it is considered a summoned\nmonster, and as such, it'll target other monsters. Defaults to zero.\n\nThe duration specifies how long the clone will live before it is\nauto-removed. Specified in seconds, defaults to no limit (zero).\n\nReturned value is the monster ID of the spawned clone. If command fails,\nreturned value is zero."
    },
    {
        "command": "summon(\"Monster name\", <monster id>{, <Time Out>{, \"event label\"}})",
        "line": 6673,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*summon(\"Monster name\", <monster id>{, <Time Out>{, \"event label\"}})\n\nThis command will summon a monster. (see also monster()) Unlike monsters\nspawned with other commands, this one will set up the monster to fight to\nprotect the invoking character. Monster name and mob id obey the same\nrules as the one given at the beginning of this document for permanent\nmonster spawns with the exceptions mentioned when describing 'monster'\ncommand.\n\nThe effect for the skill 'Call Homunculus' will be displayed centered on\nthe invoking character.\n\nTimeout is the time in milliseconds the summon lives, and is set default\nto 60000 (1 minute). Note that also the value 0 will set the timer to\ndefault, and it is not possible to create a spawn that lasts forever.\nIf an event label is given, upon the monster being killed, the event label\nwill run as if by donpcevent().\n\n\/\/ Will summon a poring to fight for the character.\n\tsummon(\"--ja--\", PORING);"
    },
    {
        "command": "mobattached()",
        "line": 6696,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*mobattached()\n\nThis command will return RID of the monster running from 'OnTouchNPC:' label.\n\n\n\/\/\tKill any monster entering npc's trigger area\nOnTouchNPC:\n\tkillmonstergid mobattached();"
    },
    {
        "command": "homevolution()",
        "line": 6707,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*homevolution()\n\nThis command will try to evolve the current player's homunculus.\nIf it doesn't work, the \/swt emotion is shown.\n\nTo evolve a homunculus, the invoking player must have a homunculus, the\nhomunculus must not be the last evolution and the homunculus must have\nabove 91000 intimacy with its owner."
    },
    {
        "command": "gethominfo(<type>)",
        "line": 6718,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*gethominfo(<type>)\n\nThis function works as a direct counterpart of 'getpetinfo':\n 0 - Homunculus unique ID\n 1 - Homunculus Class\n 2 - Name\n 3 - Friendly level (intimacy score). 100000 is full loyalty.\n 4 - Hungry level. 100 is completely full.\n 5 - Rename flag. 0 means this homunculus has not been named yet.\n 6 - Homunculus level\n\nIf the attached player doesn't own a homunculus, this command will return\n\"null\" for type 2, and return 0 for other types."
    },
    {
        "command": "morphembryo()",
        "line": 6734,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*morphembryo()\n\nThis command will try to put the invoking player's Homunculus in an\nuncallable state, required for mutation into a Homunculus S. The player\nwill also receive a Strange Embryo (ID 6415) in their inventory if\nsuccessful, which is deleted upon mutation.\n\nThe command will fail if the invoking player does not have an evolved\nHomunculus at level 99 or above. The \/swt emotion is shown upon failure.\n\nReturns 1 upon success and 0 for all failures."
    },
    {
        "command": "hommutate({<ID>})",
        "line": 6748,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*hommutate({<ID>})\n\nThis command will try to mutate the invoking player's Homunculus into a\nHomunculus S. The Strange Embryo (Strange_Embryo, ID 6415) is deleted\nupon success.\n\nThe command will fail if the invoking player does not have an evolved\nHomunculus at level 99 or above, if it is not in the embryo state\n(from the morphembryo() command), or if the invoking player does not\npossess a Strange Embryo. The \/swt emotion is shown upon failure.\n\nIf the optional parameter <ID> is set, the invoking player's Homunculus\nwill change into the specified Homunculus ID. Otherwise, a random Homunculus S\nwill be chosen. See 'db\/homunculus_db.txt' for a full list of IDs.\n\nReturns true upon success and false for all failures."
    },
    {
        "command": "checkhomcall()",
        "line": 6767,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*checkhomcall()\n\nThis function checks if the attached player's Homunculus is active,\nand will return the following values:\n -1: The player has no Homunculus.\n  0: The player's Homunculus is active.\n  1: The player's Homunculus is vaporized.\n  2: The player's Homunculus is in morph state."
    },
    {
        "command": "getunittype(<GID>)",
        "line": 6778,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*getunittype(<GID>)\n\nReturns the type of object from the given Game ID. Returns -1 if the given GID\ndoes not exist. The return values are :-\n\n\tUNITTYPE_PC     0\n\tUNITTYPE_NPC    1\n\tUNITTYPE_PET    2\n\tUNITTYPE_MOB    3\n\tUNITTYPE_HOM    4\n\tUNITTYPE_MER    5\n\tUNITTYPE_ELEM   6"
    },
    {
        "command": "unitwalk(<GID>, <x>, <y>)",
        "line": 6793,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*unitwalk(<GID>, <x>, <y>)\n*unitwalk(<GID>, <target_GID>)\n\nThis is one command, but can be used in two ways. If only the first\nargument is given, the unit whose GID is given will start walking towards\nthe target whose GID is given.\n\nWhen 2 arguments are passed, the given unit will walk to the given x,y\ncoordinates on the map where the unit currently is.\n\nExamples:\n\n\/\/Will move\/walk the poring we made to the coordinates 150,150\n\tunitwalk(.GID, 150, 150);\n\n\/\/NPC will move towards the attached player.\n\tunitwalk(.GID, getcharid(CHAR_ID_ACCOUNT));\/\/a player's GID is their account ID"
    },
    {
        "command": "unitkill(<GID>)",
        "line": 6813,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*unitkill(<GID>)\n*unitwarp(<GID>, <Mapname>, <x>, <y>)\n*unitattack(<GID>, <Target ID>)\n*unitstop(<GID>)\n*unittalk(<GID>, <Text>{, show_name{, <send_target>{, <target_id>}}})\n*unitemote(<GID>, <Emote>)\n\nOkay, these commands should be fairly self explaining.\nFor the emotions, you can look in 'doc\/constants.md' under 'Emotes'\nPS: unitwarp() supports a <GID> of zero, which causes the executor of the\nPS: unittalk() can receive 3 extra parameters:\n\tshow_name:\n\t\ttrue: Shows Unit name like \"UnitName : Message\" (default)\n\t\tfalse: Hides Unit name\n\tsend_target:\n\t\tAREA_CHAT_WOC: sends the message to everyone in view range including the attached unit (default)\n\t\tSELF: sends the message to the given unit gid only\n\ttarget_id:\n\t\tif send_target is set to SELF, the message will be shown by the given gid,\n\t\ttarget_id allows changing the unit that will see the message.\nscript to be affected. This can be used with OnTouchNPC to warp\nmonsters:\n\nOnTouchNPC:\n\tunitwarp(0, \"this\", -1, -1);\n\n\t\/\/ hide the npc name from the text\n\tunittalk(getnpcid(0), \"foobar\", false);\n\n\t\/\/ display by npc to everyone\n\tunittalk(getnpcid(0), \"foobar\", true);\n\n\t\/\/ display by npc to npc\n\tunittalk(getnpcid(0), \"foobar\", true, SELF);\n\n\t\/\/ display the text by the npc to the attached player only\n\tunittalk(getnpcid(0), \"foobar\", true, SELF, playerattached());\n\n\t\/\/ display by player to everyone\n\tunittalk(playerattached(), \"foobar\", true);\n\n\t\/\/ display by player to himself only\n\tunittalk(playerattached(), \"foobar\", true, SELF);\n\n\t\/\/ display the text by the 1st player to the attached player only\n\tunittalk(getcharid(CHAR_ID_ACCOUNT, \"Name\"), \"foobar\", true, SELF, playerattached());"
    },
    {
        "command": "disablenpc(\"<NPC object name>\")",
        "line": 6862,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*disablenpc(\"<NPC object name>\")\n*enablenpc(\"<NPC object name>\")\n\nThese two commands will disable and enable, respectively, an NPC object\nspecified by name. The disabled NPC will disappear from sight and will no\nlonger be triggerable in the normal way. It is not clear whether it will\nstill be accessible through donpcevent() and other triggering commands,\nbut it probably will be. You can disable even warp NPCs if you know their\nobject names, which is an easy way to make a map only accessible through\nwalking half the time. Then you 'enablenpc' them back.\n\nYou can also use these commands to create the illusion of an NPC switching\nbetween several locations, which is often better than actually moving the\nNPC - create one NPC object with a visible and a hidden part to their\nname, make a few copies, and then disable all except one."
    },
    {
        "command": "hideonnpc(\"<NPC object name>\")",
        "line": 6880,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*hideonnpc(\"<NPC object name>\")\n*hideoffnpc(\"<NPC object name>\")\n\nThese commands will make the NPC object specified display as hidden or\nvisible, even though not actually disabled per se. Hidden as in thief Hide\nskill, but unfortunately, not detectable by Ruwach or Sight.\n\nAs they are now, these commands are pointless, it is suggested to use\n'disablenpc'\/'enablenpc', because these two commands actually unload the\nNPC sprite location and other accompanying data from memory when it is not\nused. However, you can use these for some quest ideas (such as cloaking\nNPCs talking while hidden then revealing... you can wonder around =P)."
    },
    {
        "command": "doevent(\"<NPC object name>::<event label>\")",
        "line": 6895,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*doevent(\"<NPC object name>::<event label>\")\n\nThis command will start a new execution thread in a specified NPC object\nat the specified label. The execution of the script running this command\nwill not stop, and the event called by the doevent() command will not run\nuntil the invoking script has terminated. No parameters may be passed with\na doevent() call.\n\nThe script of the NPC object invoked in this manner will run as if it's\nbeen invoked by the RID that was active in the script that issued a\n'doevent'. As such, the command will not work if an RID is not attached.\n\n\tplace,100,100,1%TAB%script%TAB%NPC%TAB%53,{\n\t\tmes(\"This is what you will see when you click me\");\n\t\tclose();\n\tOnLabel:\n\t\tmes(\"This is what you will see if the doevent is activated\");\n\t\tclose();\n\t}\n\n\t\/\/ ...\n\n\tdoevent(\"NPC::OnLabel\");"
    },
    {
        "command": "donpcevent(\"<NPC object name>::<event label>\")",
        "line": 6921,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*donpcevent(\"<NPC object name>::<event label>\")\n\nThis command invokes the event label code within an another NPC or NPCs.\nIt starts a separate instance of execution, and the invoking NPC will\nresume execution its immediately.\n\nIf the supplied event label has the form \"NpcName::OnLabel\", then only\ngiven NPC's event label will be invoked (much like goto() into another\nNPC). If the form is \"::OnLabel\" (NPC name omitted), the event code of all\nNPCs with given label will be invoked, one after another. In both cases\nthe invoked script will run without an attached RID, whether or not the\ninvoking script was attached to a player. The event label name is required\nto start with \"On\".\n\nThis command can be used to make other NPCs act, as if they were\nresponding to the invoking NPC's actions, such as using an emotion or\ntalking.\n\n\tplace,100,100,1%TAB%script%TAB%NPC%TAB%53,{\n\t\tmes(\"Hey NPC2 copy what I do\");\n\t\tclose2();\n\t\t@emote = rand(1, 30);\n\t\tdonpcevent(\"NPC2::OnEmote\");\n\tOnEmote:\n\t\temotion(@emote);\n\t\tend;\n\t}\n\n\tplace,102,100,1%TAB%script%TAB%NPC2%TAB%53,{\n\t\tmes(\"Hey NPC copy what I do\");\n\t\tclose2();\n\t\t@emote = rand(1, 30);\n\t\tdonpcevent(\"NPC::OnEmote\");\n\tOnEmote:\n\t\temotion(@emote);\n\t\tend;\n\t}\n\nWhichever of the both NPCs is talked to, both will show a random emotion\nat the same time.\n\nCommand returns true or false on success and failure.\nA debug message also shows on the console when no events are triggered."
    },
    {
        "command": "npctalk(\"<message>\"{, \"<npc name>\"{, <show_name>}})",
        "line": 6967,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*npctalk(\"<message>\"{, \"<npc name>\"{, <show_name>}})\n\nshow_npcname values:\n\ttrue: shows npc name (default)\n\tfalse: hide npc name\n\nThis command will display a message to the surrounding area as if the NPC\nobject running it was a player talking - that is, above their head and in\nthe chat window. If show_npcname is true the name of the NPC will get appended in front of\nthe message, otherwise the npc name will not be shown.\n\n\t\/\/ This will make everyone in the area see the NPC greet the character\n\t\/\/ who just invoked it.\n\tnpctalk(\"Hello \"+strcharinfo(PC_NAME)+\", how are you?\");\n\tnpctalk(\"Hello \"+strcharinfo(PC_NAME)+\", how are you?\", \"Another_NPC_Name\");"
    },
    {
        "command": "setnpcdisplay(\"<npc name>\", \"<display name>\", <class id>, <size>)",
        "line": 6985,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*setnpcdisplay(\"<npc name>\", \"<display name>\", <class id>, <size>)\n*setnpcdisplay(\"<npc name>\", \"<display name>\", <class id>)\n*setnpcdisplay(\"<npc name>\", \"<display name>\")\n*setnpcdisplay(\"<npc name>\", <class id>)\n\nChanges the display name and\/or display class of the target NPC.\nReturns 0 is successful, 1 if the NPC does not exist.\nSize is 0 = normal 1 = small 2 = big."
    },
    {
        "command": "addtimer(<ticks>, \"NPC::OnLabel\"{, <account id>})",
        "line": 7000,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "5.1 - Time-Related Commands",
        "description": "*addtimer(<ticks>, \"NPC::OnLabel\"{, <account id>})\n\nThis command will create a countdown timer.\nThe event label given is the identifier of that timer.\nThe timer runs on the character object that is attached to the script,\nand can have multiple instances. If <acccount id> is passed, this player\nwill be used instead. When the label is run, it is run as if the player\nthat the timer runs on has clicked the NPC.\n\nWhen this timer runs out, a new execution thread will start in the\nspecified NPC object at the specified label.\n\nThe ticks are given in 1\/1000ths of a second.\n\nOne more thing. These timers are stored as part of player data. If the\nplayer logs out, all of these get immediately deleted, without executing\nthe script. If this behavior is undesirable, use some other timer\nmechanism (like sleep()).\n\nExample:\n<NPC Header> {\n\tdispbottom(\"Starting a 5 second timer...\");\n\taddtimer(5000, strnpcinfo(NPC_NAME_UNIQUE)+\"::On5secs\");\n\tend;\nOn5secs:\n\tdispbottom(\"5 seconds have passed!\");\n\tend;\n}"
    },
    {
        "command": "deltimer(\"NPC::OnLabel\"{, <account id>})",
        "line": 7031,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "5.1 - Time-Related Commands",
        "description": "*deltimer(\"NPC::OnLabel\"{, <account id>})\n\nDeletes timers created by addtimer() that matches the given event\nlabel. Refer to addtimer() for additional information."
    },
    {
        "command": "addtimercount(\"NPC::OnLabel\", <ticks>{, <account id>})",
        "line": 7038,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "5.1 - Time-Related Commands",
        "description": "*addtimercount(\"NPC::OnLabel\", <ticks>{, <account id>})\n\nDelays a timer that was created with addtimer() by <ticks> ticks\nif it matches the given event label. Refer to addtimer() for additional\ninformation."
    },
    {
        "command": "gettimer(<type>{, <account id>{, \"<event>\"}})",
        "line": 7046,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "5.1 - Time-Related Commands",
        "description": "*gettimer(<type>{, <account id>{, \"<event>\"}})\n\nReturns informations on timers that were created by addtimer().\n\nvalid <type> for gettimer() are:\n\n(0) TIMER_COUNT\n\tWill return the total number of timers for the specified or\n\tattached player. Can be filtered by <event>.\n(1) TIMER_TICK_NEXT\n\tWill return the number of ticks until the next timer runs\n\tfor the specified or attached player. Can be filtered by <event>.\n(2) TIMER_TICK_LAST\n\tWill return the number of ticks until the last timer runs\n\tfor the specified or attached player. Can be filtered by <event>."
    },
    {
        "command": "initnpctimer({\"<NPC name>\"{, <Attach Flag>}})",
        "line": 7064,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "5.1 - Time-Related Commands",
        "description": "*initnpctimer({\"<NPC name>\"{, <Attach Flag>}})\n*initnpctimer({<Attach Flag>})\n*stopnpctimer({\"<NPC name>\"{, <Detach Flag>}})\n*stopnpctimer({<Detach Flag>}})\n*startnpctimer({\"<NPC name>\"{, <Attach Flag>}})\n*startnpctimer({<Attach Flag>})\n*setnpctimer(<tick>{, \"<NPC name>\"})\n*getnpctimer(<type of information>{, \"<NPC name>\"})\n*attachnpctimer({\"<character name>\"})\n*detachnpctimer({\"<NPC name>\"})\n\nThis set of commands and functions will create and manage an NPC-based\ntimer. The NPC name may be omitted, in which case the calling NPC is used\nas target.\n\nContrary to addtimer()\/deltimer() commands which let you have many different\ntimers referencing different labels in the same NPC, each with their own\ncountdown, initnpctimer() can only have one per NPC object. But it can\ntrigger many labels and let you know how many were triggered already and\nhow many still remain.\n\nThis timer is counting up from 0 in ticks of 1\/1000ths of a second each.\nUpon  creating this timer, the execution will not stop, but will happily\ncontinue onward. The timer will then invoke new execution threads at\nlabels \"OnTimer<time>:\" in the NPC object it is attached to.\n\nTo create the timer, use the initnpctimer(), which will start it running.\nstopnpctimer() will pause the timer, without clearing the current tick,\nwhile startnpctimer() will let the paused timer continue.\n\nBy default timers do not have a RID attached, which lets them continue\neven if the player that started them logs off. To attach a RID to a timer,\nyou can either use the optional \"attach flag\" when using\ninitnpctimer()\/startnpctimer(), or do it manually by using attachnpctimer().\nLikewise, the optional flag of stopnpctimer() lets you detach any RID after\nstopping the timer, and by using detachnpctimer() you can detach a RID at\nany time.\n\nNormally there is only a single timer per NPC, but as an exception, as\nlong as you attach a player to the timer, you can have multiple timers\nrunning at once, because these will get stored on the players instead of\nthe NPC.\nNOTE: You need to attach the RID before the timer _before_ you start it to\nget a player-attached timer. Otherwise it'll stay a NPC timer (no effect).\n\nIf the player that is attached to the npctimer logs out, the\n\"OnTimerQuit:\" event label of that NPC will be triggered, so you can do\nthe appropriate cleanup (the player is still attached when this event is\ntriggered).\n\nThe setnpctimer() command will explicitly set the timer to a given tick.\ngetnpctimer() provides timer information. Its parameter defines what type:\n\n 0 - Will return the current tick count of the timer.\n 1 - Will return 1 if there are remaining \"OnTimer<ticks>:\" labels in the\n\t specified NPC waiting for execution.\n 2 - Will return the number of times the timer has triggered and will\n\t trigger an \"OnTimer<tick>:\"  label in the specified NPC.\n\nExample 1:\n\n\t<NPC Header> {\n\t\t\/\/ We need to use attachnpctimer() because the mes command below\n\t\t\/\/ needs RID attach\n\t\tattachnpctimer();\n\t\tinitnpctimer();\n\t\tnpctalk(\"I cant talk right now, give me 10 seconds\");\n\t\tend;\n\tOnTimer5000:\n\t\tnpctalk(\"Ok 5 seconds more\");\n\t\tend;\n\tOnTimer6000:\n\t\tnpctalk(\"4\");\n\t\tend;\n\tOnTimer7000:\n\t\tnpctalk(\"3\");\n\t\tend;\n\tOnTimer8000:\n\t\tnpctalk(\"2\");\n\t\tend;\n\tOnTimer9000:\n\t\tnpctalk(\"1\");\n\t\tend;\n\tOnTimer10000:\n\t\tstopnpctimer();\n\t\tmes(\"[Man]\");\n\t\tmes(\"Ok we can talk now\");\n\t\tdetachnpctimer();\n\t\t\/\/ and remember attachnpctimer() and detachnpctimer() can only be used\n\t\t\/\/ while the NPC timer is not running!\n\t}\n\nExample 2:\n\n\tOnTimer15000:\n\t\tnpctalk(\"Another 15 seconds have passed.\");\n\n\t\t\/\/ You have to use initnpctimer() instead of setnpctimer(0).\n\t\t\/\/ This is equal to setnpctimer(0); startnpctimer();.\n\t\t\/\/ Alternatively, you can also insert another 'OnTimer15001:' label\n\t\t\/\/ so that the timer won't stop.\n\t\tinitnpctimer();\n\t\tend;\n\n\t\/\/ This OnInit label will run when the script is loaded, so that the\n\t\/\/ timer is initialized immediately as the server starts. It is\n\t\/\/ dropped back to 0 every time the NPC says something, so it will\n\t\/\/ cycle continuously.\n\tOnInit:\n\t\tinitnpctimer();\n\t\tend;\n\nExample 3:\n\n\tmes(\"[Man]\");\n\tmes(\"I have been waiting \"+(getnpctimer(0)\/1000)+\" seconds for you.\");\n\t\/\/ We divide the timer returned by 1000 to convert milliseconds to\n\t\/\/ seconds.\n\tclose();\n\nExample 4:\n\n\tmes(\"[Man]\");\n\tmes(\"Ok, I will let you have 30 more seconds...\");\n\tclose2();\n\tsetnpctimer(getnpctimer(0)-30000);\n\t\/\/ Notice the close2(). If there were a next() there the timer would\n\t\/\/ be changed only after the player pressed the next() button.\n\tend;"
    },
    {
        "command": "sleep(<milliseconds>)",
        "line": 7196,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "5.1 - Time-Related Commands",
        "description": "*sleep(<milliseconds>)\n*sleep2(<milliseconds>)\n*awake(\"<NPC name>\")\n\nThese commands are used to control the pause of a NPC.\nsleep() and sleep2() will pause the script for the given amount of\nmilliseconds.\nawake() is used to cancel a sleep(). When awake() is called on a NPC it will run\nas if the sleep timer ran out, and thus making the script continue. sleep()\nand sleep2() basically do the same, but the main difference is that sleep()\nwill not keep the rid, while sleep2() does.\n\nExamples:\n\t\/\/ This will pause the script for 10 seconds and ditch the RID\n\t\/\/ (so no player is attached anymore)\n\tsleep(10000);\n\t\/\/ Pauses the script for 5 seconds, and continue with the RID attached.\n\tsleep2(5000);\n\t\/\/Cancels any running sleep timers on the NPC 'NPC'.\n\tawake(\"NPC\");"
    },
    {
        "command": "progressbar(\"<color>\", <seconds>)",
        "line": 7219,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "5.1 - Time-Related Commands",
        "description": "*progressbar(\"<color>\", <seconds>)\n*progressbar_unit(\"<color>\", <seconds>{, <GID>})\n\nThis command works almost like sleep2(), but displays a progress bar above\nthe head of the currently attached character (like cast bar). Once the\ngiven amount of seconds passes, the script resumes. If the character moves\nwhile the progress bar progresses, it is aborted and the script ends. The\ncolor format is in RGB (0xRRGGBB). The color is currently ignored by the\nclient and appears always green.\n\nprogressbar_unit works only for PACKETVER >= 20130821\nThe progressbar will show on the given unit id but it will not\nput the unit in timeout (the progressbar would be just an animation).\nif GID is not given use the attached player."
    },
    {
        "command": "announce(\"<text>\", <flag>{, <fontColor>{, <fontType>{, <fontSize>{, <fontAlign>{, <fontY>}}}}})",
        "line": 7240,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*announce(\"<text>\", <flag>{, <fontColor>{, <fontType>{, <fontSize>{, <fontAlign>{, <fontY>}}}}})\n\nThis command will broadcast a message to all or most players, similar to\n@kami\/@kamib GM commands.\n\n\tannounce(\"This will be shown to everyone at all in yellow.\", bc_all);\n\nThe region the broadcast is heard in (target), source of the broadcast and\nthe color the message will come up as is determined by the flags.\n\nThe flag values are coded as constants in doc\/constants.md to make them\neasier to use.\n\nTarget flags:"
    },
    {
        "command": "mapannounce(\"<map name>\", \"<text>\", <flag>{, <fontColor>{, <fontType>{, <fontSize>{, <fontAlign>{, <fontY>}}}}}})",
        "line": 7311,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*mapannounce(\"<map name>\", \"<text>\", <flag>{, <fontColor>{, <fontType>{, <fontSize>{, <fontAlign>{, <fontY>}}}}}})\n\nThis command will work like announce() but will only broadcast to\ncharacters currently residing on the specified map. The flag and optional\nparameters parameters are the same as in announce(), but target and source\nflags are ignored."
    },
    {
        "command": "areaannounce(\"<map name>\", <x1>, <y1>, <x2>, <y2>, \"<text>\", <flag>{, <fontColor>{, <fontType>{, <fontSize>{, <fontAlign>{, <fontY>}}}}}})",
        "line": 7320,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*areaannounce(\"<map name>\", <x1>, <y1>, <x2>, <y2>, \"<text>\", <flag>{, <fontColor>{, <fontType>{, <fontSize>{, <fontAlign>{, <fontY>}}}}}})\n\nThis command works like 'announce' but will only broadcast to characters\nresiding in the specified x1\/y1-x2\/y2 rectangle on the map given. The\nflags and optional parameters are the same as in announce(), but target\nand source flags are ignored.\n\n\tareaannounce(\"prt_church\", 0, 0, 350, 350, \"God's in his heaven, all right with the world\", 0);"
    },
    {
        "command": "callshop(\"<name>\", <option>)",
        "line": 7331,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*callshop(\"<name>\", <option>)\n\nThese are a series of commands used to create dynamic shops.\nThe callshop() function calls an invisible shop (FAKE_NPC) as if the player\nclicked on it.\n\nFor the options on callShop:\n\t0 = The normal window (buy, sell and cancel)\n\t1 = The buy window\n\t2 = The sell window\n\nExample:\n\n\/\/Will call the shop named DaShop and opens the buy menu.\ncallshop(\"DaShop\", 1);\n\n\nThe shop which is called by callshop() (as long as an npcshop* command is\nexecuted from that NPC (see note 1)) will trigger the labels OnBuyItem and\nOnSellitem. These labels can take over handling for relatively the buying\nof items from the shop and selling the items to a shop. Via these labels\nyou can customize the way an item is bought or sold by a player.\n\nIn the OnBuyItem, two arrays are filled (@bought_nameid and\n@bought_quantity) with information about the name id (item id) sold\nand the amount sold of it. Same goes for the OnSellItem label, only the\nvariables are named different (@sold_nameid, @sold_quantity, @sold_refine,\n@sold_attribute, @sold_identify, @sold_card1, @sold_card2, @sold_card3,\n@sold_card4). An example on a shop comes with Hercules, and can be found\nin the doc\/sample\/npc_dynamic_shop.txt file.\n\nThis example shows how to use the labels and their set variables to create\na dynamic shop.\n\nNote 1: These labels will only be triggered if a npcshop* command is\nexecuted, this is because these commands set a special data on the shop\nNPC, named master_nd in the source.\nThe OnSellItem and OnBuyItem are triggered in the NPC whose master_nd is\ngiven in the shop."
    },
    {
        "command": "npcshopitem(\"<name>\", <item id>, <price>{, <item id>, <price>{, <item id>, <price>{, ...}}})",
        "line": 7373,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*npcshopitem(\"<name>\", <item id>, <price>{, <item id>, <price>{, <item id>, <price>{, ...}}})\n\nThis command lets you override the contents of an existing NPC shop or\ncashshop. The current sell list will be wiped, and only the items\nspecified with the price specified will be for sale.\n\nThe function returns true if shop was updated successfully, or false if not found.\n\nNote that you cannot use -1 to specify default selling price!"
    },
    {
        "command": "npcshopadditem(\"<name>\", <item id>, <price>{, <item id>, <price>{, <item id>, <price>{, ...}}})",
        "line": 7385,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*npcshopadditem(\"<name>\", <item id>, <price>{, <item id>, <price>{, <item id>, <price>{, ...}}})\n\nThis command will add more items at the end of the selling list for the\nspecified NPC shop or cashshop. If you specify an item already for sell,\nthat item will appear twice on the sell list.\n\nThe function returns true if shop was updated successfully, or false if not found.\n\nNote that you cannot use -1 to specify default selling price!"
    },
    {
        "command": "npcshopdelitem(\"<name>\", <item id>{, <item id>{, <item id>{, ...}}})",
        "line": 7397,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*npcshopdelitem(\"<name>\", <item id>{, <item id>{, <item id>{, ...}}})\n\nThis command will remove items from the specified NPC shop or cashshop.\nIf the item to remove exists more than once on the shop, all instances\nwill be removed.\n\nNote that the function returns true even if no items were removed. The return\nvalue is only to confirm that the shop was indeed found."
    },
    {
        "command": "npcshopattach(\"<name>\"{, <flag>})",
        "line": 7408,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*npcshopattach(\"<name>\"{, <flag>})\n\nThis command will attach the current script to the given NPC shop.\nWhen a script is attached to a shop, the events \"OnBuyItem\" and\n\"OnSellItem\" of your script will be executed whenever a player buys\/sells\nfrom the shop. Additionally, the arrays @bought_nameid[],\n@bought_quantity[] or @sold_nameid[] and @sold_quantity[] will be filled\nup with the items and quantities bought\/sold.\n\nThe optional parameter specifies whether to attach (true) or detach (false)\nfrom the shop (the default is to attach). Note that detaching will detach\nany NPC attached to the shop, even if it's from another script, while\nattaching will override any other script that may be already attached.\n\nThe function returns false if the shop was not found, true otherwise."
    },
    {
        "command": "waitingroom(\"<chatroom name>\", <limit>{, <event label>, <trigger>, <required zeny>, <min lvl>, <max lvl>})",
        "line": 7426,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*waitingroom(\"<chatroom name>\", <limit>{, <event label>, <trigger>, <required zeny>, <min lvl>, <max lvl>})\n\nThis command will create a chat room, owned by the NPC object running this\nscript and displayed above the NPC sprite.\nThe maximum length of a chat room name is 60 letters.\n\nThe limit is the maximum number of people allowed to enter the chat room.\nThe attached NPC is included in this count. If the optional event and\ntrigger parameters are given, the event label\n(\"<NPC object name>::<label name>\") will be invoked as if with a donpcevent()\nupon the number of people in the chat room reaching the given triggering\namount.\n\n\/\/ The NPC will just show a box above its head that says \"Hello World\",\n\/\/ clicking it will do nothing, since the limit is zero.\n\twaitingroom(\"Hello World\", 0);\n\n\/\/ The NPC will have a box above its head, with \"Disco - Waiting Room\"\n\/\/ written on it, and will have 8 waiting slots. Clicking this will enter\n\/\/ the chat room, where the player will be able to wait until 7 players\n\/\/ accumulate. Once this happens, it will cause the NPC \"Bouncer\" run the\n\/\/ label \"OnStart\".\n\n\twaitingroom(\"Disco - Waiting Room\", 8, \"Bouncer::OnStart\", 7);\n\n\/\/ The NPC will have a box above its head, with \"Party - Waiting Room\"\n\/\/ written on it, and will have 8 waiting slots. Clicking this will allow\n\/\/ a player who has 5000 zeny and lvl 50~99 to enter the chat room, where\n\/\/ the player will be able to wait until 7 players accumulate. Once this\n\/\/ happens, it will cause the NPC \"Bouncer\" run the label \"OnStart\".\n\n\twaitingroom(\"Party - Waiting Room\", 8, \"Bouncer::OnStart\", 7, 5000, 50, 99);\n\nCreating a waiting room does not stop the execution of the script and it\nwill continue to the next line.\n\nFor more examples see the 2-1 and 2-2 job quest scripts which make\nextensive use of waiting rooms."
    },
    {
        "command": "delwaitingroom({\"<NPC object name\"})",
        "line": 7467,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*delwaitingroom({\"<NPC object name\"})\n\nThis command will delete a waiting room. If no parameter is given, it will\ndelete a waiting room attached to the NPC object running this command, if\nit is, it will delete a waiting room owned by another NPC object. This is\nthe only way to get rid of a waiting room, nothing else will cause it to\ndisappear.\n\nIt's not clear what happens to a waiting room if the NPC is disabled with\ndisablenpc(), by the way."
    },
    {
        "command": "enablewaitingroomevent({\"<NPC object name>\"})",
        "line": 7480,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*enablewaitingroomevent({\"<NPC object name>\"})\n*disablewaitingroomevent({\"<NPC object name>\"})\n\nThis will enable and disable triggering the waiting room event (see\nwaitingroom()) respectively. Optionally giving an NPC object name will do\nthat for a specified NPC object. The chat room will not disappear when\ntriggering is disabled and enabled in this manner and players will not be\nkicked out of it. Enabling a chat room event will also cause it to\nimmediately check whether the number of users in it exceeded the trigger\namount and trigger the event accordingly.\n\nNormally, whenever a waiting room was created to make sure that only one\ncharacter is, for example, trying to pass a job quest trial, and no other\ncharacters are present in the room to mess up the script."
    },
    {
        "command": "getwaitingroomstate(<information type>{, \"<NPC object name>\"})",
        "line": 7497,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*getwaitingroomstate(<information type>{, \"<NPC object name>\"})\n\nThis function will return information about the waiting room state for the\nattached waiting room or for a waiting room attached to the specified NPC\nif any.\n\nThe valid information types are:\n\n 0  - Number of users currently in the waiting room\n\t  $@chatmembers[] - list of user account_id\n 1  - Maximum number of users allowed.\n 2  - Will return 1 if the waiting room has a trigger set.\n      0 otherwise.\n 3  - Will return 1 if the waiting room is currently disabled.\n      0 otherwise.\n 4  - The Title of the waiting room (string)\n 5  - Password of the waiting room, if any. Pointless, since there is no\n      way to set a password on a waiting room right now.\n 16 - Event name of the waiting room (string)\n 32 - Whether or not the waiting room is full.\n 33 - Whether the amount of users in the waiting room is higher than the\n      trigger number.\n 34 - Minimum Base Level to enter waiting room.\n 35 - Maximum Base Level to enter waiting room.\n 36 - Minimum Zeny to enter waiting room."
    },
    {
        "command": "warpwaitingpc(\"<map name>\", <x>, <y>{, <number of people>})",
        "line": 7525,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*warpwaitingpc(\"<map name>\", <x>, <y>{, <number of people>})\n\nThis command will warp the amount of characters equal to the trigger\nnumber of the waiting room chat attached to the NPC object running this\ncommand to the specified map and coordinates, kicking them out of the\nchat. Those waiting the longest will get warped first. It can also do a\nrandom warp on the same map (\"Random\" instead of map name) and warp to the\nsave point (\"SavePoint\").\n\nThe list of characters to warp is taken from the list of the chat room\nmembers. Those not in the chat room will not be considered even if they\nare talking to the NPC in question. If the number of people is given,\nexactly this much people will be warped.\n\nThis command can also keep track of who just got warped. It does this by\nsetting special variables:\n\n$@warpwaitingpc[] is an array containing the account_id numbers of the\n                  characters who were just warped.\n$@warpwaitingpcnum contains the number of the character it just warped.\n\nSee also 'getpartymember' for advice on what to do with those variables.\n\nThe obvious way of using this effectively would be to set up a waiting\nroom for two characters to be warped onto a random PVP map for a\none-on-one duel, for example."
    },
    {
        "command": "kickwaitingroomall({\"<NPC object name>\"})",
        "line": 7554,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*kickwaitingroomall({\"<NPC object name>\"})\n\nThis command kicks everybody out of a specified waiting room chat."
    },
    {
        "command": "setmapflagnosave(\"<map name>\", \"<alternate map name>\", <x>, <y>)",
        "line": 7560,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*setmapflagnosave(\"<map name>\", \"<alternate map name>\", <x>, <y>)\n\nThis command sets the 'nosave' flag for the specified map and also gives\nan alternate respawn-upon-relogin point.\n\nIt does not make a map impossible to make a save point on as you would\nnormally think, savepoint() will still work. It will, however, make the\nspecified map kick the reconnecting players off to the alternate map given\nto the coordinates specified."
    },
    {
        "command": "setmapflag(\"<map name>\", <flag>{, <val>})",
        "line": 7572,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*setmapflag(\"<map name>\", <flag>{, <val>})\n\nThis command marks a specified map with a map flag given. Map flags alter\nthe behavior of the map, you can see the list of the available ones in\n'doc\/constants.md' under 'Mapflags'.\n\nThe map flags alter the behavior of the map regarding teleporting\n(mf_nomemo, mf_noteleport, mf_nowarp), storing location when\ndisconnected (mf_nosave), dead branch usage (mf_nobranch), penalties\nupon death (mf_nopenalty, mf_nozenypenalty), PVP behavior (mf_pvp,\nmf_pvp_noparty, mf_pvp_noguild), WoE behavior (mf_gvg, mf_gvg_noparty),\nability to use skills or open up trade deals (mf_notrade, mf_novending,\nmf_noskill, mf_noicewall), current weather effects (mf_snow, mf_fog,\nmf_sakura, mf_leaves, mf_clouds, mf_clouds2, mf_fireworks), whether\nnight will be in effect on this map (mf_nightenabled) and so on.\n\nThe val optional parameter is as the mapflags variable when one exists, it\nmay be a number or a string depending on the mapflag in question."
    },
    {
        "command": "removemapflag(\"<map name>\", <flag>)",
        "line": 7593,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*removemapflag(\"<map name>\", <flag>)\n\nThis command removes a mapflag from a specified map.\nSee setmapflag() for examples of mapflags."
    },
    {
        "command": "getmapflag(\"<map name>\", <flag>)",
        "line": 7600,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*getmapflag(\"<map name>\", <flag>)\n\nThis command checks the status of a given mapflag and returns the\nmapflag's state.\nfalse means OFF, and true means ON. See setmapflag() for examples of mapflags."
    },
    {
        "command": "setbattleflag(\"<battle flag>\", <value>)",
        "line": 7608,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*setbattleflag(\"<battle flag>\", <value>)\n*getbattleflag(\"<battle flag>\")\n\nSets or gets the value of the given battle flag.\nBattle flags are the flags found in the conf\/map\/battle\/*.conf files and is\nalso used in Lupus' variable rates script.\n\nExamples:\n\n\/\/ Will set the base experience rate to 20x (2000%)\n\tsetbattleflag(\"base_exp_rate\", 2000);\n\n\/\/ Will return the value of the base experience rate (when used after the\n\/\/ above example, it would print 2000).\n\tmes(getbattleflag(\"base_exp_rate\"));"
    },
    {
        "command": "warpportal(<x>, <y>, \"<mapname>\", <x>, <y>)",
        "line": 7626,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*warpportal(<x>, <y>, \"<mapname>\", <x>, <y>)\n\nCreates a warp Portal as if a acolyte class character did it.\nThe first x and y is the place of the warp portal on the map where the NPC\nis on the mapname and second x and y is the target area of the warp portal.\n\nExamples:\n\n\/\/ Will create a warp portal on the NPC's map at 150,150\n\/\/ leading to prontera, coords 150,180.\n\twarpportal(150, 150, \"prontera\", 150, 180);"
    },
    {
        "command": "mapwarp(\"<from map>\", \"<to map>\", <x>, <y>{, <type>, <ID>})",
        "line": 7640,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*mapwarp(\"<from map>\", \"<to map>\", <x>, <y>{, <type>, <ID>})\n\nThis command will collect all characters located on the From map and warp\nthem wholesale to the same point on the To map, or randomly distribute\nthem there if the coordinates are zero. \"Random\" is understood as a\nspecial To map name and will mean randomly shuffling everyone on the same\nmap.\n\nOptionally, a type and ID can be specified. Available types are:\n\n 0 - Everyone\n 1 - Guild\n 2 - Party\n\nExample:\n\n\/\/ Will warp all members of guild with ID 63 on map prontera to alberta.\n\tmapwarp(\"prontera\", \"alberta\", 150, 150, 1, 63);"
    },
    {
        "command": "maprespawnguildid(\"<map name>\", <guild id>, <flag>)",
        "line": 7665,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "5.2 - Guild-Related Commands",
        "description": "*maprespawnguildid(\"<map name>\", <guild id>, <flag>)\n\nThis command goes through the specified map and for each player and\nmonster found there does stuff.\n\nFlag is a bit-mask (add up numbers to get effects you want)\n 1 - warp all guild members to their save points.\n 2 - warp all non-guild members to their save points.\n 4 - remove all monsters which are not guardian or Emperium.\n\nFlag 7 will, therefore, mean 'wipe all mobs but guardians and the Emperium\nand kick all characters out', which is what the official scripts do upon\ncastle surrender. Upon start of WoE, the scripts do 2 (warp out all people\nnot in the guild that owns the castle).\n\nCharacters not belonging to any guild will be warped out regardless of the\nflag setting.\n\nFor examples, check the WoE scripts in the distribution."
    },
    {
        "command": "agitstart()",
        "line": 7687,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "5.2 - Guild-Related Commands",
        "description": "*agitstart()\n*agitend()\n*agitstart2()\n*agitend2()\n\nThese four commands will start\/end War of Emperium or War of Emperium SE.\n\nThis is a bit more complex than it sounds, since the commands themselves\nwon't actually do anything interesting, except causing all 'OnAgitStart:'\nand 'OnAgitEnd:', or 'OnAgitStart2:' and 'OnAgitEnd2:' in the case of\nlatter two commands, events to run everywhere, respectively. They are used\nas  simple triggers to run a lot of complex scripts all across the server,\nand they, in turn, are triggered by clock with an 'OnClock<time>:'\ntime-triggering label."
    },
    {
        "command": "gvgon(\"<map name>\")",
        "line": 7704,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "5.2 - Guild-Related Commands",
        "description": "*gvgon(\"<map name>\")\n*gvgoff(\"<map name>\")\n\nThese commands will turn GVG mode for the specified maps on and off,\nsetting up appropriate map flags. In GVG mode, maps behave as if during\nthe time of WoE, even though WoE itself may or may not actually be in\neffect."
    },
    {
        "command": "flagemblem(<guild id>)",
        "line": 7714,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "5.2 - Guild-Related Commands",
        "description": "*flagemblem(<guild id>)\n\nThis command only works when run by the NPC objects which have sprite id\nGUILD_FLAG (722), which is a 3D guild flag sprite. If it isn't, the data\nwill change, but nothing will be seen by anyone. If it is invoked in\nthat manner, the emblem of the specified guild will appear on the flag,\nthough, if any players are watching it at this moment, they will not see\nthe emblem change until they move out of sight of the flag and return.\n\nThis is commonly used in official guildwar scripts with a function call\nwhich returns a guild id:\n\n\/\/ This will change the emblem on the flag to that of the guild that owns\n\/\/ \"guildcastle\"\n\n\tflagemblem(getcastledata(\"guildcastle\", 1));"
    },
    {
        "command": "guardian(\"<map name>\", <x>, <y>, \"<name to show>\", <mob id>{, \"<event label>\"{, <guardian index>}})",
        "line": 7733,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "5.2 - Guild-Related Commands",
        "description": "*guardian(\"<map name>\", <x>, <y>, \"<name to show>\", <mob id>{, \"<event label>\"{, <guardian index>}})\n\nThis command is roughly equivalent to monster(), but is meant to be used\nwith castle guardian monsters and will only work with them. It will set\nthe guardian characteristics up according to the castle's investment\nvalues and otherwise set the things up that only castle guardians need.\n\nReturns the id of the mob or 0 if an error occurred.\nWhen 'guardian index' isn't supplied it produces a temporary guardian.\nTemporary guardians are not saved with the castle and can't be accessed by\nguardianinfo."
    },
    {
        "command": "guardianinfo(\"<map name>\", <guardian number>, <type>)",
        "line": 7747,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "5.2 - Guild-Related Commands",
        "description": "*guardianinfo(\"<map name>\", <guardian number>, <type>)\n\nThis function will return various info about the specified guardian, or -1\nif it fails for some reason. It is primarily used in the castle manager\nNPC.\n\nMap name and guardian number (value between 0 and 7) define the target.\nType indicates what information to return:\n 0 - visibility (whether the guardian is installed or not)\n 1 - max. hp\n 2 - current hp"
    },
    {
        "command": "npcspeed(<speed value>)",
        "line": 7765,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*npcspeed(<speed value>)\n*npcwalkto(<x>, <y>)\n*npcstop()\n\nThese commands will make the NPC object in question move around the map.\nAs they currently are, they are a bit buggy and are not useful for much\nmore than making an NPC move randomly around the map.\n\nnpcspeed() will set the NPCs walking speed to a specified value. As in the\n@speed GM command, 200 is the slowest possible speed while 0 is the\nfastest possible (instant motion). 100 is the default character walking\nspeed.\nnpcwalkto() will start the NPC sprite moving towards the specified\ncoordinates on the same map as it is currently on. The script proceeds\nimmediately after the NPC begins moving.\nnpcstop() will stop the motion.\n\nWhile in transit, the NPC will be clickable, but invoking it will cause it\nto stop moving, which will make it's coordinates different from what the\nclient computed based on the speed and motion coordinates. The effect is\nrather unnerving.\n\nOnly a few NPC sprites have walking animations, and those that do, do not\nget the animation invoked when moving the NPC, due to the problem in the\nNPC walking code, which looks a bit silly. You might have better success\nby defining a job-sprite based sprite id in 'db\/mob_avail.txt' with this."
    },
    {
        "command": "movenpc(\"<NPC name>\", <x>, <y>{, <dir>})",
        "line": 7794,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*movenpc(\"<NPC name>\", <x>, <y>{, <dir>})\n\nThis command looks like the npcwalktoxy function, but is a little different.\n\nWhile npcwalktoxy just makes the NPC 'walk' to the coordinates given\n(which sometimes gives problems if the path isn't a straight line without\nobjects), this command just moves the NPC. It basically warps out and in\non the current and given spot. Direction can be used to change the NPC's\nfacing direction.\n\nExample:\n\n\/\/ This will move Bugga from to the coordinates 100,20 (if those\n\/\/ coordinates are legit).\n\tmovenpc(\"Bugga\", 100, 20);"
    },
    {
        "command": "navigateto(\"<map>\"{,<x>,<y>,<flag>,<hide_window>,<monster_id>,<char_id>});",
        "line": 7812,
        "category": "5 - Mob \/ NPC Related Commands",
        "sub_category": "",
        "description": "*navigateto(\"<map>\"{,<x>,<y>,<flag>,<hide_window>,<monster_id>,<char_id>});\n\nGenerates a navigation for attached or specified character. Requires client\n2011-10-10aRagEXE or newer.\n\nThe flag specifies how the client will calculate the specific route.\n\nValid flags are:\n NAV_NONE - No services\n NAV_AIRSHIP_ONLY - Airship only\n NAV_SCROLL_ONLY - Scroll only\n NAV_AIRSHIP_AND_SCROLL - Airship and Scroll\n NAV_KAFRA_ONLY - Kafra only\n NAV_KAFRA_AND_AIRSHIP - Kafra and Airship\n NAV_KAFRA_AND_SCROLL - Kafra and Scroll\n NAV_ALL - All services\n\nWhen flag is not specified, the default value is NAV_KAFRA_AND_AIRSHIP.\n\nThe hide_window specifies whether to display (0) or hide (1) the navigation window.\nBy default the window is hidden.\n\nYou can specify the monster_id in combination with a mapname to make the\nnavigation system tell you, that you have reached the desired mob.\n\nNote:\nThe client requires custom monster spawns be in the navigation file\nfor using the embedded client Navigation feature to work properly. In this\ninstance sending the player to the map where the monster spawns is a simpler\nsolution rather than sending the map and the monster_id."
    },
    {
        "command": "debugmes(\"<format string>\"{, <param>{, ...}})",
        "line": 7849,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*debugmes(\"<format string>\"{, <param>{, ...}})\n\n\t@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\t@ \/!\\ This command is deprecated @\n\t@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\nThis command will print a message in the server console (map-server window),\nafter applying the same format-string replacements as sprintf(). It will not be\ndisplayed anywhere else. Returns true on success.\n\nExample:\n\n\t\/\/ Displays \"NAME has clicked me!\" in the map-server window.\n\tdebugmes(\"%s has clicked me!\", strcharinfo(PC_NAME));\n\n\tdebugmes(\"\\033[0;32mHello World\"); \/\/ supports ANSI escape sequences"
    },
    {
        "command": "consolemes(\"<type>\", \"<format string>\"{,<param>{, ...}})",
        "line": 7868,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*consolemes(\"<type>\", \"<format string>\"{,<param>{, ...}})\n\nThis command will print a message in the server console (map-server window),\nafter applying the same format-string replacements as sprintf(). It will not be\ndisplayed anywhere else. Returns true on success.\n\nList of available <type> are:\n\tCONSOLEMES_DEBUG   = 0\n\tCONSOLEMES_ERROR   = 1\n\tCONSOLEMES_WARNING = 2\n\tCONSOLEMES_INFO    = 3\n\tCONSOLEMES_STATUS  = 4\n\tCONSOLEMES_NOTICE  = 5\n\nExample:\n\n\t\/\/ Displays \"NAME has clicked me!\" in the map-server window.\n\tconsolemes(CONSOLEMES_DEBUG, \"%s has clicked me!\", strcharinfo(PC_NAME));\n\n\tconsolemes(CONSOLEMES_DEBUG, \"\\033[0;32mHello World\"); \/\/ supports ANSI escape sequences"
    },
    {
        "command": "logmes(\"<message>\"{, <log type>})",
        "line": 7891,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*logmes(\"<message>\"{, <log type>})\n\nThis command will write the message given to the map server log files, as\nspecified in 'conf\/map\/logs.conf'. If SQL logging is enabled, the message will\ngo to the specified log table. If logs are not enabled, nothing will happen.\n\nLog types are:\n\nLOGMES_NPC - log to the 'npclog' table (Default)\nLOGMES_ATCOMMAND - log to the 'atcommandlog' table\n\nExample:\n\n    logmes(\"foobar\");\n    logmes(\"foobar\", LOGMES_ATCOMMAND);"
    },
    {
        "command": "globalmes(\"<message>\"{, \"<NPC name>\"})",
        "line": 7909,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*globalmes(\"<message>\"{, \"<NPC name>\"})\n\nThis command will send a message to the chat window of all currently\nconnected characters.\n\nIf NPC name is specified, the message will be sent as if the sender would\nbe the NPC with the said name."
    },
    {
        "command": "channelmes(\"<#channel>\", \"<message>\")",
        "line": 7919,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*channelmes(\"<#channel>\", \"<message>\")\n\nThis command will send a message to the specified chat channel.\n\nThe sent message will not include any character's names.\n\nFor special channels, such as #map and #ally, the attached RID's map or guild\nwill be used.\n\nIf the channel doesn't exist (or, in the case of a character-specific channel,\nno RID is attached), false will be returned. In case of success, true is\nreturned."
    },
    {
        "command": "addchannelhandler(\"<#channel>\", \"<NPC::OnEvent>\")",
        "line": 7934,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*addchannelhandler(\"<#channel>\", \"<NPC::OnEvent>\")\n\nThis command will trigger the specified event every time a player\ntalks in the specified channel, with said player as attached rid.\nIt assigns the message to @channelmes$\n\nOnChannelMessage:\n\tchannelmes(\"#chan\", \"Echo: \" + @channelmes$);\n\tend;\n\nOnInit:\n\taddchannelhandler(\"#chan\", \"NPC::OnChannelMessage\");"
    },
    {
        "command": "removechannelhandler(\"<#channel>\", \"<NPC::OnEvent>\")",
        "line": 7949,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*removechannelhandler(\"<#channel>\", \"<NPC::OnEvent>\")\n\nRemoves a channel handler added by addchannelhandler()"
    },
    {
        "command": "rand(<number>{, <number>})",
        "line": 7954,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*rand(<number>{, <number>})\n\nThis function returns a number ...\n(if you specify one) ... randomly positioned between 0 and the number you\n                         specify -1.\n(if you specify two) ... randomly positioned between the two numbers you\n                         specify.\n\nrand(10)  would result in 0, 1, 2, 3, 4, 5, 6, 7, 8 or 9\nrand(0, 9) would result in 0, 1, 2, 3, 4, 5, 6, 7, 8 or 9\nrand(2, 5) would result in 2, 3, 4 or 5"
    },
    {
        "command": "viewpoint(<action>, <x>, <y>, <point number>, <color>)",
        "line": 7968,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*viewpoint(<action>, <x>, <y>, <point number>, <color>)\n\nThis command will mark places on the mini map in the client connected to\nthe invoking character. It uses the normal X and Y coordinates from the\nmain map. The colors of the marks are defined using a hexadecimal number,\nsame as the ones used to color text in mes() output, but are written as\nhexadecimal numbers in C. (They look like 0x<six numbers>.)\n\nAction is what you want to do with a point, 1 will set it, while 2 will\nclear it. 0 will also set it, but automatically removes the point after 15\nseconds.\nPoint number is the number of the point - you can have several. If more\nthan one point is drawn at the same coordinates, they will cycle, which\ncan be used to create flashing marks.\n\n\t\/\/ This command will show a mark at coordinates X 30 Y 40, is mark\n\t\/\/ number 1, and will be red.\n\n\tviewpoint(1, 30, 40, 1, 0xFF0000);\n\nThis will create three points:\n\n\tviewpoint(1, 30, 40, 1, 0xFF0000);\n\tviewpoint(1, 35, 45, 2, 0xFF0000);\n\tviewpoint(1, 40, 50, 3, 0xFF0000);\n\nAnd this is how you remove them:\n\n\tviewpoint(2, 30, 40, 1, 0xFF0000);\n\tviewpoint(2, 35, 45, 2, 0xFF0000);\n\tviewpoint(2, 40, 50, 3, 0xFF0000);\n\nThe client determines what it does with the points entirely, the server\nkeeps no memory of where the points are set whatsoever."
    },
    {
        "command": "cutin(\"<filename>\", <position>)",
        "line": 8005,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*cutin(\"<filename>\", <position>)\n\nThis command will display a picture, usually an NPC illustration, also\ncalled cutin, for the currently attached client. The position parameter\ndetermines the placement of the illustration and takes following values:\n\n\t0 - bottom left corner\n\t1 - bottom middle\n\t2 - bottom right corner\n\t3 - middle of screen in a movable window with an empty title bar\n\t4 - middle of screen without the window header, but still movable\n\nThe picture is read from data\\texture\\\uc720\uc800\uc778\ud130\ud398\uc774\uc2a4\\illust, from both the\nGRF archive and data folder, and is required to be a bitmap. The file\nextension .bmp can be omitted. Magenta color (#ff00ff) is considered\ntransparent. There is no limit placed on the size of the illustrations\nby the client, although loading of large pictures (about 700x700 and\nlarger) causes the client to freeze shortly (lag). Typically the size is\nabout 320x480. New illustrations can be added by just putting the new file\ninto the location above.\n\nThe client is able to display only one cutin at the same time and each new\none will cause the old one to disappear. To delete the currently displayed\nillustration without displaying a new one, an empty file name and position\n255 must be used.\n\n\t\/\/ Displays the Comodo Kafra illustration in lower right corner.\n\tcutin(\"kafra_07\", 2);\n\n\t\/\/ Typical way to end a script, which displayed an illustration during a\n\t\/\/ dialog with a player.\n\tmes(\"See you.\");\n\tclose2();\n\tcutin(\"\", 255);\n\tend;"
    },
    {
        "command": "pet(<pet id>)",
        "line": 8043,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*pet(<pet id>)\n\nThis command is used in all the item scripts for taming items. Running\nthis command will make the pet catching cursor appear on the client\nconnected to the invoking character, usable on the monsters with the\nspecified pet ID number. It will still work outside an item script.\n\nA full list of pet IDs can be found inside 'db\/pet_db.txt'"
    },
    {
        "command": "emotion(<emotion number>{, <target>{, \"<target name>\"}})",
        "line": 8054,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*emotion(<emotion number>{, <target>{, \"<target name>\"}})\n\nThis command makes an object display an emotion sprite above their own as\nif they were doing that emotion. For a full list of emotion numbers, see\n'doc\/constants.md' under 'Emotes'. The not so obvious ones are 'e_what' (a\nquestion mark) and 'e_gasp' (the exclamation mark).\n\nThe optional target parameter specifies who will get the emotion on top of\ntheir head. If false (default if omitted), the NPC in current use will show\nthe emotion, if true, the player that is running the script will display it.\n\nTarget name parameter allows to display emotion on top of other NPC\/PC\nwithout event labels. If specified name is not found, command does nothing."
    },
    {
        "command": "misceffect(<effect number>)",
        "line": 8070,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*misceffect(<effect number>)\n\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n    @ \/!\\ This command is deprecated @\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\nThis command, if run from an NPC object that has a sprite, will call up a\nspecified effect number, centered on the NPC sprite. If the running code\ndoes not have an object ID (a 'floating' NPC) or is not running from an\nNPC object at all (an item script) the effect will be centered on the\ncharacter who's RID got attached to the script, if any. For usable item\nscripts, this command will create an effect centered on the player using\nthe item.\n\nThis command is deprecated and it should not be used in new scripts, as it is\nlikely to be removed at a later time. Please use specialeffect instead,\nie: specialeffect(<effect number>, <send target>, <unit id>)"
    },
    {
        "command": "soundeffect(\"<effect filename>\", <type>)",
        "line": 8090,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*soundeffect(\"<effect filename>\", <type>)\n*soundeffectall(\"<effect filename>\", <type>{, \"<map name>\"}{, <x0>, <y0>, <x1>, <y1>})\n\nThese two commands will play a sound effect to either the invoking\ncharacter only (soundeffect()) or multiple characters (soundeffectall()).\nIf the running code does not have an object ID (a 'floating' NPC) or is\nnot running from an NPC object at all (an item script) the sound will be\ncentered on the character who's RID got attached to the script, if any.\nIf it does, it will be centered on that object. (an NPC sprite)\n\nEffect filename is the filename in a GRF. It must have the .wav extension.\n\nIt's not quite certain what the 'type' actually does, it is sent to the\nclient directly. It probably determines which directory to play the effect\nfrom. It's certain that giving 0 for the number will play sound files from\n'\\data\\wav\\', but where the other numbers will read from is unclear.\n\nThe sound files themselves must be in the PCM format, and file names\nshould also have a maximum length of 23 characters including the .wav\nextension:\n\nsoundeffect(\"1234567890123456789.wav\", 0); \/\/ will play the soundeffect\nsoundeffect(\"12345678901234567890.wav\", 0); \/\/ throws gravity error\n\nYou can add your own effects this way, naturally."
    },
    {
        "command": "playbgm(\"<BGM filename>\")",
        "line": 8118,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*playbgm(\"<BGM filename>\")\n*playbgmall(\"<BGM filename>\"{, \"<map name>\"{, <x0>, <y0>, <x1>, <y1>}})\n\nThese two commands will play a Background Music to either the invoking\ncharacter only (playbgm()) or multiple characters (playbgmall()).\n\nBGM filename is the filename in \/BGM\/ folder. It has to be in .mp3\nextension, but it's not required to specify the extension in the script.\n\nIf coordinates are omitted, BGM will be broadcasted on the entire map. If\nthe map name is also omitted the BGM will be played for the entire server.\n\nYou can add your own BGMs this way, naturally."
    },
    {
        "command": "pvpon(\"<map name>\")",
        "line": 8134,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*pvpon(\"<map name>\")\n*pvpoff(\"<map name>\")\n\nThese commands will turn PVP mode for the specified maps on and off.\nBeside setting the flags referred to in setmapflag(), pvpon() will also\ncreate a PVP timer and ranking as will @pvpon GM command do."
    },
    {
        "command": "atcommand(\"<command>\")",
        "line": 8143,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*atcommand(\"<command>\")\n\nThis command will run the given command line exactly as if it was typed in\nfrom the keyboard by the player connected to the invoking character, and\nthat character belonged to an account which had GM level 99.\n\n\t\/\/ This will ask the invoker for a character name and then use the\n\t\/\/ '@nuke' GM command on them, killing them mercilessly.\n\tinput(.@player$);\n\tatcommand(\"@nuke \"+.@player$);\n\nUse of this command is not recommended unless you know what you're\ndoing, since not all atcommands are intended to be used by the script\nengine."
    },
    {
        "command": "charcommand(\"<command>\")",
        "line": 8160,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*charcommand(\"<command>\")\n\nThis command will run the given command line exactly as if it was typed in\nfrom the keyboard from a character that belonged to an account which had\nGM level 99.\n\nThe commands can also run without an attached rid.\n\n\t\/\/ This would do the same as above, but now\n\t\/\/ it doesn't need a player attached by default.\n\tcharcommand(\"#option 0 0 0 Roy\");\n\nUse of this command is not recommended unless you know what you're\ndoing, since not all atcommands are intended to be used by the script\nengine."
    },
    {
        "command": "bindatcmd(\"command\", \"<NPC object name>::<event label>\"{, <group level>, <group level char>, <log>})",
        "line": 8178,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*bindatcmd(\"command\", \"<NPC object name>::<event label>\"{, <group level>, <group level char>, <log>})\n\nThis command will bind a NPC event label to an atcommand. Upon execution\nof the atcommand, the user will invoke the NPC event label. Each atcommand\nis only allowed one binding. If you rebind, it will override the original\nbinding. If group level is provided, only users of that group level or\nabove will be able to access the command, if not provided, everyone will\nbe able to access the command.\n\"group level char\" is the minimum group level required for the label to be\nused on others like a char command would, e.g. \"#command \"target\" params\",\nwhen not provided, \"group level char\" defaults to 99.\n\"log\" whether to log the usages of this command with the atcommand log\n(true = log, false = no log), default is to not log.\n\nThe following variables are set upon execution:\n\t.@atcmd_command$      =  The name of the @command used.\n\t.@atcmd_parameters$[] =  Array containing the given parameters,\n\t                         starting from an index of 0.\n\t.@atcmd_numparameters =  The number of parameters defined.\n\nParameters are split on spaces. Multiple spaces aren't grouped together, and\nwill create multiple (empty) arguments.\nAny leading spaces before the first parameter will be omitted.\n\nUsage example:\n\nWhen a user types the command \"@test\", an angel effect will be shown."
    },
    {
        "command": "add_group_command(\"<command>\", <group id>, <use on self>, <use on other>)",
        "line": 8261,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*add_group_command(\"<command>\", <group id>, <use on self>, <use on other>)\n\nAllows to explicitly change the command permissions for a specific group.\n\nThis command bypasses group inheritance, which means groups inheriting from\nthe specified <group id> will NOT inherit the specified permission. You should\nuse add_group_command() for every group you want to give permission to.\n\nExample:\n\tbindatcmd(\"foobar\", \"NPC::OnUseCommand\", 99, 99, 0); \/\/ define the command\n\tadd_group_command(\"foobar\", 2, true, false); \/\/ allow group 2 to use @foobar\n\tadd_group_command(\"foobar\", 5, true, true); \/\/ allow group 5 to use @foobar and #foobar"
    },
    {
        "command": "unbindatcmd(\"command\")",
        "line": 8276,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*unbindatcmd(\"command\")\n\nThis command will unbind a NPC event label from an atcommand."
    },
    {
        "command": "useatcmd(\"command\")",
        "line": 8282,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*useatcmd(\"command\")\n\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n    @ \/!\\ This command is deprecated @\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\nThis command will execute an atcommand binding on the attached RID from a\nscript. The three .@atcmd_***** variables will NOT be set when invoking\nscripts-atcommands this way.\n\nThis command is deprecated and it should not be used in new scripts, as it is\nlikely to be removed at a later time. Instead, you should directly call to the\nevent label of the binding using timers or doevent(). For built-in commands,\natcommand() should be used instead."
    },
    {
        "command": "can_use_command(\"<command>\"{, <account id>})",
        "line": 8299,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*can_use_command(\"<command>\"{, <account id>})\n\nChecks if the attached or specified player can use the specified\natcommand and returns true or false accordingly. Works for both\nbuilt-in atcommands and custom atcommands."
    },
    {
        "command": "has_permission(<permission>{, <account id>})",
        "line": 8307,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*has_permission(<permission>{, <account id>})\n*has_permission(\"<permission>\"{, <account id>})\n\nCheck if the attached or specified player has the specified permission\nand returns true or false accordingly. See doc\/permissions.md for\ndetails about permissions.\n\nValid <permission> are:\n\n\tPERM_TRADE\n\tPERM_PARTY\n\tPERM_ALL_SKILL\n\tPERM_USE_ALL_EQUIPMENT\n\tPERM_SKILL_UNCONDITIONAL\n\tPERM_JOIN_ALL_CHAT\n\tPERM_NO_CHAT_KICK\n\tPERM_HIDE_SESSION\n\tPERM_WHO_DISPLAY_AID\n\tPERM_RECEIVE_HACK_INFO\n\tPERM_WARP_ANYWHERE\n\tPERM_VIEW_HPMETER\n\tPERM_VIEW_EQUIPMENT\n\tPERM_USE_CHECK\n\tPERM_USE_CHANGEMAPTYPE\n\tPERM_USE_ALL_COMMANDS\n\tPERM_RECEIVE_REQUESTS\n\tPERM_SHOW_BOSS\n\tPERM_DISABLE_PVM\n\tPERM_DISABLE_PVP\n\tPERM_DISABLE_CMD_DEAD\n\tPERM_HCHSYS_ADMIN\n\tPERM_TRADE_BOUND\n\tPERM_DISABLE_PICK_UP\n\tPERM_DISABLE_STORE\n\tPERM_DISABLE_EXP\n\tPERM_DISABLE_SKILL_USAGE\n\tPERM_BYPASS_NOSTORAGE\n\nExample:\n\n\tif (has_permission(PERM_WARP_ANYWHERE)) {\n\t\t\/\/do something\n\t}\n\nIt is also possible to pass a string for plugin permissions:\n\n\tif (has_permission(\"show_version\")) {\n\t\t\/\/do something\n\t}"
    },
    {
        "command": "unitskilluseid(<GID>, <skill id>, <skill lvl>{, <target id>})",
        "line": 8363,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*unitskilluseid(<GID>, <skill id>, <skill lvl>{, <target id>})\n*unitskilluseid(<GID>, \"<skill name>\", <skill lvl>{, <target id>})\n*unitskillusepos(<GID>, <skill id>, <skill lvl>, <x>, <y>)\n*unitskillusepos(<GID>, \"<skill name>\", <skill lvl>, <x>, <y>)\n\nThis is the replacement of the older commands, these use the same values\nfor GID as the other unit* commands (See 'GID').\n\nSkill ID is the ID of the skill, skill level is the level of the skill.\nFor the position, the x and y are given in the unitskillusepos."
    },
    {
        "command": "npcskill(<skill id>, <skill lvl>, <stat point>, <NPC level>)",
        "line": 8376,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*npcskill(<skill id>, <skill lvl>, <stat point>, <NPC level>)\n*npcskill(\"<skill name>\", <skill lvl>, <stat point>, <NPC level>)\n\nThis command causes the attached NPC object to cast a skill on the\nattached player. The skill will have no cast time or cooldown. The player\nmust be within the default skill range or the command will fail silently.\n\nThe \"stat point\" parameter temporarily sets all NPC stats to the given\nvalue, and \"NPC level\" is the temporary level of the NPC (used in some\nskills). Neither value can be greater than the max level defined in\nconfig, and will not work properly if the NPC has a mob sprite.\n\n\t\/\/ Casts Level 10 Heal on the attached player, calculated with\n\t\/\/ all stats 99 and base level 60.\n\tnpcskill(AL_HEAL, 10, 99, 60);"
    },
    {
        "command": "setnpcdistance(<distance>)",
        "line": 8394,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*setnpcdistance(<distance>)\n\nThis command can reduce distance from where npc can be clicked.\nUsefull to use from OnInit event.\n\n\t\/\/ Set distance to one tile on server load\n\tOnInit:\n\tsetnpcdistance(1);"
    },
    {
        "command": "getnpcdir({<name>})",
        "line": 8405,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*getnpcdir({<name>})\n\nReturn current npc direction for parameter \"name\" or for attached npc\nif it missing. If name missing and not attached npc, return -1.\n\nExample:\n\t.@dir = getnpcdir();"
    },
    {
        "command": "setnpcdir({<name>, }<direction>)",
        "line": 8415,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*setnpcdir({<name>, }<direction>)\n\nSet npc direction. If npc name missing, will be used attached npc.\n\nExample:\n\tsetnpcdir(DIR_WEST);"
    },
    {
        "command": "getnpcclass({<name>})",
        "line": 8424,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*getnpcclass({<name>})\n\nReturn npc class\/sprite id for npc with given name or for attached npc.\nIf name missing and no attached npc, return -1.\n\nExample:\n\t.@class = getnpcclass();"
    },
    {
        "command": "day();",
        "line": 8434,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*day();\n*night();\n\nThese two commands will switch the entire server between day and night\nmode respectively. If your server is set to cycle between day and night by\nconfiguration, it will eventually return to that cycle.\n\nExample:"
    },
    {
        "command": "pcre_match(\"<string>\", \"<regex>\")",
        "line": 8464,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*pcre_match(\"<string>\", \"<regex>\")\n\nThe string <string> will be searched for a match to the regular expression\n<regex>, and the number of matches will be returned.\n\nAn alternative way to invoke this command is to use the operators '~=' or '~!'.\nThe operator '~=' is exactly the same as pcre_match, while the operator '~!'\nwill return true if no matches were found, or false if at least a match was found.\n\n\tif (pcre_match(\"string\", \"regex\"))\n\t\tmes(\"There was a match.\");\n\tif (\"string\" ~= \"regex\")\n\t\tmes(\"There was a match.\");\n\tif (\"string\" ~! \"regex\")\n\t\tmes(\"There were no matches.\");\n\nYou can find more usage examples in the test script npc\/custom\/test.txt.\n\nUsing regular expressions is high wizardry. But with this high wizardry\ncomes unparalleled power of text manipulation. For an explanation of what\na regular expression pattern is, see a few web pages:\n\nhttp:\/\/www.regular-expressions.info\/\nhttp:\/\/www.weitz.de\/regex-coach\/\n\nAdditionally, the following temporary variables will be filled (unless the\ncommand is invoked as '~!'):"
    },
    {
        "command": "defpattern(<set number>, \"<regular expression pattern>\", \"<event label>\")",
        "line": 8505,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*defpattern(<set number>, \"<regular expression pattern>\", \"<event label>\")\n*activatepset(<set number>)\n*deactivatepset(<set number>)\n*deletepset(<set number>)\n\nThey will make the NPC object listen for text spoken publicly by players\nand match it against regular expression patterns, then trigger labels\nassociated with these regular expression patterns.\n\nPatterns are organized into sets, which are referred to by a set number.\nYou can have multiple sets patterns, and multiple patterns may be active\nat once. Numbers for pattern sets start at 1.\n\ndefpattern() will associate a given regular expression pattern with an\nevent label. This event will be triggered whenever something a player says\nis matched by this regular expression pattern, if the pattern is currently\nactive.\n\nactivatepset() will make the pattern set specified active. An active\npattern will enable triggering labels defined with defpattern(), which\nwill not happen by default.\ndeactivatepset() will deactivate a specified pattern set. Giving -1 as a\npattern set number in this case will deactivate all pattern sets defined.\n\ndeletepset() will delete a pattern set from memory, so you can create a\nnew pattern set in its place.\n\nFor an example of this in use, see doc\/sample\/npc_test_pcre.txt\n\nWith this you could, for example, automatically punish players for asking\nfor Zeny in public places, or alternatively, automatically give them Zeny\ninstead if they want it so much."
    },
    {
        "command": "pow(<number>, <power>)",
        "line": 8540,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*pow(<number>, <power>)\n\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n    @ \/!\\ This command is deprecated @\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\nReturns the result of the calculation.\n\nExample:\n\t.@i = pow(2, 3); \/\/ .@i will be 8\n\nThis command is deprecated and it should not be used in new scripts, as it is\nlikely to be removed at a later time. Please use the exponentiation operator,\nie: (2 ** 3) instead of pow(2, 3)"
    },
    {
        "command": "log10(<number>)",
        "line": 8557,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*log10(<number>)\n\nReturns log base 10 of the number.\n\nNote: The value is truncated to integer.\n\nExample:\n\t.@i = log10(100); \/\/ .@i will be 2"
    },
    {
        "command": "sqrt(<number>)",
        "line": 8568,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*sqrt(<number>)\n\nReturns square-root of number.\n\nNote: The value is truncated to integer.\n\nExample:\n\t.@i = sqrt(25); \/\/ .@i will be 5"
    },
    {
        "command": "distance(<x0>, <y0>, <x1>, <y1>)",
        "line": 8579,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*distance(<x0>, <y0>, <x1>, <y1>)\n\nReturns distance between 2 points.\n\nNote: When Hercules is configured to use circular areas, the Euclidean distance\nis returned, otherwise the Chebyshev distance. The value is truncated to\ninteger.\n\nExample:\n\t.@i = distance(100, 200, 101, 202);"
    },
    {
        "command": "min(<number>{, <number>...<number>})",
        "line": 8592,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*min(<number>{, <number>...<number>})\n*max(<number>{, <number>...<number>})\n\nReturns the smallest (or biggest) from the set of given numbers.\n\nExample:\n\t.@minimum = min(1, -6, -2, 8, 2); \/\/ .@minimum will be equal to -6\n\t.@maximum = max(0, 5, 10, 4); \/\/ .@maximum will be equal to 10\n\t.@level = min(BaseLevel, 70); \/\/ .@level will be the character's base level, capped to 70"
    },
    {
        "command": "cap_value(<number>, <min>, <max>)",
        "line": 8604,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*cap_value(<number>, <min>, <max>)\n\nReturns the number but capped between <min> and <max>.\n\nExample:\n\t\/\/ capped between 0 ~ 100\n\t.@value = cap_value(10, 0, 100);   \/\/ .@value will be equal to 10\n\t.@value = cap_value(1000, 0, 100); \/\/ .@value will be equal to 100\n\t.@value = cap_value(-10, 3, 100);  \/\/ .@value will be equal to 3"
    },
    {
        "command": "md5(\"<string>\")",
        "line": 8616,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*md5(\"<string>\")\n\nReturns the md5 checksum of a number or string.\n\nExample:\n\tmes md5(12345);\n\tmes md5(\"12345\"); \/\/ Will both display 827ccb0eea8a706c4c34a16891f84e7b\n\tmes md5(\"qwerty\");\/\/ Will display d8578edf8458ce06fbc5bb76a58c5ca4"
    },
    {
        "command": "swap(<variable>, <variable>)",
        "line": 8627,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*swap(<variable>, <variable>)\n\nSwap the value of 2 variables. Both sides must be same integer or string type.\n\nExample:\n\t.@var1 = 111;\n\t.@var2 = 222;\n\tswap(.@var1, .@var2);\n\tmes(\"var1 = \"+ .@var1); \/\/ return 222\n\tmes(\"var2 = \"+ .@var2); \/\/ return 111"
    },
    {
        "command": "query_sql(\"your MySQL query\"{, <array variable>{, <array variable>{, ...}}})",
        "line": 8640,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*query_sql(\"your MySQL query\"{, <array variable>{, <array variable>{, ...}}})\n*query_logsql(\"your MySQL query\"{, <array variable>{, <array variable>{, ...}}})\n\nExecutes an SQL query. A 'select' query can fill array variables with up\nto 128 rows of values, and will return the number of rows (the array size).\n\nNote that query_sql() runs on the main database while query_logsql() runs\non the log database.\n\nExample:\n\t.@nb = query_sql(\"select name, fame from `char` ORDER BY fame DESC LIMIT 5\", .@name$, .@fame);\n\tmes(\"Hall Of Fame: TOP5\");\n\tmes(\"1.\"+.@name$[0]+\"(\"+.@fame[0]+\")\"); \/\/ Will return a person with the biggest fame value.\n\tmes(\"2.\"+.@name$[1]+\"(\"+.@fame[1]+\")\");\n\tmes(\"3.\"+.@name$[2]+\"(\"+.@fame[2]+\")\");\n\tmes(\"4.\"+.@name$[3]+\"(\"+.@fame[3]+\")\");\n\tmes(\"5.\"+.@name$[4]+\"(\"+.@fame[4]+\")\");"
    },
    {
        "command": "escape_sql(<value>)",
        "line": 8660,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*escape_sql(<value>)\n\nConverts the value to a string and escapes special characters so that it's\nsafe to use in query_sql(). Returns the escaped form of the given value.\n\nExample:\n\t.@str$ = \"John's Laptop\";\n\t.@esc_str$ = escape_sql(.@name$); \/\/ Escaped string: John\\'s Laptop"
    },
    {
        "command": "setitemscript(<item id>, <\"{ new item script }\">{, <type>})",
        "line": 8671,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*setitemscript(<item id>, <\"{ new item script }\">{, <type>})\n\nSet a new script bonus to the Item. Very useful for game events.\nYou can remove an item's itemscript by leaving the itemscript argument\nempty. Returns 1 on success, or 0 on fail (item_id not found or new item\nscript is invalid).\nType can optionally be used indicates which script to set (default is 0):\n 0 - Script\n 1 - OnEquip_Script\n 2 - OnUnequip_Script\n\nExample:\n\nsetitemscript(Silver_Ring_, \"{ if (isequipped(Santa's_Hat) == 0) end; if (getskilllv(AL_TELEPORT)) { skill(MC_IDENTIFY, 1); } else { skill(AL_TELEPORT, 1+isequipped(Santa's_Hat)); } }\");\nsetitemscript(Silver_Ring_, \"\");"
    },
    {
        "command": "atoi(\"<string>\")",
        "line": 8689,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*atoi(\"<string>\")\n*axtoi(\"<string>\")\n*strtol(\"string\", base)\n\nThese commands are used to convert strings to numbers. atoi() will\ninterpret given string as a decimal number (base 10), while axtoi()\ninterprets strings as hexadecimal numbers (base 16). strtol() lets\nthe user specify a base (valid range is between 2 and 36 inclusive,\nor the special value0, which means auto-detection).\n\nThe atoi() and strtol() functions conform to the C functions with the same\nnames, and axtoi() is the same as strtol(), with a base of 16. Results are\nclamped to signed 32 bit int range (INT_MIN ~ INT_MAX)\n\nExample:\n\n.@var = atoi(\"11\");        \/\/ Sets .@var to 11\n.@var = axtoi(\"FF\");       \/\/ Sets .@var to 255\nmes(axtoi(\"11\"));          \/\/ Displays 17 (1 = 1, 10 = 16)\n.@var = strtol(\"11\", 10);  \/\/ Sets .@var to 11 (11 base 10)\n.@var = strtol(\"11\", 16);  \/\/ Sets .@var to 17 (11 base 16)\n.@var = strtol(\"11\", 0);   \/\/ Sets .@var to 11 (11 base 10, auto-detected)\n.@var = strtol(\"0x11\", 0); \/\/ Sets .@var to 17 (11 base 16, auto-detected because of the \"0x\" prefix)\n.@var = strtol(\"011\", 0);  \/\/ Sets .@var to 9 (11 base 8, auto-detected because of the \"0\" prefix)\n.@var = strtol(\"11\", 2);   \/\/ Sets .@var to 3 (binary 11)"
    },
    {
        "command": "compare(\"<string>\", \"<substring>\")",
        "line": 8717,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*compare(\"<string>\", \"<substring>\")\n\nThis command returns true when the substring is in the main string or\nfalse otherwise. This command is not case sensitive.\n\nExamples:\n\n\/\/dothis(); will be executed ('Bloody Murderer' contains 'Blood').\n\tif (compare(\"Bloody Murderer\", \"Blood\"))\n\t\tdothis();\n\/\/dothat(); will not be executed ('Blood butterfly' does not contain 'Bloody').\n\tif (compare(\"Blood Butterfly\", \"Bloody\"))\n\t\tdothat();"
    },
    {
        "command": "strcmp(\"<string>\", \"<string>\")",
        "line": 8733,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*strcmp(\"<string>\", \"<string>\")\n\nThis command compares two strings and is similar to strcmp in C.\n\nReturn Values:\n\t>0  : String 1 > String 2\n\t0  : Strings are equal\n\t<0 : String 1 < String 2\n\nExamples:\n\t.@a = strcmp(\"abcdef\", \"ABCDEF\");\n\tif (.@a > 0){\n\t\tmes(\".@a is greater than 0.\"); \/\/Output is this.\n\t} else {\n\t\tmes(\".@a is less or equal to 0\");\n\t}"
    },
    {
        "command": "getstrlen(\"<string>\")",
        "line": 8752,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*getstrlen(\"<string>\")\n\nThis function will return the length of the string given as an argument.\nIt is useful to check if anything input by the player exceeds name length\nlimits and other length limits and asking them to try to input something\nelse."
    },
    {
        "command": "isstr(<argument>)",
        "line": 8761,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*isstr(<argument>)\n\nThis command checks if the given <argument> is a string (1),\nan integer (0) or something else (2).\n\nExample:\n\n    isstr(69); \/\/ outputs 0\n    isstr(\"69\"); \/\/ outputs 1"
    },
    {
        "command": "getdatatype(<argument>)",
        "line": 8773,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*getdatatype(<argument>)\n\nThis command returns the raw type of the given <argument>. Unlike\nisstr, this command does not evaluate the argument. The returned type\nis bitmasked.\n\ntypes include:\n\n\tDATATYPE_NIL\n\tDATATYPE_STR\n\tDATATYPE_INT\n\tDATATYPE_CONST\n\tDATATYPE_PARAM\n\tDATATYPE_VAR\n\tDATATYPE_LABEL\n\nExample:\n\n\tgetdatatype() \/\/ DATATYPE_NIL\n\tgetdatatype(\"foo\") \/\/ DATATYPE_STR\n\tgetdatatype(@foo$) \/\/ (DATATYPE_VAR | DATATYPE_STR)"
    },
    {
        "command": "data_to_string(<data>)",
        "line": 8797,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*data_to_string(<data>)\n\nReturns a string representation of the given data, similar to the .toString()\nmethod in JavaScript.\n\nExample:\n\n\tdata_to_string(DATATYPE_VAR) \/\/ \"DATATYPE_VAR\"\n\tdata_to_string(.@foo) \/\/ \".@foo\""
    },
    {
        "command": "charisalpha(\"<string>\", <position>)",
        "line": 8809,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*charisalpha(\"<string>\", <position>)\n\nThis function will return true if the character number Position in the given\nstring is a letter, false if it isn't a letter but a digit or a space.\nThe first letter is position 0."
    },
    {
        "command": "charat(<string>, <index>)",
        "line": 8817,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*charat(<string>, <index>)\n\nReturns char at specified index. If index is out of range, returns an\nempty string.\n\nExample:\n\n\tcharat(\"This is a string\", 10); \/\/returns \"s\""
    },
    {
        "command": "chr(<int>)",
        "line": 8828,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*chr(<int>)\n\nReturns a char from its ASCII value.\n\nExample:\n\n    chr(99); \/\/returns \"c\""
    },
    {
        "command": "ord(<chr>)",
        "line": 8838,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*ord(<chr>)\n\nReturns the ASCII value of char <chr>.\n\nExample:\n\n    ord(\"c\"); \/\/returns 99"
    },
    {
        "command": "setchar(<string>, <char>, <index>)",
        "line": 8848,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*setchar(<string>, <char>, <index>)\n\nReturns the original string with the char at the specified index set to\nthe specified char. If index is out of range, the original string will be\nreturned. Only the 1st char in the <char> parameter will be used.\n\nExample:\n\n\tsetchar(\"Cat\", \"B\", 0); \/\/returns \"Bat\""
    },
    {
        "command": "insertchar(<string>, <char>, <index>)",
        "line": 8860,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*insertchar(<string>, <char>, <index>)\n\nReturns the original string with the specified char inserted at the\nspecified index. If index is out of range, the char will be inserted on\nthe end of the string that it is closest. Only the 1st char in the <char>\nparameter will be used.\n\nExample:\n\n\tinsertchar(\"laughter\", \"s\", 0); \/\/returns \"slaughter\""
    },
    {
        "command": "delchar(<string>, <index>)",
        "line": 8873,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*delchar(<string>, <index>)\n\nReturns the original string with the char at the specified index removed.\nIf index is out of range, original string will be returned.\n\nExample:\n\n\tdelchar(\"Diet\", 3); \/\/returns \"Die\""
    },
    {
        "command": "strtoupper(<string>)",
        "line": 8884,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*strtoupper(<string>)\n*strtolower(<string>)\n\nReturns the specified string in it's uppercase\/lowercase form.\nAll non-alpha characters will be preserved.\n\nExample:\n\n\tstrtoupper(\"The duck is blue!!\"); \/\/returns \"THE DUCK IS BLUE!!\""
    },
    {
        "command": "charisupper(<string>, <index>)",
        "line": 8896,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*charisupper(<string>, <index>)\n*charislower(<string>, <index>)\n\nReturns true if character at specified index of specified string is\nuppercase for charisupper() or lowercase for charislower(). Otherwise, false.\nCharacters not of the alphabelt will return false.\n\nExample:\n\n\tcharisupper(\"Hercules\", 0); \/\/returns 1"
    },
    {
        "command": "substr(<string>, <start_index>, <end_index>)",
        "line": 8909,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*substr(<string>, <start_index>, <end_index>)\n\nReturns the sub-string of the specified string inclusively between the set\nindexes. If indexes are out of range, or the start index is after the end\nindex, an empty string will be returned.\n\nExample:\n\n\tsubstr(\"foobar\", 3, 5); \/\/returns \"bar\""
    },
    {
        "command": "explode(<dest_array>, <string>, <delimiter>)",
        "line": 8921,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*explode(<dest_array>, <string>, <delimiter>)\n\nBreaks a string up into substrings based on the specified delimiter.\nSubstrings will be stored within the specified string array. Only the 1st\nchar of the delimiter parameter will be used. If an empty string is passed\nas a delimiter, the string will be placed in the array in its original\nform, without any changes. Return the number of elements written to\n<dest_array>.\n\nExample:\n\n\t.@num_elements = explode(.@my_array$, \"Explode:Test:1965:red:PIE\", \":\");\n\t\/\/.@my_array$ contents will be...\n\t\/\/.@my_array$[0]: \"Explode\"\n\t\/\/.@my_array$[1]: \"Test\"\n\t\/\/.@my_array$[2]: \"1965\"\n\t\/\/.@my_array$[3]: \"red\"\n\t\/\/.@my_array$[4]: \"PIE\"\n\t\/\/.@num_elements: 5"
    },
    {
        "command": "implode(<string_array>{, <glue>})",
        "line": 8943,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*implode(<string_array>{, <glue>})\n\nCombines all substrings within the specified string array into a single\nstring. If the glue parameter is specified, it will be inserted inbetween\neach substring.\n\nExample:\n\tsetarray(.@my_array$[0], \"This\", \"is\", \"a\", \"test\");\n\timplode(.@my_array$, \" \"); \/\/returns \"This is a test\""
    },
    {
        "command": "sprintf(<format>{, param{, param{, ...}}})",
        "line": 8955,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*sprintf(<format>{, param{, param{, ...}}})\n\nC style sprintf. The resulting string is returned.\n\nThe format string can contain placeholders (format specifiers) using the\nfollowing structure:\n\n  %[parameter][flags][width]type\n\nThe following format specifier types are supported:\n\n%%: Prints a literal '%' (special case, doesn't support parameter, flag, width)\n%d, %i: Formats the specified value as a decimal signed number\n%u: Formats the specified value as a decimal unsigned number\n%x: Formats the specified value as a hexadecimal (lowercase) unsigned number\n%X: Formats the specified value as a hexadecimal (uppercase) unsigned number\n%o: Formats the specified value as an octal unsigned number\n%s: Formats the specified value as a string\n%c: Formats the specified value as a character (only uses the first character\n    of strings)\n\nThe following format specifier types are not supported:\n\n%n (not implemented due to safety concerns)\n%f, %F, %e, %E, %g, %G (the script engine doesn't use floating point values)\n%p (the script engine doesn't use pointers)\n%a, %A (not supported, use 0x%x and 0x%X respectively instead)\n\nAn ordinal parameter can be specified in the form 'x$' (where x is a number),\nto reorder the output (this may be useful in translated strings, where the\nsentence order may be different from the original order). Example:\n\n\t\/\/ Name, level, job name\n\tmes(sprintf(\"Hello, I'm %s, a level %d %s\", strcharinfo(PC_NAME), BaseLevel, jobname(Class)));\n\nWhen translating the sentence to other languages (for example Italian),\nswapping some arguments may be appropriate, and it may be desirable to keep the\nactual arguments in the same order (i.e. when translating through the HULD):\n\n\t\/\/ Job name is printed before the level, although they're specified in the opposite order.\n\t\/\/ Name, job name, level\n\tmes(sprintf(\"Ciao, io sono %1$s, un %3$s di livello %2$d\", strcharinfo(PC_NAME), BaseLevel, jobname(Class)));\n\nThe supported format specifier flags are:"
    },
    {
        "command": "sscanf(<string>, <format>{, param{, param{, ...}}})",
        "line": 9037,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*sscanf(<string>, <format>{, param{, param{, ...}}})\n\nC style sscanf. All C format specifiers are supported.\nMore info: sscanf @ www.cplusplus.com. The number of params is only\nlimited by Hercules' script engine.\n\nExample:\n\tsscanf(\"This is a test: 42 foobar\", \"This is a test: %d %s\", .@num, .@str$);\n\tdispbottom(.@num + \" \" + .@str$); \/\/prints \"42 foobar\""
    },
    {
        "command": "strpos(<haystack>, <needle>{, <offset>})",
        "line": 9049,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*strpos(<haystack>, <needle>{, <offset>})\n\nPHP style strpos. Finds a substring (needle) within a string (haystack).\nThe offset parameter indicates the index of the string to start searching.\nReturns index of substring on successful search, else -1.\nComparison is case sensitive.\n\nExample:\n\tstrpos(\"foobar\", \"bar\", 0); \/\/returns 3\n\tstrpos(\"foobarfoo\", \"foo\", 0); \/\/returns 0\n\tstrpos(\"foobarfoo\", \"foo\", 1); \/\/returns 6"
    },
    {
        "command": "replacestr(<input>, <search>, <replace>{, <usecase>{, <count>}})",
        "line": 9063,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*replacestr(<input>, <search>, <replace>{, <usecase>{, <count>}})\n\nReplaces all instances of a search string in the input with the specified\nreplacement string. By default is case sensitive unless <usecase> is set\nto false. If specified it will only replace as many instances as specified\nin the count parameter.\n\nExample:\n\treplacestr(\"testing tester\", \"test\", \"dash\"); \/\/returns \"dashing dasher\"\n\treplacestr(\"Donkey\", \"don\", \"mon\", false); \/\/returns \"monkey\"\n\treplacestr(\"test test test test test\", \"test\", \"yay\", false, 3); \/\/returns \"yay yay yay test test\""
    },
    {
        "command": "countstr(<input>, <search>{, <usecase>})",
        "line": 9077,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*countstr(<input>, <search>{, <usecase>})\n\nCounts all instances of a search string in the input. By default is case\nsensitive unless <usecase> is set to false.\n\nExample:\n\tcountstr(\"test test test Test\", \"test\"); \/\/returns 3\n\tcountstr(\"cake Cake\", \"Cake\", false); \/\/returns 2"
    },
    {
        "command": "setfont(<font>)",
        "line": 9088,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*setfont(<font>)\n\nThis command sets the current RO client interface font to one of the fonts\nstored in data\\*.eot by using an ID of the font. When the ID of the\ncurrently used font is used, default interface font is used again.\n\n\t0 - Default\n\t1 - RixLoveangel\n\t2 - RixSquirrel\n\t3 - NHCgogo\n\t4 - RixDiary\n\t5 - RixMiniHeart\n\t6 - RixFreshman\n\t7 - RixKid\n\t8 - RixMagic\n\t9 - RixJJangu"
    },
    {
        "command": "showdigit(<value>{, <type>})",
        "line": 9107,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*showdigit(<value>{, <type>})\n\nDisplays given numeric 'value' in large digital clock font on top of the\nscreen. The optional parameter 'type' specifies visual aspects of the\n\"clock\" and can be one of the following values:\n\n\t0 - Displays the value for 5 seconds (default).\n\t1 - Incremental counter (1 tick\/second).\n\t2 - Decremental counter (1 tick\/second). Does not stop at zero, but\n\t\toverflows.\n\t3 - Decremental counter (1 tick\/second). Two digits only, stops at\n\t\tzero.\n\nFor type 1 and 2 the start value is set by using negative number of the\none intended to set (ex. -10 starts the counter at 10 seconds). Except for\ntype 3 the value is interpreted as seconds and formatted as time in days,\nhours, minutes and seconds. Note, that the official script command does\nnot have the optional parameter.\n\n\t\/\/ displays 23:59:59 for 5 seconds\n\tshowdigit(86399);\n\n\t\/\/ counter that starts at 60 and runs for 60 seconds\n\tshowdigit(60, 3);"
    },
    {
        "command": "petskillbonus(<bonus type>, <value>, <duration>, <delay>)",
        "line": 9144,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*petskillbonus(<bonus type>, <value>, <duration>, <delay>)\n\nThis command will make the pet give a bonus to the owner's stat (bonus\ntype - bInt, bVit, bDex, bAgi, bLuk, bStr, bSpeedRate - for a full list, see the\n'doc\/constants.md' under 'Bonuses \/ Parameter IDs')."
    },
    {
        "command": "petloot(<max items>)",
        "line": 9157,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*petloot(<max items>)\n\nThis command will turn on pet looting, with a maximum number of items to\nloot specified. Pet will store items and return them when the maximum is\nreached or when pet performance is activated."
    },
    {
        "command": "petskillsupport(\"<skill name>\", <skill level>, <delay>, <percent hp>, <percent sp>)",
        "line": 9164,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*petskillsupport(\"<skill name>\", <skill level>, <delay>, <percent hp>, <percent sp>)\n\nThis will make the pet use a specified support skill on the owner whenever\nthe HP and SP are below the given percent values, with a specified delay\ntime between activations. The skill numbers are as per\n'db\/(pre-)re\/skill_db.txt'.\nIt's not quite certain who's stats will be used for the skills cast, the\ncharacter's or the pets. Probably, Skotlex can answer that question."
    },
    {
        "command": "petskillattack(\"<skill name>\", <damage>, <number of attacks>, <rate>, <bonusrate>)",
        "line": 9174,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*petskillattack(\"<skill name>\", <damage>, <number of attacks>, <rate>, <bonusrate>)\n\nThis command will make the pet cast an attack skill on the enemy the pet's\nowner is currently fighting. Skill IDs and levels are as per petskillsupport().\nIf <number of attacks> is specified different than 0, it will make the pet cast\nthe skill with a fixed amount of damage inflicted and the specified number of\nattacks. A value of zero uses the skill's defaults.\n\nAll commands with delays and durations will only make the behavior active\nfor the specified duration of seconds, with a delay of the specified\nnumber of seconds between activations. Rates are a chance of the effect\noccurring and are given in percent. 'bonusrate' is added to the normal\nrate if the pet intimacy is at the maximum possible.\n\nThe behavior modified with the above mentioned commands will only be\nexhibited if the pet is loyal and appropriate configuration options are\nset in 'conf\/map\/battle.conf'.\n\nPet scripts in the database normally run whenever a pet of that type\nhatches from the egg. Other commands usable in item scripts (see bonus())\nwill also happily run from pet scripts. Apparently, the pet-specific\ncommands will also work in NPC scripts and modify the behavior of the\ncurrent pet up until the pet is hatched again. (Which will also occur when\nthe character is logged in again with the pet still out of the egg.) It is\nnot certain for how long the effect of such command running from an NPC\nscript will eventually persist, but apparently, it is possible to usefully\nemploy them in usable item scripts to create pet buffing items.\n\nNobody tried this before, so you're essentially on your own here."
    },
    {
        "command": "bpet()",
        "line": 9206,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*bpet()\n\nThis command opens up a pet hatching window on the client connected to the\ninvoking character. It is used in item script for the pet incubators and\nwill let the player hatch an owned egg. If the character has no eggs, it\nwill just open up an empty incubator window.\nThis is still usable outside item scripts."
    },
    {
        "command": "makepet(<pet id>)",
        "line": 9216,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*makepet(<pet id>)\n\nThis command will create a pet egg and put it in the invoking character's\ninventory. The kind of pet is specified by pet ID numbers listed in\n'db\/pet_db.txt'. The egg is created exactly as if the character just\nsuccessfully caught a pet in the normal way.\n\n\t\/\/ This will make you a poring:\n\tmakepet(PORING);\n\nNotice that you absolutely have to create pet eggs with this command. If\nyou try to give a pet egg with getitem(), pet data will not be created by\nthe char server and the egg will disappear when anyone tries to hatch it."
    },
    {
        "command": "homshuffle()",
        "line": 9232,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*homshuffle()\n\nThis will recalculate the homunculus stats according to its level, of the\ncurrent invoking character."
    },
    {
        "command": "setcell(\"<map name>\", <x1>, <y1>, <x2>, <y2>, <type>, <flag>)",
        "line": 9239,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*setcell(\"<map name>\", <x1>, <y1>, <x2>, <y2>, <type>, <flag>)\n\nEach map cell has several 'flags' that specify the properties of that cell.\nThese include terrain properties (walkability, shootability, presence of\nwater), skills (basilica, land protector, ...) and other (NPC nearby, no\nvending, ...).\nEach of these can be 'on' or 'off'. Together they define a cell's behavior.\n\nThis command lets you alter these flags for all map cells in the specified\n(x1,y1)-(x2,y2) rectangle.\n'type' defines which flag to modify. Possible options include cell_walkable,\ncell_shootable, cell_basilica. For a full list, see 'doc\/constants.md'.\n'flag' can be false (clear flat) or true (set flag).\n\nExample:\n\n\tsetcell(\"arena\", 0, 0, 300, 300, cell_basilica, true);\n\tsetcell(\"arena\", 140, 140, 160, 160, cell_basilica, false);\n\tsetcell(\"arena\", 135, 135, 165, 165, cell_walkable, false);\n\tsetcell(\"arena\", 140, 140, 160, 160, cell_walkable, true);\n\nThis will add a makeshift ring into the center of the map. The ring will\nbe surrounded by a 5-cell wide 'gap' to prevent interference from outside,\nand the rest of the map will be marked as 'basilica', preventing observers\nfrom casting any offensive skills or fighting among themselves. Note that\nthe wall will not be shown nor known client-side, which may cause movement\nproblems.\n\nAnother example:\n\nOnBarricadeDeploy:\n\tsetcell(\"schg_cas05\", 114, 51, 125, 51, cell_walkable, false);\n\tend;\nOnBarricadeBreak:\n\tsetcell(\"schg_cas05\", 114, 51, 125, 51, cell_walkable, true);\n\tend;\n\nThis could be a part of the WoE:SE script, where attackers are not allowed\nto proceed until all barricades are destroyed. This script would place and\nremove a nonwalkable row of cells after the barricade mobs."
    },
    {
        "command": "checkcell(\"<map name>\", <x>, <y>, <type>)",
        "line": 9282,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*checkcell(\"<map name>\", <x>, <y>, <type>)\n\nThis command will return true or false, depending on whether the specified cell\nhas the 'type' flag set or not. There are various types to check, all\nmimicking the server's cell_chk enumeration. The types can be found in\n'doc\/constants.md' under 'Cell checks'.\n\nThe meaning of the individual types can be confusing, so here's an\noverview:\n  - cell_chkwall\/water\/cliff\n    these check directly for the 'terrain component' of the specified cell\n  - cell_chkpass\/reach\/nopass\/noreach\n    passable = not wall & not cliff, reachable = passable\n    wrt. no-stacking mod\n  - cell_chknpc\/basilica\/landprotector\/novending\/nochat\n    these check for specific dynamic flags (name indicates what they do)\n\nExample:\n\n\tmes(\"Pick a destination map.\");\n\tinput(.@map$);\n\tmes(\"Alright, now give me the coordinates.\");\n\tinput(.@x);\n\tinput(.@y);\n\tif (!checkcell(.@map$, .@x, .@y, cell_chkpass)) {\n\t\tmes(\"Can't warp you there, sorry!\");\n\t\tclose();\n\t} else {\n\t\tmes(\"Ok, get ready...\");\n\t\tclose2();\n\t\twarp(.@map$, .@x, .@y);\n\t\tend;\n\t}"
    },
    {
        "command": "setwall(\"<map name>\", <x>, <y>, <size>, <dir>, <shootable>, \"<name>\")",
        "line": 9318,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*setwall(\"<map name>\", <x>, <y>, <size>, <dir>, <shootable>, \"<name>\")\n*delwall(\"<name>\")\n\nCreates an invisible wall, an array of setcell() starting from x,y and\ndoing a line of the given size in the given direction. The difference with\nsetcell is this one update client part too to avoid the glitch problem.\nDirections are the same as NPC sprite facing directions: (DIR_ constants)."
    },
    {
        "command": "readbook(<book id>, <page>)",
        "line": 9328,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*readbook(<book id>, <page>)\n\nThis will open a book item at the specified page."
    },
    {
        "command": "rodex_sendmail(<char id>, \"<sender name>\", \"<title>\", \"<body>\"{, <zeny>{, <item1>, <amount1>{, <item2>, <amount2>{, <item3>, <amount3>{, <item4>, <amount4>{, <item5>, <amount5>}}}}}})",
        "line": 9334,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*rodex_sendmail(<char id>, \"<sender name>\", \"<title>\", \"<body>\"{, <zeny>{, <item1>, <amount1>{, <item2>, <amount2>{, <item3>, <amount3>{, <item4>, <amount4>{, <item5>, <amount5>}}}}}})\n*rodex_sendmail_acc(<account id>, \"<sender name>\", \"<title>\", \"<body>\"{, <zeny>{, <item1>, <amount1>{, <item2>, <amount2>{, <item3>, <amount3>{, <item4>, <amount4>{, <item5>, <amount5>}}}}}})\n\nThis will send a mail using the RoDEX mail system, in newer clients the message will be marked as a NPC mail (that you can't reply).\nIf items and zeny are specified, they will be added as attachments to the message.\n\nFor examples of usage, see \/doc\/sample\/npc_rodex.txt"
    },
    {
        "command": "rodex_sendmail2(<char id>, \"<sender name>\", \"<title>\", \"<body>\"{, <zeny>{, <item1>, <amount1>, <refine1>, <attribute1>, <card0_1>, <card1_1>, <card2_1>, <card3_1>{,<item2>, <amount2>, <refine2>, <attribute2>, <card0_2>, <card1_2>, <card2_2>, <card3_2>{,<item3>, <amount3>, <refine3>, <attribute3>, <card0_3>, <card1_3>, <card2_3>, <card3_3>{,<item4>, <amount4>, <refine4>, <attribute4>, <card0_4>, <card1_4>, <card2_4>, <card3_4>{,<item5>, <amount5>, <refine5>, <attribute5>, <card0_5>, <card1_5>, <card2_5>, <card3_5>}}}}}})",
        "line": 9344,
        "category": "6 - Other Commands",
        "sub_category": "",
        "description": "*rodex_sendmail2(<char id>, \"<sender name>\", \"<title>\", \"<body>\"{, <zeny>{, <item1>, <amount1>, <refine1>, <attribute1>, <card0_1>, <card1_1>, <card2_1>, <card3_1>{,<item2>, <amount2>, <refine2>, <attribute2>, <card0_2>, <card1_2>, <card2_2>, <card3_2>{,<item3>, <amount3>, <refine3>, <attribute3>, <card0_3>, <card1_3>, <card2_3>, <card3_3>{,<item4>, <amount4>, <refine4>, <attribute4>, <card0_4>, <card1_4>, <card2_4>, <card3_4>{,<item5>, <amount5>, <refine5>, <attribute5>, <card0_5>, <card1_5>, <card2_5>, <card3_5>}}}}}})\n*rodex_sendmail_acc2(<account id>, \"<sender name>\", \"<title>\", \"<body>\"{, <zeny>{, <item1>, <amount1>, <refine1>, <attribute1>, <card0_1>, <card1_1>, <card2_1>, <card3_1>{,<item2>, <amount2>, <refine2>, <attribute2>, <card0_2>, <card1_2>, <card2_2>, <card3_2>{,<item3>, <amount3>, <refine3>, <attribute3>, <card0_3>, <card1_3>, <card2_3>, <card3_3>{,<item4>, <amount4>, <refine4>, <attribute4>, <card0_4>, <card1_4>, <card2_4>, <card3_4>{,<item5>, <amount5>, <refine5>, <attribute5>, <card0_5>, <card1_5>, <card2_5>, <card3_5>}}}}}})\n\nThese are more flexible versions of rodex_sendmail and rodex_sendmail_acc.\n\nThis will send a mail using the RoDEX mail system, in newer clients the message will be marked as a NPC mail (that you can't reply).\nIf items and zeny are specified, they will be added as attachments to the message.\nCheck getitem2 command for more information of the extra parameters.\n\nFor examples of usage, see \/doc\/sample\/npc_rodex.txt"
    },
    {
        "command": "instance_create(\"<instance name>\", <owner id>{, <optional owner_type>})",
        "line": 9361,
        "category": "7 - Instance-Related Commands",
        "sub_category": "",
        "description": "*instance_create(\"<instance name>\", <owner id>{, <optional owner_type>})\n\nCreate an instance using the name \"<instance name>\" for the <owner_id> of\nowner_type (when not provided, defaults to IOT_PARTY). Most instance_*\ncommands are used in conjunction with this command and depend on the\nID this command returns.\n\nExample:\n\t\/\/ Store the Party ID of the invoking character.\n\t.@party_id = getcharid(CHAR_ID_PARTY);\n\n\t\/\/ Attempt to create an instance using that party ID.\n\t.@id = instance_create(\"Endless Tower\", .@party_id);\n\tif (.@id == -1) { \/\/ Invalid type - not used anymore\n\t\t\/\/ ...\n\t} else if (.@id == -2) { \/\/ Invalid Party ID\n\t\t\/\/ ...\n\t} else if (.@id == -3) { \/\/ No free instances (MAX_INSTANCE exceeded)\n\t\t\/\/ ...\n\t} else if (.@id == -4) { \/\/ Already exists\n\t\t\/\/ ...\n\t} else (.@id < 0) { \/\/ Unspecified error while queuing instance.\n\t\t\/\/ ...\n\t}"
    },
    {
        "command": "instance_destroy({<instance id>})",
        "line": 9388,
        "category": "7 - Instance-Related Commands",
        "sub_category": "",
        "description": "*instance_destroy({<instance id>})\n\nDestroys instance with the ID <instance id>. If no ID is specified, the\ninstance the script is attached to is used. If in the end no instance_id,\nis found the command halts the script execution."
    },
    {
        "command": "instance_attachmap(\"<map name>\", <instance id>{, <use base name>{, \"<new map name>\"}})",
        "line": 9396,
        "category": "7 - Instance-Related Commands",
        "sub_category": "",
        "description": "*instance_attachmap(\"<map name>\", <instance id>{, <use base name>{, \"<new map name>\"}})\n\nAttaches the map \"<map name>\" to the instance specified with\n<instance id>. The optional parameter specifies, whether a map requires\nemulation for instancing (true) or not (false = default). if use base name is specified,\nand \"<new map name>\" too the server will instance the map under the \"<new map name>\",\nname.\n\nReturns the resulting map name on success or an empty string on failure.\n\nExample:\n\tinstance_attachmap(\"prontera\", .@instance_id, true, \"via\");\n^ the above creates a instance (or clone) of prontera, on a map called \"via\""
    },
    {
        "command": "instance_detachmap(\"<map name>\"{, <instance id>})",
        "line": 9412,
        "category": "7 - Instance-Related Commands",
        "sub_category": "",
        "description": "*instance_detachmap(\"<map name>\"{, <instance id>})\n\nDetach the map \"<map name>\" to the instance with the <instance id>. If no\nID is specified, the instance the script is attached to is used. If in the\nend no instance_id is found the command halts the script execution."
    },
    {
        "command": "instance_init(<instance id>)",
        "line": 9420,
        "category": "7 - Instance-Related Commands",
        "sub_category": "",
        "description": "*instance_init(<instance id>)\n\nInitializes the instance given by <instance id>. This copies all NPCs from\nthe source maps to the instanced maps."
    },
    {
        "command": "instance_announce(<instance id>, \"<text>\", <flag>{, <fontColor>{, <fontType>{, <fontSize>{, <fontAlign>{, <fontY>}}}}})",
        "line": 9427,
        "category": "7 - Instance-Related Commands",
        "sub_category": "",
        "description": "*instance_announce(<instance id>, \"<text>\", <flag>{, <fontColor>{, <fontType>{, <fontSize>{, <fontAlign>{, <fontY>}}}}})\n\nWorks like announce, but has the <instance id> parameter. If instance id\nis -1, the instance the script is attached to is used. If in the\nend no instance_id is found the command halts the script execution."
    },
    {
        "command": "instance_attach(<instance id>)",
        "line": 9435,
        "category": "7 - Instance-Related Commands",
        "sub_category": "",
        "description": "*instance_attach(<instance id>)\n\nAttaches the current script to the instance given by <instance id>."
    },
    {
        "command": "instance_npcname(\"<npc name>\"{, <instance id>})",
        "line": 9441,
        "category": "7 - Instance-Related Commands",
        "sub_category": "",
        "description": "*instance_npcname(\"<npc name>\"{, <instance id>})\n\nRetrieves the unique name given to a copy of an NPC given by \"<npc name>\"\nin an instance specified <instance id>. If no ID is specified, the\ninstance the script is attached to is used. If in the end no instance_id,\nis found the command halts the script execution."
    },
    {
        "command": "has_instance(\"<map name>\"{, <instance id>})",
        "line": 9450,
        "category": "7 - Instance-Related Commands",
        "sub_category": "",
        "description": "*has_instance(\"<map name>\"{, <instance id>})\n\nChecks whether or not the given map belongs to specified instance. If no\nID is specified, the instance the script is attached to is used. If the\nscript is not attached to an instance, it'll try to check whether the,\nplayer attached to the script possesses an instance with a map matching\n\"<map name>\". If in the end no instance_id is found the command halts the,\nscript execution.\n\nReturns name of the instanced map on success, otherwise an empty string."
    },
    {
        "command": "has_instance2(\"<map name>\")",
        "line": 9463,
        "category": "7 - Instance-Related Commands",
        "sub_category": "",
        "description": "*has_instance2(\"<map name>\")\n\nSame as has_instance, with exception it returns the instance id of the map,\nas long as the user is assigned to a instance containing that map.\nIt will return -1 upon failure, valid instance ids are >= 0."
    },
    {
        "command": "instance_id()",
        "line": 9471,
        "category": "7 - Instance-Related Commands",
        "sub_category": "",
        "description": "*instance_id()\n\nRetrieves the instance id of the script it is being run on."
    },
    {
        "command": "instance_warpall(\"<map name>\", <x>, <y>{, <instance id>})",
        "line": 9477,
        "category": "7 - Instance-Related Commands",
        "sub_category": "",
        "description": "*instance_warpall(\"<map name>\", <x>, <y>{, <instance id>})\n\nWarps all players in the instance <instance id> to <map name> at given\ncoordinates. If no ID is specified, the instance the script is attached to\nis used. If in the end no instance_id is found the command halts the,\nscript execution."
    },
    {
        "command": "instance_set_timeout(<alive timeout>, <idle timeout>{, <instance id>})",
        "line": 9486,
        "category": "7 - Instance-Related Commands",
        "sub_category": "",
        "description": "*instance_set_timeout(<alive timeout>, <idle timeout>{, <instance id>})\n\nSets the timeout values for an instance given by <instance id>. If no ID\nis specified, the instance the script is attached to is used. If in the end,\nno instance_id is found the command halts the script execution.\n\nParameter <alive timeout> specifies the total amount of time the instance\nwill exist. Parameter <idle timeout> specifies how long players have, when\nthey are outside of the instance, until it is destroyed.\n\nBoth timeout values are in seconds."
    },
    {
        "command": "instance_check_party(<party id>{, <amount>{, <min>{, <max>}}})",
        "line": 9500,
        "category": "7 - Instance-Related Commands",
        "sub_category": "",
        "description": "*instance_check_party(<party id>{, <amount>{, <min>{, <max>}}})\n\nThis function checks if a party meets certain requirements, returning true if\nall conditions are met and false otherwise. It will only check online\ncharacters.\n\namount - number of online party members (default is 1).\nmin    - minimum level of all characters in the party (default is 1).\nmax    - maximum level of all characters in the party (default is max\n         level in conf).\n\nExample:\n\nif (instance_check_party(getcharid(CHAR_ID_PARTY), 2, 2, 149)) {\n\tmes(\"Your party meets the Memorial Dungeon requirements.\");\n\tmes(\"All online members are between levels 1-150 and at least two are online.\");\n\tclose();\n} else {\n\tmes(\"Sorry, your party does not meet the requirements.\");\n\tclose();\n}"
    },
    {
        "command": "instance_check_guild(<guild_id>{, <amount>{, <min>{, <max>}}})",
        "line": 9524,
        "category": "7 - Instance-Related Commands",
        "sub_category": "",
        "description": "*instance_check_guild(<guild_id>{, <amount>{, <min>{, <max>}}})\n\nThis function checks if a guild meets certain requirements, returning true if\nall conditions are met and false otherwise. it will only check online characters.\n\namount - number of online guild members (default is 1).\nmin - minimum level of all characters in the guild (default is 1).\nmax - maximum level of all characters in the guild (default is max level in conf).\n\nExample:\n\tif (instance_check_guild(getcharid(CHAR_ID_GUILD), 2, 1, 150)) {\n\t\tmes(\"Your guild meets the Memorial Dungeon requirements.\");\n\t\tmes(\"All online members are between levels 1-150 and at least two are online.\");\n\t\tclose();\n\t} else {\n\t\tmes(\"Sorry, your guild does not meet the requirements.\");\n\t\tclose();\n\t}"
    },
    {
        "command": "instance_set_respawn(<map_name>, <x>, <y>{, <instance_id>})",
        "line": 9544,
        "category": "7 - Instance-Related Commands",
        "sub_category": "",
        "description": "*instance_set_respawn(<map_name>, <x>, <y>{, <instance_id>})\n\nUpdates the 'reload spawn' position of a instance,\nthat is where players in the instance are sent to upon @reloadscript,\nuses the npc instance (if any) when instance_id is not provided,\nhandy to update a instance's progress so that when\/if @reloadscript happens\nthe damage to the players progress is reduced.\nIt is most effective when used with instance variables (which are @reloadscript persistent)\n\nIf a player warps into a instance before this command has been used,\nit will use the player's warp destination as the initial respawn point,\nit can of course be modified by using this script command at any point."
    },
    {
        "command": "instance_mapname(\"<map name>\"{, <instance id>})",
        "line": 9558,
        "category": "7 - Instance-Related Commands",
        "sub_category": "",
        "description": "*instance_mapname(\"<map name>\"{, <instance id>})\n\nReturns the unique name of the instanced map. If no instance ID is specified,\nthe instance the script is attached to is used. If the script is not attached to\nan instance, the instance of the currently attached player's party is used. If\nthat fails, the command returns an empty string instead."
    },
    {
        "command": "questinfo(<Icon> {, <Map Mark Color>})",
        "line": 9579,
        "category": "8 - Quest Log-Related Commands",
        "sub_category": "",
        "description": "*questinfo(<Icon> {, <Map Mark Color>})\n\nThis is esentially a showevent() that supports different conditions that can be set using setquestinfo().\nUse this only in an OnInit label.\nFor Icon, use one of the following:\n\nNo Icon\t\t: QTYPE_NONE\n! Quest Icon\t: QTYPE_QUEST\n? Quest Icon\t: QTYPE_QUEST2\n! Job Icon\t: QTYPE_JOB\n? Job Icon\t: QTYPE_JOB2\n! Event Icon\t: QTYPE_EVENT\n? Event Icon\t: QTYPE_EVENT2\nWarg\t\t: QTYPE_WARG\nWarg Face\t: QTYPE_WARG2 (Only for packetver >= 20120410 && packetver < 20170315)"
    },
    {
        "command": "setquestinfo(<Type> {, <Values...>})",
        "line": 9626,
        "category": "8 - Quest Log-Related Commands",
        "sub_category": "",
        "description": "*setquestinfo(<Type> {, <Values...>})\n\nUse this command ONLY after a questinfo()\nit allows you to set multiple required conditions for the quest bubble to show up.\n\nsupported types: values\n\tQINFO_JOB: job_id\n\tQINFO_SEX: sex\n\tQINFO_BASE_LEVEL: min, max\n\tQINFO_JOB_LEVEL: min, max\n\tQINFO_ITEM: item_id, min amount, max amount \/\/ append to the items list on each use\n\tQINFO_HOMUN_LEVEL: min\n\tQINFO_HOMUN_TYPE: homunculus_type (0 - regular, 1 - evolved, 2 - S)\n\tQINFO_QUEST: quest_id, state \/\/ append to the quests list on each use\n\tQINFO_MERCENARY_CLASS: mercenary_class"
    },
    {
        "command": "setquest(<ID>{, <Time Limit>})",
        "line": 9644,
        "category": "8 - Quest Log-Related Commands",
        "sub_category": "",
        "description": "*setquest(<ID>{, <Time Limit>})\n\nPlace quest of <ID> in the users quest log, the state of which is \"active\".\nIf Time Limit is given, this quest will have its expire time set to <Time Limit>, an UNIX epoch time,\nignoring quest_db setting.\n\nIf questinfo() is set, and the same ID is specified here, the icon will be cleared when the quest is set."
    },
    {
        "command": "completequest(<ID>{, <ID2>})",
        "line": 9654,
        "category": "8 - Quest Log-Related Commands",
        "sub_category": "",
        "description": "*completequest(<ID>{, <ID2>})\n\nChange the state for the given quest <ID> to \"complete\" and remove from\nthe users quest log.\n\nIf a second quest id of greater value is specified, all quests between the two\nwill be completed."
    },
    {
        "command": "erasequest(<ID>{, <ID2>})",
        "line": 9664,
        "category": "8 - Quest Log-Related Commands",
        "sub_category": "",
        "description": "*erasequest(<ID>{, <ID2>})\n\nRemove the quest of the given <ID> from the user's quest log.\n\nIf a second quest id of greater value is specified, all quests between the two\nwill be erased."
    },
    {
        "command": "changequest(<ID>, <ID2>)",
        "line": 9673,
        "category": "8 - Quest Log-Related Commands",
        "sub_category": "",
        "description": "*changequest(<ID>, <ID2>)\n\nRemove quest of the given <ID> from the user's quest log.\nAdd quest of the <ID2> to the the quest log, and the state is \"active\"."
    },
    {
        "command": "questprogress(<ID>{, <type>})",
        "line": 9680,
        "category": "8 - Quest Log-Related Commands",
        "sub_category": "",
        "description": "*questprogress(<ID>{, <type>})\n\nIf no additional argument supplied, return the state of the quest:\n\t0 = Quest not started (not in quest log)\n\t1 = Quest has been given\n\t2 = Quest completed\n\nIf <type> PLAYTIME is supplied:\n\t0 = Quest not started (not in quest log)\n\t1 = The time limit has not yet been reached\n\t2 = The time limit has been reached\n\nIf <type> HUNTING is supplied:\n\t0 = Quest not started (not in quest log)\n\t1 = Player hasn't killed all of the target monsters\n\t2 = Player has killed all of the target monsters"
    },
    {
        "command": "questactive(<ID>)",
        "line": 9699,
        "category": "8 - Quest Log-Related Commands",
        "sub_category": "",
        "description": "*questactive(<ID>)\n\nCheck whether the given quest is in its active state.\n\nReturns true if the quest is active, false otherwise (quest not started,\ninactive or completed)"
    },
    {
        "command": "showevent(<icon>{, <mark color>})",
        "line": 9708,
        "category": "8 - Quest Log-Related Commands",
        "sub_category": "",
        "description": "*showevent(<icon>{, <mark color>})\n\nShow an emotion on top of a NPC, and optionally,\na colored mark in the mini-map like viewpoint().\nThis is used to indicate that a NPC has a quest or an event to\na certain player.\n\nAvailable Icons:\n\nRemove Icon\t: QTYPE_NONE\n! Quest Icon\t: QTYPE_QUEST\n? Quest Icon\t: QTYPE_QUEST2\n! Job Icon\t: QTYPE_JOB\n? Job Icon\t: QTYPE_JOB2\n! Event Icon\t: QTYPE_EVENT\n? Event Icon\t: QTYPE_EVENT2\nWarg\t\t: QTYPE_WARG\nWarg Face\t: QTYPE_WARG2 (Only for packetver >= 20120410 && packetver < 20170315)"
    },
    {
        "command": "waitingroom2bg_single(<battle group>, \"<mapname>\", <x>, <y>, \"<npc name>\")",
        "line": 9753,
        "category": "9 - Battlegrounds-Related Commands",
        "sub_category": "",
        "description": "*waitingroom2bg_single(<battle group>, \"<mapname>\", <x>, <y>, \"<npc name>\")\n\nAdds the first waiting player from the chat room of given NPC to an\nexisting battleground group and warps it to specified coordinates on given\nmap."
    },
    {
        "command": "waitingroom2bg(\"<mapname>\", <x>, <y>, \"<On Quit Event>\", \"<On Death Event>\"{, \"<npc name>\"})",
        "line": 9761,
        "category": "9 - Battlegrounds-Related Commands",
        "sub_category": "",
        "description": "*waitingroom2bg(\"<mapname>\", <x>, <y>, \"<On Quit Event>\", \"<On Death Event>\"{, \"<npc name>\"})\n\n<Mapname> and X Y coordinates refer to where the \"respawn\" base is, where\nthe player group will respawn when they die.\n<On Quit Event> refers to an NPC label that attaches to the character and\nis run when they relog.\n<On Death Event> refers to an NPC label that attaches to the character and\nis run when they die. Can be \"\" for empty.\n\nIf \"-\" is supplied for <mapname>, this will remove the 1 second automatic\nrespawn on the battleground map. This allows for better manipulation of\n<On Death Event>. The player will have to be warped to desired location\nat the end of <On Death Event>.\n\nUnlike the prior command, the latter will attach a GROUP in a waiting room\nto the battleground, and sets the array $@arenamembers[0] where 0 holds\nthe IDs of the first group, and 1 holds the IDs of the second.\n\nIf the option parameter is left out, the waiting room of the current NPC\nis used.\n\nExample:\n\t\/\/ Battle Group will be referred to as $@KvM01BG_id1, and when they\n\t\/\/ die, respawn at bat_c01,52,129.\n\t$@KvM01BG_id1 = waitingroom2bg(\"bat_c01\", 52, 129, \"KvM01_BG::OnGuillaumeQuit\", \"KvM01_BG::OnGuillaumeDie\");\n\tend;"
    },
    {
        "command": "bg_team_setxy(<Battle Group ID>, <x>, <y>)",
        "line": 9790,
        "category": "9 - Battlegrounds-Related Commands",
        "sub_category": "",
        "description": "*bg_team_setxy(<Battle Group ID>, <x>, <y>)\n\nUpdate the respawn point of the given battle group to x, y on the same\nmap. The <Battle Group ID> can be retrieved using getcharid(CHAR_ID_BG).\n\nExample:\n\tbg_team_setxy(getcharid(CHAR_ID_BG), 56, 212);\n\tmapannounce(\"bat_a01\", \"Group [1] has taken the work shop, and will now respawn there.\", bc_map, 0xFFCE00);\n\tend;"
    },
    {
        "command": "bg_warp(<Battle Group>, \"<Mapname>\", <x>, <y>)",
        "line": 9802,
        "category": "9 - Battlegrounds-Related Commands",
        "sub_category": "",
        "description": "*bg_warp(<Battle Group>, \"<Mapname>\", <x>, <y>)\n\nSimilar to warp command.\nPlace all members of <Battle Group> at <mapname> at x y.\n\nExample:\n\t\/\/place the battle group one for Tierra Gorge at starting position.\n\tbg_warp($@TierraBG1_id1, \"bat_a01\", 352, 342);\n\tend;"
    },
    {
        "command": "bg_monster(<Battle Group>, \"<map name>\", <x>, <y>, \"<name to show>\", <mob id>, \"<event label>\")",
        "line": 9814,
        "category": "9 - Battlegrounds-Related Commands",
        "sub_category": "",
        "description": "*bg_monster(<Battle Group>, \"<map name>\", <x>, <y>, \"<name to show>\", <mob id>, \"<event label>\")\n\nSimilar to monster() script command.\nSpawn a monster with allegiance to the given battle group.\nDoes not allow for the summoning of multiple monsters.\nMonsters are similar to that in War of Emperium, in that the specified\nBattle group is considered friendly.\n\nExample:\n\t\/\/ It can be used in two different ways.\n\tbg_monster($@TierraBG1_id2, \"bat_a01\", 167, 50, \"Food Depot\", OBJ_B, \"Feed Depot#1::OnMyMobDead\");\n\tend;\n\n\t\/\/ Alternatively, you can set an ID for the monster using \"set\".\n\t\/\/ This becomes useful when used with the command below.\n\t$@Guardian_3 = bg_monster($@TierraBG1_id2, \"bat_a01\", 268, 204, \"Guardian\", B_S_GUARDIAN, \"NPCNAME::OnMyMobDead\");\n\tend;"
    },
    {
        "command": "bg_monster_set_team(<GID>, <Battle Group>)",
        "line": 9834,
        "category": "9 - Battlegrounds-Related Commands",
        "sub_category": "",
        "description": "*bg_monster_set_team(<GID>, <Battle Group>)\n\nThis command will change the allegiance if a monster in a battle ground.\nGID can be set when spawning the monster via the bg_monster() command.\n\nExample:\n\nOnEnable:\n\tmapannounce(\"bat_b01\", \"A guardian has been summoned for Battle Group 2!\", bc_map, 0xFFCE00);\n\t$@Guardian = bg_monster($@BG_2, \"bat_a01\", 268, 204, \"Guardian\", B_S_GUARDIAN, \"NPCNAME::OnMyMobDead\");\n\tinitnpctimer();\n\tend;\n\nOnTimer1000:\n\tstopnpctimer();\n\tmapannounce(\"bat_b01\", \"Erm, sorry about that! This monster was meant for Battle Group 1.\", bc_map, 0xFFCE00);\n\tbg_monster_set_team($@Guardian, $@BG_1);\n\tend;"
    },
    {
        "command": "bg_leave()",
        "line": 9855,
        "category": "9 - Battlegrounds-Related Commands",
        "sub_category": "",
        "description": "*bg_leave()\n\nRemoves attached player from their Battle Group."
    },
    {
        "command": "bg_destroy(<Batte Group>)",
        "line": 9861,
        "category": "9 - Battlegrounds-Related Commands",
        "sub_category": "",
        "description": "*bg_destroy(<Batte Group>)\n\nAs the name says, destroys the battle group created for that battle ground."
    },
    {
        "command": "areapercentheal(\"<mapname>\", <x1>, <y1>, <x2>, <y2>, <hp>, <sp>)",
        "line": 9867,
        "category": "9 - Battlegrounds-Related Commands",
        "sub_category": "",
        "description": "*areapercentheal(\"<mapname>\", <x1>, <y1>, <x2>, <y2>, <hp>, <sp>)\n\nNot exactly limited to battleground use, this will restore HP\/SP in a\ndefined area at a percentage.\n\nExample:\n\tareapercentheal(\"bat_a01\", 52, 208, 61, 217, 100, 100);\n\tend;"
    },
    {
        "command": "bg_get_data(<Battle Group>, <type>)",
        "line": 9878,
        "category": "9 - Battlegrounds-Related Commands",
        "sub_category": "",
        "description": "*bg_get_data(<Battle Group>, <type>)\n\nRetrieves data related to given battle group. Type can be one of the\nfollowing:\n\n\t0 - Amount of players currently belonging to the group."
    },
    {
        "command": "bg_getareausers(<battle group>, \"<map_name>\", <x0>, <y0>, <x1>, <y1>)",
        "line": 9887,
        "category": "9 - Battlegrounds-Related Commands",
        "sub_category": "",
        "description": "*bg_getareausers(<battle group>, \"<map_name>\", <x0>, <y0>, <x1>, <y1>)\n\nRetrieves amount of players belonging to given battle group on given map\nwithin an specified rectangular area."
    },
    {
        "command": "bg_updatescore(\"<map_name>\", <Guillaume Score>, <Croix Score>)",
        "line": 9894,
        "category": "9 - Battlegrounds-Related Commands",
        "sub_category": "",
        "description": "*bg_updatescore(\"<map_name>\", <Guillaume Score>, <Croix Score>)\n\nThis command will force the update of the displayed scoreboard.\nIt is only usable when the map is defined as a Type 2 Battleground:\nmapflag%TAB%<map_name>%TAB%battleground%TAB%2"
    },
    {
        "command": "bg_create_team(\"<map_name>\", <Respawn X>, <Respawn Y>)",
        "line": 9902,
        "category": "9 - Battlegrounds-Related Commands",
        "sub_category": "",
        "description": "*bg_create_team(\"<map_name>\", <Respawn X>, <Respawn Y>)\n\nThis command will create a new BG Team.\nWhen player dies, they will be respawned map_name,X,Y as mentioned.\nIf \"-\" is supplied for the map name, this will remove the 1 second automatic\nrespawn on the battleground map.\n\nCommand will return -1 if BG Creation is failed,\nelse it will return the BG ID(Also known as TeamID)."
    },
    {
        "command": "bg_join_team(<Team_ID>{, <account_id>})",
        "line": 9914,
        "category": "9 - Battlegrounds-Related Commands",
        "sub_category": "",
        "description": "*bg_join_team(<Team_ID>{, <account_id>})\n\nThis command will make the attached player join to Team with ID as mentioned.\nIf account_id is provided, command will look for that player, instead of the attached player.\n\nCommand will return -1 if Player is not found, 0 if join is failed, 1 upon successful."
    },
    {
        "command": "bg_match_over(\"<Arena Name>\"{, <Cancelled>})",
        "line": 9923,
        "category": "9 - Battlegrounds-Related Commands",
        "sub_category": "",
        "description": "*bg_match_over(\"<Arena Name>\"{, <Cancelled>})\n\nThis command will end the battleground Arena\n(Arena Name as referred to, in conf\/battlegrounds.conf)\nIf Cancelled is not provided, it will set the join delay, as mentioned in conf\/battlegrounds.conf\nelse, it will just destroy the Teams and queue's.\n\nCommand will return 0 when successful, else it will return 1."
    },
    {
        "command": "mercenary_create(<class>, <contract time>)",
        "line": 9945,
        "category": "10 - Mercenary Commands",
        "sub_category": "",
        "description": "*mercenary_create(<class>, <contract time>)\n\nThis command summons a mercenary of given class, for given amount of time\nin milliseconds. Typically used in item scripts of mercenary scrolls."
    },
    {
        "command": "mercenary_heal(<hp>, <sp>)",
        "line": 9952,
        "category": "10 - Mercenary Commands",
        "sub_category": "",
        "description": "*mercenary_heal(<hp>, <sp>)\n\nThis command works like heal(), but affects the mercenary of the currently\nattached character."
    },
    {
        "command": "mercenary_sc_start(<type>, <tick>, <val1>)",
        "line": 9959,
        "category": "10 - Mercenary Commands",
        "sub_category": "",
        "description": "*mercenary_sc_start(<type>, <tick>, <val1>)\n\nThis command works like sc_start(), but affects the mercenary of the\ncurrently attached character."
    },
    {
        "command": "mercenary_get_calls(<guild>)",
        "line": 9966,
        "category": "10 - Mercenary Commands",
        "sub_category": "",
        "description": "*mercenary_get_calls(<guild>)\n*mercenary_set_calls(<guild>, <value>)\n\nSets or gets the mercenary calls value for given guild for currently\nattached character. Guild can be one or the following constants:\n\n\tARCH_MERC_GUILD\n\tSPEAR_MERC_GUILD\n\tSWORD_MERC_GUILD"
    },
    {
        "command": "mercenary_get_faith(<guild>)",
        "line": 9978,
        "category": "10 - Mercenary Commands",
        "sub_category": "",
        "description": "*mercenary_get_faith(<guild>)\n*mercenary_set_faith(<guild>, <value>)\n\nSets or gets the mercenary faith value for given guild for currently\nattached character. Guild can be one or the following constants:\n\n\tARCH_MERC_GUILD\n\tSPEAR_MERC_GUILD\n\tSWORD_MERC_GUILD"
    },
    {
        "command": "getmercinfo(<type>{, <char id>})",
        "line": 9990,
        "category": "10 - Mercenary Commands",
        "sub_category": "",
        "description": "*getmercinfo(<type>{, <char id>})\n\nRetrieves information about mercenary of the currently attached character.\nIf char id is given, the information of that character is retrieved\ninstead. Type specifies what information to retrieve and can be one of the\nfollowing:\n\n\tMERCINFO_ID        - Mercenary Database ID\n\tMERCINFO_CLASS     - Mercenary Class\n\tMERCINFO_NAME      - Mercenary Name\n\tMERCINFO_FAITH     - Mercenary faith value for this mercenary's guild, if any\n\tMERCINFO_CALLS     - Mercenary calls value for this mercenary's guild, if any\n\tMERCINFO_KILLCOUNT - Mercenary kill count\n\tMERCINFO_LIFETIME  - Mercenary remaining life time in mili-second\n\tMERCINFO_LEVEL     - Mercenary Level\n\tMERCINFO_GID       - Mercenary Game ID\n\nIf the character does not have a mercenary, the command returns \"\" for MERCINFO_NAME\nand 0 for all other types."
    },
    {
        "command": "queue()",
        "line": 10023,
        "category": "11 - Queue-Related Commands",
        "sub_category": "",
        "description": "*queue()\n\nCreates a new queue instance and returns the created queue id."
    },
    {
        "command": "queuesize(<queue_id>)",
        "line": 10029,
        "category": "11 - Queue-Related Commands",
        "sub_category": "",
        "description": "*queuesize(<queue_id>)\n\nReturns the amount of entries in the queue instance of <queue_id>."
    },
    {
        "command": "queueadd(<queue_id>, <var_id>)",
        "line": 10035,
        "category": "11 - Queue-Related Commands",
        "sub_category": "",
        "description": "*queueadd(<queue_id>, <var_id>)\n\nAdds <var_id> to queue of <queue_id>.\n\nReturns false if <var_id> couldn't be added (was already present in the queue),\ntrue otherwise."
    },
    {
        "command": "queueremove(<queue_id>, <var_id>)",
        "line": 10044,
        "category": "11 - Queue-Related Commands",
        "sub_category": "",
        "description": "*queueremove(<queue_id>, <var_id>)\n\nRemoves <var_id> from queue of <queue_id>.\n\nReturns false if <var_id> couldn't be removed (wasn't present in the queue),\ntrue otherwise."
    },
    {
        "command": "queueopt(<queue_id>, <optionType>{, <event label})",
        "line": 10053,
        "category": "11 - Queue-Related Commands",
        "sub_category": "",
        "description": "*queueopt(<queue_id>, <optionType>{, <event label})\n\nModifies <queue_id>'s <optionType>. When <event label> is not present\n<optionType> is removed from <queue_id>. When present it will execute the\n<event label> when the <queue_id>'s <optionType> condition is met.\n\nReturns true on success, false on failure.\n\nCurrently 3 options are available:"
    },
    {
        "command": "queuedel(<queue_id>)",
        "line": 10074,
        "category": "11 - Queue-Related Commands",
        "sub_category": "",
        "description": "*queuedel(<queue_id>)\n\nDeletes the queue <queue_id>.\n\nReturns false if the queue wasn't found, true otherwise."
    },
    {
        "command": "queueiterator(<queue_id>)",
        "line": 10082,
        "category": "11 - Queue-Related Commands",
        "sub_category": "",
        "description": "*queueiterator(<queue_id>)\n\nCreates a new queue iterator instance.\nA queue iterator is not a reference to a queue's actual members, it copies\nthe queues members when initialized, this way you can loop through them\neven if you remove them from the queue."
    },
    {
        "command": "qicheck(<queue_iterator_id>)",
        "line": 10091,
        "category": "11 - Queue-Related Commands",
        "sub_category": "",
        "description": "*qicheck(<queue_iterator_id>)\n\nChecks whether the current member in the iterator's queue exists.\n\nReturns true when it does, false otherwise."
    },
    {
        "command": "qiget(<queue_iterator_id>)",
        "line": 10099,
        "category": "11 - Queue-Related Commands",
        "sub_category": "",
        "description": "*qiget(<queue_iterator_id>)\n\nobtains the next member in the iterator's queue, returns the next member's\nid or 0 when it doesnt exist.\n\nExample:\n\tfor (.@elem = qiget(.@queue_iterator_id); qicheck(.@queue_iterator_id); .@elem = qiget(.@queue_iterator_id)) {\n\t\t\/\/Do something\n\t}"
    },
    {
        "command": "qiclear(<queue_iterator_id>)",
        "line": 10111,
        "category": "11 - Queue-Related Commands",
        "sub_category": "",
        "description": "*qiclear(<queue_iterator_id>)\n\nDeletes a queue iterator from memory.\n\nReturns false when it fails, otherwise true is returned."
    },
    {
        "command": "openshop({NPC_Name})",
        "line": 10131,
        "category": "12 - NPC Trader-Related Commands",
        "sub_category": "",
        "description": "*openshop({NPC_Name})\n\nopens the trader shop from the currently-attached npc unless,\nwhen the optional NPC_Name param is used."
    },
    {
        "command": "sellitem(<Item_ID>{, <price>{, <qty>}})",
        "line": 10138,
        "category": "12 - NPC Trader-Related Commands",
        "sub_category": "",
        "description": "*sellitem(<Item_ID>{, <price>{, <qty>}})\n*sellitem(<Item_ID>, <qty>, <currency_id>, <currency_amount>)\n\nadds (or modifies) <Item_ID> data to the shop,\nwhen <price> is not provided (or when it is -1) itemdb default is used.\nqty is only necessary for NST_MARKET trader types.\n\nwhen <Item_ID> is already in the shop,\nthe previous data (price\/qty), is overwritten with the new.\n\ncurrency_id and currency_amount can be used only with shop type NST_BARTER"
    },
    {
        "command": "stopselling(<Item_ID>)",
        "line": 10152,
        "category": "12 - NPC Trader-Related Commands",
        "sub_category": "",
        "description": "*stopselling(<Item_ID>)\n*stopselling(<Item_ID>{, <currency_id>, <currency_amount>})\n\nattempts to remove <Item_ID> from the current shop list.\ncurrency_id and currency_amount can be used only with shop type NST_BARTER"
    },
    {
        "command": "setcurrency(<Val1>{, <Val2>})",
        "line": 10160,
        "category": "12 - NPC Trader-Related Commands",
        "sub_category": "",
        "description": "*setcurrency(<Val1>{, <Val2>})\n\nupdates the currently attached player shop funds,\nto be used within a \"OnCountFunds\" event of a NST_CUSTOM trader type.\n\n<Val1> is the value used in the *Cash* Points field\n<Val2> is the value used in the Kafra Points field"
    },
    {
        "command": "tradertype(<Type>)",
        "line": 10170,
        "category": "12 - NPC Trader-Related Commands",
        "sub_category": "",
        "description": "*tradertype(<Type>)\n\nModifies the npc trader type, item list is cleared upon modifiying the value.\nBy default, all npcs staart with tradertype(NST_ZENY);"
    },
    {
        "command": "purchaseok()",
        "line": 10182,
        "category": "12 - NPC Trader-Related Commands",
        "sub_category": "",
        "description": "*purchaseok()\n\nSigns that the transaction (on a NST_CUSTOM trader) has been successful,\nto be used within a \"OnPayFunds\" event of a NST_CUSTOM trader."
    },
    {
        "command": "shopcount(<Item_ID>)",
        "line": 10189,
        "category": "12 - NPC Trader-Related Commands",
        "sub_category": "",
        "description": "*shopcount(<Item_ID>)\n\nReturns the amount of still-available <Item_ID> in the shop (on a NST_MARKET trader)."
    },
    {
        "command": "setunitdata(<GID>, <DataType>, <Val>)",
        "line": 10195,
        "category": "12 - NPC Trader-Related Commands",
        "sub_category": "",
        "description": "*setunitdata(<GID>, <DataType>, <Val>)\n\nSets or alters the data in real-time for game objects of the following types -\nNPCs, Pets, Monsters, Homunuculus', Mercenaries, Elementals.\n\nApplicable Data Types (available as constants) -\n\tData Types          Description (parameter type)\n\tUDT_SIZE:           Unit Size\n\tUDT_LEVEL:          Level\n\tUDT_HP:             Current HP\n\tUDT_MAXHP:          Max HP\n\tUDT_SP:             SP\n\tUDT_MAXSP:          MAX SP\n\tUDT_MASTERAID:      Master Account ID (for Summons)\n\tUDT_MASTERCID:      Master Char ID (for Summons)\n\tUDT_SPEED:          Unit Speed.\n\tUDT_MODE:           Mode (Mobs only)\n\tUDT_AI:             Unit AI Type (see doc\/constants.md for Unit AI Types)\n\tUDT_SCOPTION:       Status Options. (see doc\/constants.md for Unit Option Types)\n\tUDT_SEX:            Gender of the unit. (see doc\/constants.md for Genders)\n\tUDT_CLASS:          Class of the unit. (Monster ID)\n\tUDT_HAIRSTYLE:      Hair Style ID.\n\tUDT_HAIRCOLOR:      Hair Color ID.\n\tUDT_HEADBOTTOM:     Headgear Bottom Sprite ID.\n\tUDT_HEADMIDDLE:     Headgear Middle Sprite ID.\n\tUDT_HEADTOP:        Headgear Top Sprite ID.\n\tUDT_CLOTHCOLOR:     Cloth Color ID.\n\tUDT_SHIELD:         Shield Sprite ID.\n\tUDT_WEAPON:         Weapon Sprite ID.\n\tUDT_LOOKDIR:        Face direction.\n\tUDT_CANMOVETICK:    Stop a unit from move for n seconds.\n\tUDT_STR:            Unit STR.\n\tUDT_AGI:            Unit AGI.\n\tUDT_VIT:            Unit VIT.\n\tUDT_INT:            Unit INT.\n\tUDT_DEX:            Unit DEX.\n\tUDT_LUK:            Unit LUK.\n\tUDT_ATKRANGE:       Attack range of a unit.\n\tUDT_ATKMIN:         Min Atk of a unit.\n\tUDT_ATKMAX:         Max Atk of a unit.\n\tUDT_MATKMIN:        Min MATK of a unit.\n\tUDT_MATKMAX:        Max MATK of a unit.\n\tUDT_DEF:            DEF.\n\tUDT_MDEF:           MDEF.\n\tUDT_HIT:            HIT.\n\tUDT_FLEE:           FLEE.\n\tUDT_PDODGE:         Perfect Dodge.\n\tUDT_CRIT:           Critical Rate.\n\tUDT_RACE:           Race. (Eg. constants RC_DemiHuman or Integer 7).\n\tUDT_ELETYPE:        Element. (Eg. constants Ele_Neutral or Integer 0).\n\tUDT_ELELEVEL:       Element Level.\n\tUDT_AMOTION:        AMotion Rate.\n\tUDT_ADELAY:         ADelay Rate.\n\tUDT_DMOTION:        DMotion Rate.\n\tUDT_HUNGER:         Hunger Rate - for summons.\n\tUDT_INTIMACY:       Intimacy Rate - for summons.\n\tUDT_LIFETIME:       LifeTime - for summons.\n\tUDT_MERC_KILLCOUNT: Kill count for mercenaries\n\tUDT_STATADD:        Status Points - for NPCs.\n\tUDT_GROUP:          group id\n\nreturns 0 if value could not be set, 1 if successful."
    },
    {
        "command": "getunitdata (<GID>,<DataType>)",
        "line": 10260,
        "category": "12 - NPC Trader-Related Commands",
        "sub_category": "",
        "description": "*getunitdata (<GID>,<DataType>)\n\nRetrieves real-time data of a game object.\n\nApplicable Data types (available as constants) -\n\tData Types          Description (return type)\n\tUDT_SIZE:           Unit Size\n\tUDT_LEVEL:          Level\n\tUDT_HP:             Current HP\n\tUDT_MAXHP:          Max HP\n\tUDT_SP:             SP\n\tUDT_MAXSP:          MAX SP\n\tUDT_MASTERAID:      Master Account ID (for Summons)\n\tUDT_MASTERCID:      Master Char ID (for Summons)\n\tUDT_SPEED:          Unit Speed.\n\tUDT_MODE:           Mode (Mobs only)\n\tUDT_AI:             Unit AI Type (see doc\/constants.md for Unit AI Types)\n\tUDT_SCOPTION:       Status Options. (see doc\/constants.md for Unit Option Types)\n\tUDT_SEX:            Gender of the unit. (see doc\/constants.md for Genders)\n\tUDT_CLASS:          Class of the unit. (Monster ID)\n\tUDT_HAIRSTYLE:      Hair Style ID.\n\tUDT_HAIRCOLOR:      Hair Color ID.\n\tUDT_HEADBOTTOM:     Headgear Bottom Sprite ID.\n\tUDT_HEADMIDDLE:     Headgear Middle Sprite ID.\n\tUDT_HEADTOP:        Headgear Top Sprite ID.\n\tUDT_CLOTHCOLOR:     Cloth Color ID.\n\tUDT_SHIELD:         Shield Sprite ID.\n\tUDT_WEAPON:         Weapon Sprite ID.\n\tUDT_LOOKDIR:        Face direction.\n\tUDT_CANMOVETICK:    Stop a unit from move for n seconds.\n\tUDT_STR:            Unit STR.\n\tUDT_AGI:            Unit AGI.\n\tUDT_VIT:            Unit VIT.\n\tUDT_INT:            Unit INT.\n\tUDT_DEX:            Unit DEX.\n\tUDT_LUK:            Unit LUK.\n\tUDT_ATKRANGE:       Attack range of a unit.\n\tUDT_ATKMIN:         Min Atk of a unit.\n\tUDT_ATKMAX:         Max Atk of a unit.\n\tUDT_MATKMIN:        Min MATK of a unit.\n\tUDT_MATKMAX:        Max MATK of a unit.\n\tUDT_DEF:            DEF.\n\tUDT_MDEF:           MDEF.\n\tUDT_HIT:            HIT.\n\tUDT_FLEE:           FLEE.\n\tUDT_PDODGE:         Perfect Dodge.\n\tUDT_CRIT:           Critical Rate.\n\tUDT_RACE:           Race. (Eg. constants RC_DemiHuman or Integer 7).\n\tUDT_ELETYPE:        Element. (Eg. constants Ele_Neutral or Integer 0).\n\tUDT_ELELEVEL:       Element Level.\n\tUDT_AMOTION:        AMotion Rate.\n\tUDT_ADELAY:         ADelay Rate.\n\tUDT_DMOTION:        DMotion Rate.\n\tUDT_HUNGER:         Hunger Rate - for summons.\n\tUDT_INTIMACY:       Intimacy Rate - for summons.\n\tUDT_LIFETIME:       LifeTime - for summons.\n\tUDT_MERC_KILLCOUNT: Kill count for mercenaries.\n\tUDT_GROUP:          group id\n\nreturns -1 if value could not be retrieved."
    },
    {
        "command": "getunitname(<GID>)",
        "line": 10323,
        "category": "12 - NPC Trader-Related Commands",
        "sub_category": "",
        "description": "*getunitname(<GID>)\n\nRetrieve the name of a unit.\n\nreturns \"Unknown\" if the value could not be retrieved."
    },
    {
        "command": "setunitname(<GID>, <Name>)",
        "line": 10331,
        "category": "12 - NPC Trader-Related Commands",
        "sub_category": "",
        "description": "*setunitname(<GID>, <Name>)\n\nChanges the name of a unit.\n\nSupported Types - [ MOB | HOM | PET ].\n\nreturns 1 on success, 0 on failure."
    },
    {
        "command": "join_clan(<ClanID>{, <account id>})",
        "line": 10345,
        "category": "13 - Clan System Related Commands",
        "sub_category": "",
        "description": "*join_clan(<ClanID>{, <account id>})\n\nJoins a player into the given clan.\nIf no RID is given, will run with the current attached player.\n\nreturns true on success, false on failure."
    },
    {
        "command": "clan_leave({<account id>})",
        "line": 10354,
        "category": "13 - Clan System Related Commands",
        "sub_category": "",
        "description": "*clan_leave({<account id>})\n\nRemoves a player from its clan.\nIf no RID is given, will run with the current attached player.\n\nreturns true on success, false on failure."
    },
    {
        "command": "clan_master(<ClanID>)",
        "line": 10363,
        "category": "13 - Clan System Related Commands",
        "sub_category": "",
        "description": "*clan_master(<ClanID>)\n\nEnables the Emblem of the given Clan to the current NPC"
    },
    {
        "command": "airship_respond(<flag>)",
        "line": 10373,
        "category": "",
        "sub_category": "",
        "description": "*airship_respond(<flag>)\n\nSend client respond to different private airship status.\nthe available flags are:\n\tP_AIRSHIP_NONE\n\tP_AIRSHIP_RETRY\n\tP_AIRSHIP_INVALID_START_MAP\n\tP_AIRSHIP_INVALID_END_MAP\n\tP_AIRSHIP_ITEM_NOT_ENOUGH\n\tP_AIRSHIP_ITEM_INVALID"
    },
    {
        "command": "openstylist()",
        "line": 10386,
        "category": "",
        "sub_category": "",
        "description": "*openstylist()\n\nOpens the styling shop on client"
    },
    {
        "command": "msgtable(<message_id>{, <color>})",
        "line": 10392,
        "category": "",
        "sub_category": "",
        "description": "*msgtable(<message_id>{, <color>})\n\nShow in client message by <message_id> from msg string table\nwith optional <color>."
    },
    {
        "command": "msgtable2(<message_id>, <param>{, <color>})",
        "line": 10399,
        "category": "",
        "sub_category": "",
        "description": "*msgtable2(<message_id>, <param>{, <color>})\n\nShow in client message by <message_id> from msg string table.\n<param> is parameter for this message. Can be string or int.\nOptional <color> can be used for set color for whole message."
    },
    {
        "command": "camerainfo()",
        "line": 10407,
        "category": "",
        "sub_category": "",
        "description": "*camerainfo()\n\nShow or hide camera info window.\nWorks for 20160525 clients or newer."
    },
    {
        "command": "changecamera(<range>, <rotation>, <latitude>{, <target>})",
        "line": 10414,
        "category": "",
        "sub_category": "",
        "description": "*changecamera(<range>, <rotation>, <latitude>{, <target>})\n\nChange camera range, rotation, latitude.\nThe optional target parameter specifies who will get changed\ncamera.\nWorks for 20160525 clients or newer."
    },
    {
        "command": "achievement_progress(<ach_id>, <obj_idx>, <progress>, <incremental>{, <account_id>});",
        "line": 10423,
        "category": "",
        "sub_category": "",
        "description": "*achievement_progress(<ach_id>, <obj_idx>, <progress>, <incremental>{, <account_id>});\n\nMake the player progress in the specified achievement.\naid         - achievement ID\nobj_idx     - achievement objective index.\nprogress    - objective progress towards goal.\nincremental - (boolean) true to add the progress towards the goal,\n              false to use the progress only as a comparand.\naccount_id  - (optional) AID to perform on (default to attached player).\n\nreturns progress on success and false on failure"
    },
    {
        "command": "itempreview(<index>)",
        "line": 10437,
        "category": "",
        "sub_category": "",
        "description": "*itempreview(<index>)\n\nUpdate already opened preview window with item from\n inventory with given index.\nWorks for 20181017 RE and main clients or newer."
    },
    {
        "command": "enchantitem(<equip_pos>, <card_slot>, <card_id>);",
        "line": 10445,
        "category": "",
        "sub_category": "",
        "description": "*enchantitem(<equip_pos>, <card_slot>, <card_id>);\n\nInsert card into equipped item in EQI_* slot.\ncard_slot - can be 0 to 3.\ncard_id   - any card item id.\n\nreturns true if all parameters correct\nfalse in other case.\nWorks for 20160831 main, 20151118 RE, any zero version"
    },
    {
        "command": "servicemessage(\"<message>\", <color>{, <account_id>})",
        "line": 10457,
        "category": "",
        "sub_category": "",
        "description": "*servicemessage(\"<message>\", <color>{, <account_id>})\n*servicemessage(\"<message>\", <color>{, <player_name>})\n\nThat command will send a service message to the chat window of the character\nspecified by account ID or name, or to connected to npc player.\nIt will not be seen by anyone else.\n\nWorks for 20170830 RE and main and for any zero clients"
    },
    {
        "command": "expandinventoryack(<result>{, <itemId>})",
        "line": 10468,
        "category": "",
        "sub_category": "",
        "description": "*expandinventoryack(<result>{, <itemId>})\n\nSend initial inventory expansion result.\nNormally this function should be called from script label\ninventory_expansion::OnInventoryExpandRequest.\n\nValid result statuses:\n EXPAND_INVENTORY_ASK_CONFIRMATION - force client to ask player about inventory expansion\n EXPAND_INVENTORY_FAILED - other failed reason\n EXPAND_INVENTORY_OTHER_WORK - failed because player busy with other work\n EXPAND_INVENTORY_MISSING_ITEM - failed because missing item\n EXPAND_INVENTORY_MAX_SIZE - failed because inventory size already maximum\n\nItemId make sense only if result is EXPAND_INVENTORY_ASK_CONFIRMATION\nWorks for 20181212 zero clients"
    },
    {
        "command": "expandinventoryresult(<result>)",
        "line": 10486,
        "category": "",
        "sub_category": "",
        "description": "*expandinventoryresult(<result>)\n\nSend final inventory expansion result.\nNormally this function should be called from script label\ninventory_expansion::OnInventoryExpandConfirmed.\n\nValid result values:\n EXPAND_INVENTORY_RESULT_SUCCESS - success message\n EXPAND_INVENTORY_RESULT_FAILED - other failed reason\n EXPAND_INVENTORY_RESULT_OTHER_WORK - failed because player busy with other work\n EXPAND_INVENTORY_RESULT_MISSING_ITEM - failed because missing item\n EXPAND_INVENTORY_RESULT_MAX_SIZE - failed because inventory size already maximum\n\nWorks for 20181212 zero clients"
    },
    {
        "command": "expandinventory(<value>)",
        "line": 10503,
        "category": "",
        "sub_category": "",
        "description": "*expandinventory(<value>)\n\nAdjust player inventory to given value.\nMaximum inventory size is MAX_INVENTORY.\nMinimum inventory size is FIXED_INVENTORY_SIZE.\nFor supported clients it send inventory change packet. For old clients,\nthis change is silent.\nCurrent max inventory size can be read by function getInventorySize()."
    },
    {
        "command": "getinventorysize()",
        "line": 10514,
        "category": "",
        "sub_category": "",
        "description": "*getinventorysize()\n\nReturn current player max inventory size.\nThis value always smaller or equal to MAX_INVENTORY.\nSize can be changed by group of functions expandInventory*"
    },
    {
        "command": "getunittitle(<GID>)",
        "line": 10522,
        "category": "",
        "sub_category": "",
        "description": "*getunittitle(<GID>)\n\nReturn unit title string.\nWorks for 20180207 main clients, 20171129 re clients, 20171130 zero clients"
    },
    {
        "command": "setunittitle(<GID>, <title>)",
        "line": 10529,
        "category": "",
        "sub_category": "",
        "description": "*setunittitle(<GID>, <title>)\n\nSet unit title string.\nInvisible for players, because current implimentation using title id only.\nWorks for 20180207 main clients, 20171129 re clients, 20171130 zero clients"
    },
    {
        "command": "closeroulette()",
        "line": 10537,
        "category": "",
        "sub_category": "",
        "description": "*closeroulette()\n\nForce close roulette window.\nWorks for 20141008 main clients, 20140903 re, any zero."
    },
    {
        "command": "openrefineryui()",
        "line": 10543,
        "category": "",
        "sub_category": "",
        "description": "*openrefineryui()\n\nOpens refinery user interface for the player\nreturns true on success and false on failure"
    }
]